{"version":3,"file":"date_grammar.js","names":["base","dateGrammar","concat","numbers","whitespace","userAttribute"],"sources":["../../../src/grammars/date_grammar.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport { numbers } from './common/numbers'\nimport { whitespace } from './common/whitespace'\nimport { userAttribute } from './user_attribute_grammar'\n\nconst base = `\n{ const Object = options.Object }\n\n//LOOKER DATE GRAMMAR\nROOT = EXPRESSION\n\nEXPRESSION = expression:( LOGICAL_EXPRESSION / TERM ) {\n\treturn Object.assign({}, expression, {is:true})\n}\n\nLOGICAL_EXPRESSION = left:TERM _ type:LOGIC_SYMBOL _ right:EXPRESSION {\n\treturn {\n    \ttype:type.toLowerCase(),\n        left: left,\n        right: right,\n        is: true\n    }\n}\n\nTERM = term:(USER_ATTRIBUTE /\n       DATES /\n       RELATIVE_RANGE /\n       FROM_NOW /\n       PAST_AGO /\n       PAST /\n       THIS_RANGE / \n       THIS_NEXT /\n       LAST /\n       LAST_INTERVAL /\n       DAY_INTERVAL /\n       BEFORE_AFTER_THIS_NEXT_LAST /\n       DAY_EXPRESSIONS /\n       BEFORE_AFTER /\n       FISCAL_QUARTER_RULE /\n       FISCAL_YEAR_RULE /\n       NULLS) {\n           return Object.assign({}, term, {is: true})\n       }\n\nTHIS_NEXT = type:(\"this\"i / \"next\"i) _ unit:DAY_YEAR_UNITS {\n\treturn {type:type.toLowerCase(), unit:unit}\n}\n\nLAST = type:(\"last\"i) _ unit:INTERVAL_UNIT {\n\treturn {type:type.toLowerCase(), unit:unit}\n}\n\nTHIS_RANGE = \"THIS \"i startInterval:INTERVAL_UNIT \" TO \"i endInterval:INTERVAL_UNIT {\n    return {\n        type: 'thisRange',\n        startInterval: startInterval,\n        endInterval: endInterval\n    }\n}\n\nPAST = interval:N_INTERVAL {\n\treturn {type:'past', value:interval.value, unit:interval.unit}\n}\n\nPAST_AGO = interval:N_INTERVAL SPACE \"AGO\"i {\n\treturn {type:'pastAgo', value:interval.value, unit:interval.unit}\n}\n\nLAST_INTERVAL = \"last\"i _ interval:N_INTERVAL {\n\treturn {type:'lastInterval', value:interval.value, unit:interval.unit}\n}\n\nFROM_NOW = interval:N_INTERVAL SPACE \"FROM NOW\"i {\n\treturn {type:'from now', value:interval.value, unit:interval.unit}\n}\n\nINTERVAL_TYPE = SPACE dir:(\"AGO\"i/\"FROM NOW\"i) {\n\treturn dir.toLowerCase() === \"ago\" ? \"ago\" : \"from now\"\n}\n\nRELATIVE_RANGE = startInterval:N_INTERVAL intervalType:INTERVAL_TYPE SPACE \"for\"i SPACE endInterval:N_INTERVAL  {\n    if (startInterval.value === endInterval.value &&\n        startInterval.unit === endInterval.unit) {\n        return {\n            type: 'past',\n            value: startInterval.value,\n            unit: startInterval.unit,\n            complete: true\n        }\n    }\n    return {type:'relative', intervalType:intervalType, startInterval:startInterval, endInterval:endInterval}\n\n}\n\nBEFORE_AFTER = prefix:(BEFORE / AFTER) SPACE interval:N_INTERVAL intervalType:INTERVAL_TYPE? {\n    return {\n        range: 'relative',\n        value: interval.value,\n        unit: interval.unit,\n        type: prefix,\n        fromnow: intervalType === 'from now'\n    }\n} / prefix:(BEFORE / AFTER) SPACE date:DATETIME {\n    return { range: 'absolute', date: date, type: prefix}\n}\n\nBEFORE_AFTER_THIS_NEXT_LAST = prefix:(BEFORE / AFTER) _ type:(\"this\"i / \"next\"i / \"last\"i) _ unit:DAY_YEAR_UNITS  {\n    return {\n        type:prefix.toLowerCase() + '_' + type,\n        unit: unit\n    }\n}\nRANGE = start:DATETIME SPACE \"TO\"i SPACE end:DATETIME {\n\t\treturn {\n        \ttype:'range',\n            start:start,\n            end:end\n        }\n    }\n\nRANGE_INTERVAL = start:DATETIME SPACE \"FOR\"i SPACE end:N_INTERVAL {\n\t\treturn {\n        \ttype:'rangeInterval',\n            start:start,\n            end:end\n        }\n    }\n\nYEAR_MONTH_INTERVAL = start:YEAR_MONTH_RULE SPACE \"FOR\"i SPACE end:N_INTERVAL {\n    return {\n        type:'monthInterval',\n        year: start.year,\n        month: start.month,\n        end:end\n    }\n}\n\nDAY_EXPRESSIONS = day:(DAY_OF_WEEK_KEYWORD / DAY_KEYWORD) {\n      return {type:'day', day:day}\n  }\n\nDAY_INTERVAL = day:(DAY_EXPRESSIONS) _ \"for\"i _ interval:N_INTERVAL {\n    return {type:'dayInterval',value:interval.value, unit:interval.unit}\n}\n\nN_INTERVAL = value:positiveInteger SPACE unit:INTERVAL_UNIT {\n\t\treturn {type: 'interval', value:value, unit:unit}\n\t}\n\nDATES = RANGE_INTERVAL /\n        RANGE /\n        DATETIME_RULE /\n        YEAR_MONTH_INTERVAL /\n        YEAR_QUARTER_RULE /\n        YEAR_MONTH_RULE /\n        YEAR_RULE\n\nYEAR_RULE = year:YYYY {\n\treturn {type:'year', year:year}\n   }\n\nFISCAL_YEAR_RULE = \"FY\" year:YYYY {\n\treturn {type:'fiscalYear', year:year}\n   }\n\nFISCAL_QUARTER_RULE = fy:FISCAL_YEAR_RULE \"-\" quarter:(\"Q1\"/\"Q2\"/\"Q3\"/\"Q4\") {\n\treturn {type:'fiscalQuarter', year:fy.year, quarter:quarter}\n   }\n\nYEAR_MONTH_RULE = year:YYYY DATE_SEPARATOR month:MM {\n    return {\n        type: 'month',\n        year:year,\n        month:month\n    }\n}\n\nYEAR_QUARTER_RULE = year:YYYY quarter:QUARTER_RULE {\n    return {\n        type: 'quarter',\n        year:year,\n        quarter:quarter\n    }\n}\n\nNULLS = \"NULL\"i {\n\t\treturn {type:'null'}\n\t} / \"NOT NULL\"i {\n    \treturn {type: 'notnull'}\n    }\n\n// next month\nTHISNEXT = type:(THIS/NEXT) \" \" interval:INTERVAL_UNIT {\n\treturn {\n    \ttype: type.toLowerCase(),\n        interval: interval.toLowerCase()\n    }\n}\n\n// FY2018\nFY = type:\"fy\"i fy:YYYY quarter:QUARTER_RULE ?{\n\t\treturn Object.assign({}, {type:'datetime', fy:fy}, quarter)\n    }\n\nQUARTER_RULE = DATE_SEPARATOR \"Q\"i quarter:[1-4] {\n\treturn {quarter:quarter}\n}\n\nDAY_KEYWORD = day:(\"today\"i / \"yesterday\"i / \"tomorrow\"i) { return day.toLowerCase()}\n\nDAY_OF_WEEK_KEYWORD = day:(\"monday\"i / \"tuesday\"i / \"wednesday\"i / \"thursday\"i / \"friday\"i / \"saturday\"i / \"sunday\"i){ return day.toLowerCase()}\n\nINTERVAL_UNIT = TIME_UNITS / DAY_YEAR_UNITS\n\n// break units as used by the this/next/last expressions\nTIME_UNITS = keyword:$(\n           SECOND /\n           MINUTE /\n           HOUR) (\"s\"i)? {\n             return keyword.toLowerCase()\n           }\n// units used by \nDAY_YEAR_UNITS = keyword:$(\n           DAY /\n           WEEK /\n           MONTH /\n           QUARTER/\n           FISCAL_QUARTER /\n           YEAR /\n           FISCAL_YEAR) (\"s\"i)? {\n             return keyword.toLowerCase()\n           }\n\n\n// 2019/01/01 08:45:00\nDATETIME_RULE = datetime: DATETIME {\n    return {\n        type: 'on',\n        date: datetime\n    }\n}\n\nDATETIME = date:DATE time:(TIME)? {\n\tlet result = Object.assign({}, date, time)\n    return result\n}\n\nDATE = year:YYYY mm_rule:MM_RULE {\n  return Object.assign({}, { year: year || '' }, mm_rule)\n}\n\nMM_RULE = DATE_SEPARATOR month:MM dd_rule:DD_RULE {\n\treturn Object.assign({}, { month: month || '' }, dd_rule)\n}\n\nDD_RULE = DATE_SEPARATOR day:DD { return {day:day} }\n\nTIME = SPACE hour:hh TIME_SEPARATOR minute:mm second:ss? {\n  let result = {hour: hour, minute: minute, second: second || ''}\n  return result\n}\n\nss = TIME_SEPARATOR second: mm {\n\treturn second\n}\n\nDATE_SEPARATOR = (\"/\" / \"-\")\nTIME_SEPARATOR = \":\"\n\nLOGIC_SYMBOL = \",\"\n\nTHIS = \"this\"i\nNEXT = \"next\"i\n\nSECOND = \"second\"i\nMINUTE = \"minute\"i\nHOUR = \"hour\"i\nDAY = \"day\"i\nWEEK =\"week\"i\nMONTH = \"month\"i\nQUARTER = \"quarter\"i\nFISCAL_QUARTER = \"fiscal quarter\"i\nYEAR = \"year\"i\nFISCAL_YEAR = \"fiscal year\"i\n\nBEFORE = \"before\"i {return 'before'}\nAFTER = \"after\"i {return 'after'}\n\nDD = value:([0][1-9]/[1][0-9]/[2][0-9]/[3][0-1]) {return value.join('')}\nMM = value:([0][1-9]/[1][0-2]) {return value.join('')}\nYYYY = value:([0-9][0-9][0-9][0-9]) {return value.join('')}\n\nhh = value:([0][0-9]/[1][0-9]/[2][0-3]) {return value.join('')}\nmm = value:([0][0-9]/[1][0-9]/[2][0-9]/[3][0-9]/[4][0-9]/[5][0-9]) {return value.join('')}\n`\n\nexport const dateGrammar = base.concat(numbers, whitespace, userAttribute)\n"],"mappings":";;;;;;;AAyBA;;AACA;;AACA;;AAEA,MAAMA,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjSA;AAmSO,MAAMC,WAAW,GAAGD,IAAI,CAACE,MAAL,CAAYC,gBAAZ,EAAqBC,sBAArB,EAAiCC,qCAAjC,CAApB"}