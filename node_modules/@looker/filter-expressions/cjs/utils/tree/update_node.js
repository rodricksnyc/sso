"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateNode = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const updateNode = (root, nodeId, updateProps) => {
  if (root.id === nodeId) {
    return _objectSpread(_objectSpread({}, root), updateProps);
  }

  let node = root;

  while (node) {
    const _node = node,
          left = _node.left,
          right = _node.right;

    if (left && left.id === nodeId) {
      node.left = _objectSpread(_objectSpread({}, left), updateProps);
      return root;
    }

    if (right && right.id === nodeId) {
      node.right = _objectSpread(_objectSpread({}, right), updateProps);
      return root;
    }

    node = node.right;
  }

  return root;
};

exports.updateNode = updateNode;
//# sourceMappingURL=update_node.js.map