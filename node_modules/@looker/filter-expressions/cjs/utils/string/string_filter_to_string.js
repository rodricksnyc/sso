"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringFilterToString = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.index-of.js");

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _is_item_to_string = _interopRequireDefault(require("../to_string/is_item_to_string"));

var _tree_to_string = require("../tree/tree_to_string");

var _user_attribute_to_string = require("../user_attribute/user_attribute_to_string");

var _escape_leading_and_trailing_whitespaces = require("./escape_leading_and_trailing_whitespaces");

var _escape_with_caret = require("./escape_with_caret");

var _quote_filter = require("./quote_filter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const escapeWithDoubleLastEscape = v => (0, _escape_leading_and_trailing_whitespaces.escapeLeadingAndTrailingWhitespaces)(v);

const escapeWithoutDoubleLastEscape = v => (0, _escape_leading_and_trailing_whitespaces.escapeLeadingAndTrailingWhitespaces)(v, false);

const escapeBackslash = v => v.replace(/\\/g, '\\\\');

const matchToString = ({
  value,
  is
}) => (0, _is_item_to_string.default)(is, '', '-') + value.map(escapeBackslash).map(_quote_filter.quoteFilter).map(escapeWithDoubleLastEscape).join(`,${(0, _is_item_to_string.default)(is, '', '-')}`);

const multiValueToString = (values, toString) => values.map(toString).join(',');

const startWithToString = ({
  value,
  is
}) => multiValueToString(value.map(escapeBackslash).map(_escape_with_caret.escapeWithCaret).map(escapeWithoutDoubleLastEscape), token => `${(0, _is_item_to_string.default)(is, '', '-') + String(token)}%`);

const endsWithToString = ({
  value,
  is
}) => multiValueToString(value.map(escapeBackslash).map(_escape_with_caret.escapeWithCaret).map(escapeWithDoubleLastEscape), token => `${(0, _is_item_to_string.default)(is, '', '-')}%${String(token)}`);

const containsToString = ({
  value,
  is
}) => multiValueToString(value.map(escapeBackslash).map(_escape_with_caret.escapeWithCaret).map(escapeWithoutDoubleLastEscape), token => `${(0, _is_item_to_string.default)(is, '', '-')}%${String(token)}%`);

const otherToString = ({
  value,
  is
}) => multiValueToString(value, token => `${(0, _is_item_to_string.default)(is, '', '-')}${String(token)}`);

const blankToString = ({
  is
}) => `${(0, _is_item_to_string.default)(is, '', '-')}EMPTY`;

const nullToString = ({
  is
}) => `${(0, _is_item_to_string.default)(is, '', '-')}NULL`;

const anyvalueToString = () => '';

const filterToStringMap = {
  startsWith: startWithToString,
  endsWith: endsWithToString,
  contains: containsToString,
  match: matchToString,
  blank: blankToString,
  null: nullToString,
  user_attribute: _user_attribute_to_string.userAttributeToString,
  anyvalue: anyvalueToString,
  other: otherToString
};

const stringToExpression = item => {
  const toStringFunction = filterToStringMap[item.type];
  return (toStringFunction === null || toStringFunction === void 0 ? void 0 : toStringFunction(item)) || '';
};

const itemIsNotEmpty = ({
  type,
  value
}) => !(['match', 'contains', 'startsWith', 'endsWith', 'other'].indexOf(type) > -1 && (0, _isEmpty.default)(value));

const stringFilterToString = root => (0, _tree_to_string.treeToString)(root, stringToExpression, itemIsNotEmpty);

exports.stringFilterToString = stringFilterToString;
//# sourceMappingURL=string_filter_to_string.js.map