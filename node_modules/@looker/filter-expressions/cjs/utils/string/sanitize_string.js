"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeString = void 0;

var _user_attribute = require("../user_attribute");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const sanitizeString = (item, userAttributes = []) => {
  const _item$id = item.id,
        id = _item$id === void 0 ? '0' : _item$id,
        _item$is = item.is,
        is = _item$is === void 0 ? true : _item$is,
        type = item.type,
        _item$value = item.value,
        value = _item$value === void 0 ? [] : _item$value,
        attributeName = item.attributeName;
  const userAttribute = (0, _user_attribute.findUserAttribute)(attributeName, userAttributes);

  switch (type) {
    case 'match':
      return {
        id,
        is,
        type,
        value: userAttribute ? [userAttribute.value] : value,
        attributeName: '',
        attributeValue: ''
      };

    default:
      return _objectSpread(_objectSpread({}, item), {}, {
        attributeName: '',
        attributeValue: ''
      });
  }
};

exports.sanitizeString = sanitizeString;
//# sourceMappingURL=sanitize_string.js.map