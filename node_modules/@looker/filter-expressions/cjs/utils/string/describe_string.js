"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.describeString = void 0;

require("core-js/modules/es.array.map.js");

var _i18next = _interopRequireDefault(require("i18next"));

var _defaultTo = _interopRequireDefault(require("lodash/defaultTo"));

var _describe_is_item = require("../summary/describe_is_item");

var _describe_is_any_value = require("../summary/describe_is_any_value");

var _describe_null = require("../summary/describe_null");

var _join_or = require("../summary/join_or");

var _describe_user_attribute = require("../user_attribute/describe_user_attribute");

var _add_quotes = require("./add_quotes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const describeMultiValue = value => {
  return value && (0, _join_or.joinOr)(value.map(_add_quotes.addQuotes));
};

const match = ({
  is,
  value
}) => {
  return value && value.length ? (0, _describe_is_item.describeIsItem)(is, describeMultiValue(value)) : (0, _describe_is_any_value.describeIsAnyValue)();
};

const contains = ({
  is,
  value
}) => {
  const t = _i18next.default.t.bind(_i18next.default);

  const valueText = describeMultiValue(value);
  const containsText = t('contains value', {
    ns: 'describe_string',
    value: valueText
  });
  const doesntContainText = t('does not contain value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? containsText : doesntContainText;
};

const startsWith = ({
  is,
  value
}) => {
  const t = _i18next.default.t.bind(_i18next.default);

  const valueText = describeMultiValue(value);
  const startsWithText = t('starts with value', {
    ns: 'describe_string',
    value: valueText
  });
  const doesntStartWithText = t('does not start with value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? startsWithText : doesntStartWithText;
};

const endsWith = ({
  is,
  value
}) => {
  const t = _i18next.default.t.bind(_i18next.default);

  const valueText = describeMultiValue(value);
  const endsWithText = t('ends with value', {
    ns: 'describe_string',
    value: valueText
  });
  const doesntEndWithText = t('does not end with value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? endsWithText : doesntEndWithText;
};

const blank = ({
  is
}) => {
  const t = _i18next.default.t.bind(_i18next.default);

  return (0, _describe_is_item.describeIsItem)(is, t('blank', {
    ns: 'describe_string'
  }));
};

const filterToStringMap = {
  blank,
  null: _describe_null.describeNull,
  match,
  contains,
  startsWith,
  endsWith,
  user_attribute: _describe_user_attribute.describeUserAttribute,
  anyvalue: _describe_is_any_value.describeIsAnyValue
};

const describeString = item => (0, _defaultTo.default)(filterToStringMap[item.type], () => '')(item);

exports.describeString = describeString;
//# sourceMappingURL=describe_string.js.map