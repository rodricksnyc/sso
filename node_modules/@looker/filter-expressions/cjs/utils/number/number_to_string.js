"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberToString = exports.serializeNumberNode = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

var _defaultTo = _interopRequireDefault(require("lodash/defaultTo"));

var _flow = _interopRequireDefault(require("lodash/fp/flow"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _partition3 = _interopRequireDefault(require("lodash/partition"));

var _number_types = require("../../types/number_types");

var _tree_to_list = require("../tree/tree_to_list");

var _user_attribute_to_string = require("../user_attribute/user_attribute_to_string");

var _is_null_undefined_or_empty = require("./is_null_undefined_or_empty");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const nullToString = ({
  is
}) => `${isToString(is)}null`;

const betweenToString = ({
  bounds,
  low,
  high,
  is
}) => bounds && (!(0, _is_null_undefined_or_empty.isNullUndefinedOrEmpty)(low) || !(0, _is_null_undefined_or_empty.isNullUndefinedOrEmpty)(high)) ? `${isToString(is)}${bounds[0]}${(0, _defaultTo.default)(low, '')},${(0, _defaultTo.default)(high, '')}${bounds[1]}` : '';

const valueToString = ({
  is,
  type,
  value
}) => (value === null || value === void 0 ? void 0 : value.map(v => `${isToString(is)}${type === '=' ? '' : type}${v}`).join(',')) || '';

const isToString = (is = true, yes = '', no = 'not ') => `${is ? yes : no}`;

const filterToStringMap = {
  null: nullToString,
  between: betweenToString,
  user_attribute: _user_attribute_to_string.userAttributeToString
};

const serializeNumberNode = item => {
  const toStringFunction = filterToStringMap[item.type] || valueToString;
  return (toStringFunction === null || toStringFunction === void 0 ? void 0 : toStringFunction(item)) || '';
};

exports.serializeNumberNode = serializeNumberNode;

const listToExpression = items => items.map(serializeNumberNode).filter(String).join(',');

const removeEmptyItems = items => items.filter(({
  type,
  value
}) => !(['=', '>', '<', '>=', '<='].indexOf(type) > -1 && (0, _isEmpty.default)(value)));

const addDuplicateNotNodeIfNeeded = list => {
  var _andClauses$0$value;

  const _partition = (0, _partition3.default)(list, item => item.is),
        _partition2 = _slicedToArray(_partition, 2),
        orClauses = _partition2[0],
        andClauses = _partition2[1];

  if (andClauses.length === 1 && !(andClauses[0].type === _number_types.NumberTypes.EQUAL && ((_andClauses$0$value = andClauses[0].value) === null || _andClauses$0$value === void 0 ? void 0 : _andClauses$0$value.length) > 1) && orClauses.length >= 1 && orClauses.every(item => item.type === '=')) {
    return [...orClauses, ...andClauses, andClauses[0]];
  }

  return list;
};

const numberToString = (0, _flow.default)(_tree_to_list.treeToList, removeEmptyItems, addDuplicateNotNodeIfNeeded, listToExpression);
exports.numberToString = numberToString;
//# sourceMappingURL=number_to_string.js.map