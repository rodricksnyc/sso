"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userAttributeTransform = void 0;

var _types = require("../../types");

var _user_attribute = require("../user_attribute");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const updateAttributeValue = (node, userAttributes) => {
  if (node && node.type === _types.TYPE_USER_ATTRIBUTE) {
    const userAttribute = (0, _user_attribute.findUserAttribute)(node.attributeName, userAttributes);
    return _objectSpread(_objectSpread({}, node), {}, {
      attributeValue: userAttribute && userAttribute.value
    });
  }

  return node;
};

const userAttributeTransform = userAttributes => root => {
  if (!userAttributes || !userAttributes.length) return root;
  const workingRoot = updateAttributeValue(root, userAttributes);
  let pointer = workingRoot;

  while (pointer.right) {
    pointer.left = pointer.left && updateAttributeValue(pointer.left, userAttributes);
    pointer.right = updateAttributeValue(pointer.right, userAttributes);
    pointer = pointer.right;
  }

  return workingRoot;
};

exports.userAttributeTransform = userAttributeTransform;
//# sourceMappingURL=userAttributeTransform.js.map