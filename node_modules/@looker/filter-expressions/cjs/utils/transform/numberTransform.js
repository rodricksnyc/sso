"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberTransform = void 0;

require("core-js/modules/es.array.filter.js");

var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));

var _number_types = require("../../types/number_types");

var _number_to_string = require("../number/number_to_string");

var _tree = require("../tree");

var _mergeMultiValueNodes = require("./mergeMultiValueNodes");

var _apply_id_to_ast = _interopRequireDefault(require("./utils/apply_id_to_ast"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const countNots = root => {
  let count = 0;
  (0, _tree.inorderTraversal)(root, node => {
    if (node.is === false) {
      count += 1;
    }
  });
  return count;
};

const removeDuplicateNotNodes = root => {
  const workingRoot = (0, _cloneDeep.default)((0, _apply_id_to_ast.default)(root));
  const andClauses = (0, _tree.treeToList)(workingRoot).filter(item => item.is === false);
  return andClauses.length === 2 && (0, _number_to_string.serializeNumberNode)(andClauses[0]) === (0, _number_to_string.serializeNumberNode)(andClauses[1]) ? (0, _tree.removeNode)(workingRoot, andClauses[1].id) : workingRoot;
};

const numberTransform = root => {
  const countOfNotNodes = countNots(root);
  const mergeNodesWithDifferentIsValue = countOfNotNodes === 1;
  const mergedRoot = (0, _mergeMultiValueNodes.mergeMultiValueNodes)(root, _number_types.NumberTypes.EQUAL, mergeNodesWithDifferentIsValue);
  const checkForDuplicates = countOfNotNodes === 2;
  return checkForDuplicates ? removeDuplicateNotNodes(mergedRoot) : mergedRoot;
};

exports.numberTransform = numberTransform;
//# sourceMappingURL=numberTransform.js.map