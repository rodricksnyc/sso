"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.index-of.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMultiValueNodes = void 0;

var _union = _interopRequireDefault(require("lodash/union"));

const _excluded = ["left", "right"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const mergeNodes = (left, right) => _objectSpread(_objectSpread({}, left), {}, {
  type: left.type,
  value: (0, _union.default)(left.value, right.value),
  is: left.is && right.is
});

const canMergeLeftNodes = ({
  left,
  right
}, compareType, allowDifferentIsValue) => left && right && right.left && left.type === right.left.type && left.type === compareType && (left.is === right.left.is || allowDifferentIsValue);

const canMergeEndNodes = ({
  left,
  right
}, compareType, allowDifferentIsValue) => left && right && left.type === right.type && left.type === compareType && (left.is === right.is || allowDifferentIsValue);

const mergeNodesWithSameType = (root, compareType, allowDifferentIsValue = false) => {
  let node = root;

  while (canMergeLeftNodes(node, compareType, allowDifferentIsValue)) {
    const _node = node,
          left = _node.left,
          right = _node.right,
          rest = _objectWithoutProperties(_node, _excluded);

    const newLeft = mergeNodes(left, right.left);
    const newRight = right.right;
    node = _objectSpread(_objectSpread({}, rest), {}, {
      left: newLeft,
      right: newRight
    });
  }

  if (canMergeEndNodes(node, compareType, allowDifferentIsValue)) {
    node = mergeNodes(node.left, node.right);
  }

  return node;
};

const mergeMultiValueNodes = (root, type, mergeDifferentIsValue = false) => {
  const workingRoot = mergeNodesWithSameType(root, type, mergeDifferentIsValue);
  let pointer = workingRoot;

  while (pointer.right) {
    pointer.right = mergeNodesWithSameType(pointer.right, type, mergeDifferentIsValue);
    pointer = pointer.right;
  }

  return workingRoot;
};

exports.mergeMultiValueNodes = mergeMultiValueNodes;
//# sourceMappingURL=mergeMultiValueNodes.js.map