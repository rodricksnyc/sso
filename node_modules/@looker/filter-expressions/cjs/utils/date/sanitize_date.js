"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeDate = void 0;

var _date_conversions = require("./date_conversions");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const sanitizeDate = item => {
  const dateItem = (0, _date_conversions.dateToFilterDateTimeModel)(new Date(Date.now()));
  const _item$id = item.id,
        id = _item$id === void 0 ? '0' : _item$id,
        _item$is = item.is,
        is = _item$is === void 0 ? true : _item$is,
        type = item.type,
        unit = item.unit,
        value = item.value,
        _item$range = item.range,
        range = _item$range === void 0 ? 'relative' : _item$range,
        _item$date = item.date,
        date = _item$date === void 0 ? _objectSpread({}, dateItem) : _item$date,
        _item$year = item.year,
        year = _item$year === void 0 ? dateItem.year : _item$year,
        _item$month = item.month,
        month = _item$month === void 0 ? dateItem.month : _item$month,
        _item$start = item.start,
        start = _item$start === void 0 ? dateItem : _item$start,
        _item$end = item.end,
        end = _item$end === void 0 ? dateItem : _item$end,
        startInterval = item.startInterval,
        endInterval = item.endInterval,
        intervalType = item.intervalType;
  const interval = {
    unit: 'month',
    value: 3
  };

  switch (type) {
    case 'past':
      return {
        id,
        is,
        type,
        unit: unit || 'month',
        value: value || 1
      };

    case 'this':
    case 'next':
    case 'last':
      return {
        id,
        is,
        type,
        unit: unit || 'month'
      };

    case 'anytime':
      return {
        id,
        is,
        type
      };

    case 'year':
      return {
        id,
        is,
        type,
        year
      };

    case 'month':
      return {
        id,
        is,
        type,
        year,
        month
      };

    case 'before':
    case 'after':
      return {
        id,
        is,
        type,
        range,
        unit: unit || 'month',
        value: value || 1,
        date
      };

    case 'range':
      return {
        id,
        is,
        type,
        start,
        end
      };

    case 'thisRange':
      return {
        id,
        is,
        type,
        startInterval,
        endInterval
      };

    case 'on':
      return {
        id,
        is,
        type,
        date: (0, _date_conversions.clearTimeFilterDateTimeModel)(date)
      };

    case 'relative':
      return {
        id,
        is,
        type,
        startInterval: startInterval || interval,
        endInterval: endInterval || interval,
        intervalType: intervalType || 'ago'
      };

    case 'null':
    case 'notnull':
      return {
        id,
        is,
        type
      };

    default:
      return _objectSpread(_objectSpread({}, item), {}, {
        type
      });
  }
};

exports.sanitizeDate = sanitizeDate;
//# sourceMappingURL=sanitize_date.js.map