"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTimeAndFormatAccurate = exports.parseTimeInput = exports.get24HourTime = exports.formatAndDisplayTime = exports.displayTimeAsIs = exports.meridiemFrom24HourTime = exports.allowedTimeInputValues = void 0;

require("core-js/modules/es.string.trim.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.string.match.js");

var _convert_to_number = require("./convert_to_number");

var _zero_pad = require("./zero_pad");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const meridiemChange = 12;
const hourCeil = 24;
const minuteCeil = 60;
const defaultMinuteValue = 0;
const meridiemAm = 'AM';
const meridiemPm = 'PM';
const allowedTimeInputValues = /\d|[a|p|m]|\s|^$/gi;
exports.allowedTimeInputValues = allowedTimeInputValues;
const exactTimeMatch = /^(0[0-9]|1[0-9]|2[0-3]|[0-9]):([0-5][0-9])\s(am|pm)$/gi;

const maxHourValue = hour => hour <= 0 || hour >= hourCeil ? 0 : hour;

const maxMinuteValue = minute => !minute || minute < 0 || minute >= minuteCeil ? 0 : minute;

const getAccurateMeridiem = ({
  hour,
  meridiem = meridiemAm
}) => hour > meridiemChange ? meridiemPm : meridiem.toUpperCase();

const meridiemFrom24HourTime = hour => hour >= meridiemChange && hour < hourCeil ? meridiemPm : meridiemAm;

exports.meridiemFrom24HourTime = meridiemFrom24HourTime;

const get12HourTimeValue = hour => {
  if (hour > meridiemChange) {
    hour = hour - meridiemChange;
  }

  if (hour === 0) {
    hour = meridiemChange;
  }

  return hour;
};

const displayTimeAsIs = ({
  hour,
  minute = defaultMinuteValue,
  meridiem = ''
}) => `${hour}:${(0, _zero_pad.zeroPad2)(minute)} ${meridiem}`.trim();

exports.displayTimeAsIs = displayTimeAsIs;

const formatAndDisplayTime = ({
  hour,
  minute = 0,
  meridiem = meridiemAm
}) => displayTimeAsIs({
  hour: get12HourTimeValue(maxHourValue(hour)),
  minute: maxMinuteValue(minute),
  meridiem: getAccurateMeridiem({
    hour: maxHourValue(hour),
    meridiem
  })
});

exports.formatAndDisplayTime = formatAndDisplayTime;

const get24HourTime = ({
  hour,
  minute = 0,
  meridiem = ''
}) => {
  hour = maxHourValue(hour);

  if (meridiem.toUpperCase() === meridiemPm && hour < meridiemChange) {
    hour = meridiemChange + hour;
  }

  return {
    hour,
    minute: maxMinuteValue(minute),
    meridiem: hour < meridiemChange ? meridiemAm : meridiemPm
  };
};

exports.get24HourTime = get24HourTime;

const parseTimeInput = inputValue => {
  const _inputValue$split$fil = inputValue.split(exactTimeMatch).filter(Boolean),
        _inputValue$split$fil2 = _slicedToArray(_inputValue$split$fil, 3),
        hour = _inputValue$split$fil2[0],
        minute = _inputValue$split$fil2[1],
        meridiem = _inputValue$split$fil2[2];

  return {
    hour: (0, _convert_to_number.convertToNumber)(hour),
    minute: (0, _convert_to_number.convertToNumber)(minute),
    meridiem
  };
};

exports.parseTimeInput = parseTimeInput;

const isTimeAndFormatAccurate = input => !!input.match(exactTimeMatch);

exports.isTimeAndFormatAccurate = isTimeAndFormatAccurate;
//# sourceMappingURL=format_time.js.map