import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.map.js";
import flow from 'lodash/fp/flow';
import { quoteFilter } from '../string/quote_filter';
import isItemToString from '../to_string/is_item_to_string';
import { userAttributeToString } from '../user_attribute/user_attribute_to_string';
import { escapeParameterValue } from './escape_parameter_value';
import { treeToList } from '../tree/tree_to_list';

var matchToString = function matchToString(_ref, _, field) {
  var value = _ref.value,
      is = _ref.is;
  return isItemToString(is, '', '-') + value.map(function (val) {
    return field !== null && field !== void 0 && field.has_allowed_values && field !== null && field !== void 0 && field.parameter ? escapeParameterValue(val) : quoteFilter(val);
  }).join(",".concat(isItemToString(is, '', '-')));
};

var anyvalueToString = function anyvalueToString() {
  return '';
};

var filterToStringMap = {
  anyvalue: anyvalueToString,
  match: matchToString,
  user_attribute: userAttributeToString
};

var serializeTierItem = function serializeTierItem(type, field) {
  return function (item) {
    var toStringFunction = filterToStringMap[item.type];
    return (toStringFunction === null || toStringFunction === void 0 ? void 0 : toStringFunction(item, type, field)) || '';
  };
};

var listToExpression = function listToExpression(type, field) {
  return function (items) {
    return items.map(serializeTierItem(type, field)).join(',');
  };
};

export var tierFilterToString = function tierFilterToString(root, type, field) {
  return flow(treeToList, listToExpression(type, field))(root);
};
//# sourceMappingURL=tier_filter_to_string.js.map