function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.split.js";
import "core-js/modules/es.string.match.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import { convertToNumber } from './convert_to_number';
import { zeroPad2 } from './zero_pad';
var meridiemChange = 12;
var hourCeil = 24;
var minuteCeil = 60;
var defaultMinuteValue = 0;
var meridiemAm = 'AM';
var meridiemPm = 'PM';
export var allowedTimeInputValues = /\d|[a|p|m]|\s|^$/gi;
var exactTimeMatch = /^(0[0-9]|1[0-9]|2[0-3]|[0-9]):([0-5][0-9])\s(am|pm)$/gi;

var maxHourValue = function maxHourValue(hour) {
  return hour <= 0 || hour >= hourCeil ? 0 : hour;
};

var maxMinuteValue = function maxMinuteValue(minute) {
  return !minute || minute < 0 || minute >= minuteCeil ? 0 : minute;
};

var getAccurateMeridiem = function getAccurateMeridiem(_ref) {
  var hour = _ref.hour,
      _ref$meridiem = _ref.meridiem,
      meridiem = _ref$meridiem === void 0 ? meridiemAm : _ref$meridiem;
  return hour > meridiemChange ? meridiemPm : meridiem.toUpperCase();
};

export var meridiemFrom24HourTime = function meridiemFrom24HourTime(hour) {
  return hour >= meridiemChange && hour < hourCeil ? meridiemPm : meridiemAm;
};

var get12HourTimeValue = function get12HourTimeValue(hour) {
  if (hour > meridiemChange) {
    hour = hour - meridiemChange;
  }

  if (hour === 0) {
    hour = meridiemChange;
  }

  return hour;
};

export var displayTimeAsIs = function displayTimeAsIs(_ref2) {
  var hour = _ref2.hour,
      _ref2$minute = _ref2.minute,
      minute = _ref2$minute === void 0 ? defaultMinuteValue : _ref2$minute,
      _ref2$meridiem = _ref2.meridiem,
      meridiem = _ref2$meridiem === void 0 ? '' : _ref2$meridiem;
  return "".concat(hour, ":").concat(zeroPad2(minute), " ").concat(meridiem).trim();
};
export var formatAndDisplayTime = function formatAndDisplayTime(_ref3) {
  var hour = _ref3.hour,
      _ref3$minute = _ref3.minute,
      minute = _ref3$minute === void 0 ? 0 : _ref3$minute,
      _ref3$meridiem = _ref3.meridiem,
      meridiem = _ref3$meridiem === void 0 ? meridiemAm : _ref3$meridiem;
  return displayTimeAsIs({
    hour: get12HourTimeValue(maxHourValue(hour)),
    minute: maxMinuteValue(minute),
    meridiem: getAccurateMeridiem({
      hour: maxHourValue(hour),
      meridiem: meridiem
    })
  });
};
export var get24HourTime = function get24HourTime(_ref4) {
  var hour = _ref4.hour,
      _ref4$minute = _ref4.minute,
      minute = _ref4$minute === void 0 ? 0 : _ref4$minute,
      _ref4$meridiem = _ref4.meridiem,
      meridiem = _ref4$meridiem === void 0 ? '' : _ref4$meridiem;
  hour = maxHourValue(hour);

  if (meridiem.toUpperCase() === meridiemPm && hour < meridiemChange) {
    hour = meridiemChange + hour;
  }

  return {
    hour: hour,
    minute: maxMinuteValue(minute),
    meridiem: hour < meridiemChange ? meridiemAm : meridiemPm
  };
};
export var parseTimeInput = function parseTimeInput(inputValue) {
  var _inputValue$split$fil = inputValue.split(exactTimeMatch).filter(Boolean),
      _inputValue$split$fil2 = _slicedToArray(_inputValue$split$fil, 3),
      hour = _inputValue$split$fil2[0],
      minute = _inputValue$split$fil2[1],
      meridiem = _inputValue$split$fil2[2];

  return {
    hour: convertToNumber(hour),
    minute: convertToNumber(minute),
    meridiem: meridiem
  };
};
export var isTimeAndFormatAccurate = function isTimeAndFormatAccurate(input) {
  return !!input.match(exactTimeMatch);
};
//# sourceMappingURL=format_time.js.map