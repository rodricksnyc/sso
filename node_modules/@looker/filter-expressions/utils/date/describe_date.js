import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.function.bind.js";
import "core-js/modules/es.parse-int.js";
import i18next from 'i18next';
import defaultTo from 'lodash/defaultTo';
import { describeNull } from '../summary/describe_null';
import { describeUserAttribute } from '../user_attribute/describe_user_attribute';
import { convertToNumber } from './convert_to_number';
import { hasTimeFilterDateTimeModel } from './date_conversions';
import { formatAndDisplayTime, meridiemFrom24HourTime } from './format_time';
import { getMonths } from './get_months';
import { getUnitLabel } from './get_unit_label';
import { isDateTime } from './is_date_time';
import { zeroPad2, zeroPad4 } from './zero_pad';

var describeDateTime = function describeDateTime(_ref, showTime) {
  var year = _ref.year,
      month = _ref.month,
      day = _ref.day,
      _ref$hour = _ref.hour,
      hour = _ref$hour === void 0 ? 0 : _ref$hour,
      _ref$minute = _ref.minute,
      minute = _ref$minute === void 0 ? 0 : _ref$minute;
  var result = String(zeroPad4(year));
  result += month ? "/".concat(zeroPad2(month)) : '';
  result += day ? "/".concat(zeroPad2(day)) : '';

  if (showTime) {
    result += " ".concat(formatAndDisplayTime({
      hour: convertToNumber(hour.toString()),
      minute: minute,
      meridiem: meridiemFrom24HourTime(hour)
    }));
  }

  return result;
};

var describeInterval = function describeInterval(_ref2) {
  var value = _ref2.value,
      unit = _ref2.unit,
      complete = _ref2.complete;
  var t = i18next.t.bind(i18next);
  var result = t('value complete unitLabel', {
    ns: 'describe_date',
    value: value,
    complete: complete ? t(' complete', {
      ns: 'describe_date'
    }) : '',
    unitLabel: getUnitLabel(unit, value)
  });
  return result;
};

var describeNotNull = function describeNotNull() {
  var t = i18next.t.bind(i18next);
  return t('is not null', {
    ns: 'describe_date'
  });
};

var past = function past(item) {
  var t = i18next.t.bind(i18next);
  return t('is in the last', {
    ns: 'describe_date',
    describeInterval: describeInterval(item)
  });
};

var describePastAgo = function describePastAgo(item) {
  var t = i18next.t.bind(i18next);
  return t('is interval ago', {
    ns: 'describe_date',
    interval: describeInterval(item)
  });
};

var describeTypeAndUnit = function describeTypeAndUnit(_ref3) {
  var type = _ref3.type,
      unit = _ref3.unit;
  var t = i18next.t.bind(i18next);
  var thisText = t('this', {
    ns: 'describe_date'
  });
  var nextText = t('next', {
    ns: 'describe_date'
  });
  return t('is type unitLabel', {
    ns: 'describe_date',
    type: type === 'this' ? thisText : nextText,
    unitLabel: getUnitLabel(unit)
  });
};

var describeLast = function describeLast(_ref4) {
  var unit = _ref4.unit;
  var t = i18next.t.bind(i18next);
  return t('is previous unitLabel', {
    ns: 'describe_date',
    unitLabel: getUnitLabel(unit)
  });
};

var describeYear = function describeYear(_ref5) {
  var year = _ref5.year;
  var t = i18next.t.bind(i18next);
  return t('is in the year year', {
    ns: 'describe_date',
    year: year
  });
};

var describeMonth = function describeMonth(_ref6) {
  var month = _ref6.month,
      year = _ref6.year;
  var t = i18next.t.bind(i18next);
  return t('is in month year', {
    ns: 'describe_date',
    month: getMonths()[parseInt(month, 10) - 1],
    year: year
  });
};

var beforeAfter = function beforeAfter(item, showTime) {
  var t = i18next.t.bind(i18next);
  var type = item.type,
      range = item.range,
      date = item.date,
      fromnow = item.fromnow;
  var prefix = type === 'after' ? t('is on or after', {
    ns: 'describe_date'
  }) : t('is before', {
    ns: 'describe_date'
  });

  if (range === 'absolute') {
    return t('absolute prefix dateTime', {
      ns: 'describe_date',
      prefix: prefix,
      dateTime: describeDateTime(date, showTime)
    });
  }

  var timePassed = fromnow ? t('from now', {
    ns: 'describe_date'
  }) : t('ago', {
    ns: 'describe_date'
  });
  return item.unit === 'now' ? t('prefix now', {
    ns: 'describe_date',
    prefix: prefix
  }) : t('prefix interval timePassed', {
    ns: 'describe_date',
    prefix: prefix,
    interval: describeInterval(item),
    timePassed: timePassed
  });
};

var on = function on(_ref7, showTime) {
  var date = _ref7.date;
  var t = i18next.t.bind(i18next);
  return t('is on dateTime', {
    ns: 'describe_date',
    dateTime: describeDateTime(date, showTime && hasTimeFilterDateTimeModel(date))
  });
};

var describeRange = function describeRange(_ref8, showTime) {
  var start = _ref8.start,
      end = _ref8.end;
  var t = i18next.t.bind(i18next);
  return t('is from dateTimeStart until dateTimeEnd', {
    ns: 'describe_date',
    dateTimeStart: describeDateTime(start, showTime),
    dateTimeEnd: describeDateTime(end, showTime)
  });
};

var describeThisRange = function describeThisRange(_ref9) {
  var startInterval = _ref9.startInterval,
      endInterval = _ref9.endInterval;
  var t = i18next.t.bind(i18next);
  return t('this startInterval to endInterval', {
    ns: 'describe_date',
    startInterval: startInterval,
    endInterval: endInterval
  });
};

var relative = function relative(_ref10) {
  var startInterval = _ref10.startInterval,
      endInterval = _ref10.endInterval,
      intervalType = _ref10.intervalType;
  var t = i18next.t.bind(i18next);
  var agoText = t('ago', {
    ns: 'describe_date'
  });
  var fromNowText = t('from now', {
    ns: 'describe_date'
  });
  return t('is intervalStart intervalType for intervalEnd', {
    ns: 'describe_date',
    intervalStart: describeInterval(startInterval),
    intervalType: intervalType === 'ago' ? agoText : fromNowText,
    intervalEnd: describeInterval(endInterval)
  });
};

var anyvalue = function anyvalue() {
  var t = i18next.t.bind(i18next);
  return t('is any time', {
    ns: 'describe_date'
  });
};

var describeDay = function describeDay(_ref11) {
  var day = _ref11.day;
  var t = i18next.t.bind(i18next);
  return t('is day', {
    ns: 'describe_date',
    day: day
  });
};

var filterToStringMap = {
  "null": describeNull,
  notnull: describeNotNull,
  pastAgo: describePastAgo,
  past: past,
  "this": describeTypeAndUnit,
  next: describeTypeAndUnit,
  last: describeLast,
  year: describeYear,
  month: describeMonth,
  before: beforeAfter,
  after: beforeAfter,
  range: describeRange,
  thisRange: describeThisRange,
  on: on,
  relative: relative,
  anyvalue: anyvalue,
  user_attribute: describeUserAttribute,
  day: describeDay
};
export var describeDate = function describeDate(item, expressionType) {
  return defaultTo(filterToStringMap[item.type], function () {
    return '';
  })(item, isDateTime(expressionType));
};
//# sourceMappingURL=describe_date.js.map