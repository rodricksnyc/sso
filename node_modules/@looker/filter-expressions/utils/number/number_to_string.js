function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import defaultTo from 'lodash/defaultTo';
import flow from 'lodash/fp/flow';
import isEmpty from 'lodash/isEmpty';
import partition from 'lodash/partition';
import { NumberTypes } from '../../types/number_types';
import { treeToList } from '../tree/tree_to_list';
import { userAttributeToString } from '../user_attribute/user_attribute_to_string';
import { isNullUndefinedOrEmpty } from './is_null_undefined_or_empty';

var nullToString = function nullToString(_ref) {
  var is = _ref.is;
  return "".concat(isToString(is), "null");
};

var betweenToString = function betweenToString(_ref2) {
  var bounds = _ref2.bounds,
      low = _ref2.low,
      high = _ref2.high,
      is = _ref2.is;
  return bounds && (!isNullUndefinedOrEmpty(low) || !isNullUndefinedOrEmpty(high)) ? "".concat(isToString(is)).concat(bounds[0]).concat(defaultTo(low, ''), ",").concat(defaultTo(high, '')).concat(bounds[1]) : '';
};

var valueToString = function valueToString(_ref3) {
  var is = _ref3.is,
      type = _ref3.type,
      value = _ref3.value;
  return (value === null || value === void 0 ? void 0 : value.map(function (v) {
    return "".concat(isToString(is)).concat(type === '=' ? '' : type).concat(v);
  }).join(',')) || '';
};

var isToString = function isToString() {
  var is = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var yes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var no = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'not ';
  return "".concat(is ? yes : no);
};

var filterToStringMap = {
  "null": nullToString,
  between: betweenToString,
  user_attribute: userAttributeToString
};
export var serializeNumberNode = function serializeNumberNode(item) {
  var toStringFunction = filterToStringMap[item.type] || valueToString;
  return (toStringFunction === null || toStringFunction === void 0 ? void 0 : toStringFunction(item)) || '';
};

var listToExpression = function listToExpression(items) {
  return items.map(serializeNumberNode).filter(String).join(',');
};

var removeEmptyItems = function removeEmptyItems(items) {
  return items.filter(function (_ref4) {
    var type = _ref4.type,
        value = _ref4.value;
    return !(['=', '>', '<', '>=', '<='].indexOf(type) > -1 && isEmpty(value));
  });
};

var addDuplicateNotNodeIfNeeded = function addDuplicateNotNodeIfNeeded(list) {
  var _andClauses$0$value;

  var _partition = partition(list, function (item) {
    return item.is;
  }),
      _partition2 = _slicedToArray(_partition, 2),
      orClauses = _partition2[0],
      andClauses = _partition2[1];

  if (andClauses.length === 1 && !(andClauses[0].type === NumberTypes.EQUAL && ((_andClauses$0$value = andClauses[0].value) === null || _andClauses$0$value === void 0 ? void 0 : _andClauses$0$value.length) > 1) && orClauses.length >= 1 && orClauses.every(function (item) {
    return item.type === '=';
  })) {
    return [].concat(_toConsumableArray(orClauses), _toConsumableArray(andClauses), [andClauses[0]]);
  }

  return list;
};

export var numberToString = flow(treeToList, removeEmptyItems, addDuplicateNotNodeIfNeeded, listToExpression);
//# sourceMappingURL=number_to_string.js.map