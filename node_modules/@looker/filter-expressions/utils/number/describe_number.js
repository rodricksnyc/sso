import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.function.bind.js";
import i18next from 'i18next';
import defaultTo from 'lodash/defaultTo';
import { describeIsItem } from '../summary/describe_is_item';
import { describeIsAnyValue } from '../summary/describe_is_any_value';
import { describeNull } from '../summary/describe_null';
import { joinOr } from '../summary/join_or';
import { describeUserAttribute } from '../user_attribute/describe_user_attribute';

var describeEquals = function describeEquals(_ref) {
  var is = _ref.is,
      value = _ref.value;
  return value && value.length ? describeIsItem(is, joinOr(value)) : describeIsAnyValue();
};

var describeSingleValue = function describeSingleValue(_ref2) {
  var is = _ref2.is,
      type = _ref2.type,
      value = _ref2.value;
  return describeIsItem(is, "".concat(type, " ").concat(value && value.length ? value[0] : ''));
};

var describeBetween = function describeBetween(_ref3) {
  var bounds = _ref3.bounds,
      low = _ref3.low,
      high = _ref3.high,
      is = _ref3.is;

  if (bounds) {
    var t = i18next.t.bind(i18next);
    var range = "".concat(bounds[0]).concat(low, ", ").concat(high).concat(bounds[1]);
    var isInRangeText = t('is in range range', {
      ns: 'describe_number',
      range: range
    });
    var isNotInRangeText = t('is not in range range', {
      ns: 'describe_number',
      range: range
    });
    return is ? isInRangeText : isNotInRangeText;
  }

  return '';
};

var filterToStringMap = {
  "null": describeNull,
  between: describeBetween,
  '=': describeEquals,
  '>': describeSingleValue,
  '>=': describeSingleValue,
  '<': describeSingleValue,
  '<=': describeSingleValue,
  user_attribute: describeUserAttribute
};
export var describeNumber = function describeNumber(item) {
  return defaultTo(filterToStringMap[item.type], function () {
    return '';
  })(item);
};
//# sourceMappingURL=describe_number.js.map