import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.bind.js";
import i18next from 'i18next';
import defaultTo from 'lodash/defaultTo';
import { describeIsItem } from '../summary/describe_is_item';
import { describeIsAnyValue } from '../summary/describe_is_any_value';
import { describeNull } from '../summary/describe_null';
import { joinOr } from '../summary/join_or';
import { describeUserAttribute } from '../user_attribute/describe_user_attribute';
import { addQuotes } from './add_quotes';

var describeMultiValue = function describeMultiValue(value) {
  return value && joinOr(value.map(addQuotes));
};

var match = function match(_ref) {
  var is = _ref.is,
      value = _ref.value;
  return value && value.length ? describeIsItem(is, describeMultiValue(value)) : describeIsAnyValue();
};

var contains = function contains(_ref2) {
  var is = _ref2.is,
      value = _ref2.value;
  var t = i18next.t.bind(i18next);
  var valueText = describeMultiValue(value);
  var containsText = t('contains value', {
    ns: 'describe_string',
    value: valueText
  });
  var doesntContainText = t('does not contain value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? containsText : doesntContainText;
};

var startsWith = function startsWith(_ref3) {
  var is = _ref3.is,
      value = _ref3.value;
  var t = i18next.t.bind(i18next);
  var valueText = describeMultiValue(value);
  var startsWithText = t('starts with value', {
    ns: 'describe_string',
    value: valueText
  });
  var doesntStartWithText = t('does not start with value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? startsWithText : doesntStartWithText;
};

var endsWith = function endsWith(_ref4) {
  var is = _ref4.is,
      value = _ref4.value;
  var t = i18next.t.bind(i18next);
  var valueText = describeMultiValue(value);
  var endsWithText = t('ends with value', {
    ns: 'describe_string',
    value: valueText
  });
  var doesntEndWithText = t('does not end with value', {
    ns: 'describe_string',
    value: valueText
  });
  return is ? endsWithText : doesntEndWithText;
};

var blank = function blank(_ref5) {
  var is = _ref5.is;
  var t = i18next.t.bind(i18next);
  return describeIsItem(is, t('blank', {
    ns: 'describe_string'
  }));
};

var filterToStringMap = {
  blank: blank,
  "null": describeNull,
  match: match,
  contains: contains,
  startsWith: startsWith,
  endsWith: endsWith,
  user_attribute: describeUserAttribute,
  anyvalue: describeIsAnyValue
};
export var describeString = function describeString(item) {
  return defaultTo(filterToStringMap[item.type], function () {
    return '';
  })(item);
};
//# sourceMappingURL=describe_string.js.map