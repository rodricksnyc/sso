import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.replace.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.index-of.js";
import isEmpty from 'lodash/isEmpty';
import isItemToString from '../to_string/is_item_to_string';
import { treeToString } from '../tree/tree_to_string';
import { userAttributeToString } from '../user_attribute/user_attribute_to_string';
import { escapeLeadingAndTrailingWhitespaces } from './escape_leading_and_trailing_whitespaces';
import { escapeWithCaret } from './escape_with_caret';
import { quoteFilter } from './quote_filter';

var escapeWithDoubleLastEscape = function escapeWithDoubleLastEscape(v) {
  return escapeLeadingAndTrailingWhitespaces(v);
};

var escapeWithoutDoubleLastEscape = function escapeWithoutDoubleLastEscape(v) {
  return escapeLeadingAndTrailingWhitespaces(v, false);
};

var escapeBackslash = function escapeBackslash(v) {
  return v.replace(/\\/g, '\\\\');
};

var matchToString = function matchToString(_ref) {
  var value = _ref.value,
      is = _ref.is;
  return isItemToString(is, '', '-') + value.map(escapeBackslash).map(quoteFilter).map(escapeWithDoubleLastEscape).join(",".concat(isItemToString(is, '', '-')));
};

var multiValueToString = function multiValueToString(values, toString) {
  return values.map(toString).join(',');
};

var startWithToString = function startWithToString(_ref2) {
  var value = _ref2.value,
      is = _ref2.is;
  return multiValueToString(value.map(escapeBackslash).map(escapeWithCaret).map(escapeWithoutDoubleLastEscape), function (token) {
    return "".concat(isItemToString(is, '', '-') + String(token), "%");
  });
};

var endsWithToString = function endsWithToString(_ref3) {
  var value = _ref3.value,
      is = _ref3.is;
  return multiValueToString(value.map(escapeBackslash).map(escapeWithCaret).map(escapeWithDoubleLastEscape), function (token) {
    return "".concat(isItemToString(is, '', '-'), "%").concat(String(token));
  });
};

var containsToString = function containsToString(_ref4) {
  var value = _ref4.value,
      is = _ref4.is;
  return multiValueToString(value.map(escapeBackslash).map(escapeWithCaret).map(escapeWithoutDoubleLastEscape), function (token) {
    return "".concat(isItemToString(is, '', '-'), "%").concat(String(token), "%");
  });
};

var otherToString = function otherToString(_ref5) {
  var value = _ref5.value,
      is = _ref5.is;
  return multiValueToString(value, function (token) {
    return "".concat(isItemToString(is, '', '-')).concat(String(token));
  });
};

var blankToString = function blankToString(_ref6) {
  var is = _ref6.is;
  return "".concat(isItemToString(is, '', '-'), "EMPTY");
};

var nullToString = function nullToString(_ref7) {
  var is = _ref7.is;
  return "".concat(isItemToString(is, '', '-'), "NULL");
};

var anyvalueToString = function anyvalueToString() {
  return '';
};

var filterToStringMap = {
  startsWith: startWithToString,
  endsWith: endsWithToString,
  contains: containsToString,
  match: matchToString,
  blank: blankToString,
  "null": nullToString,
  user_attribute: userAttributeToString,
  anyvalue: anyvalueToString,
  other: otherToString
};

var stringToExpression = function stringToExpression(item) {
  var toStringFunction = filterToStringMap[item.type];
  return (toStringFunction === null || toStringFunction === void 0 ? void 0 : toStringFunction(item)) || '';
};

var itemIsNotEmpty = function itemIsNotEmpty(_ref8) {
  var type = _ref8.type,
      value = _ref8.value;
  return !(['match', 'contains', 'startsWith', 'endsWith', 'other'].indexOf(type) > -1 && isEmpty(value));
};

export var stringFilterToString = function stringFilterToString(root) {
  return treeToString(root, stringToExpression, itemIsNotEmpty);
};
//# sourceMappingURL=string_filter_to_string.js.map