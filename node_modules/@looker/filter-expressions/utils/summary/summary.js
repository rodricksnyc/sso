import "core-js/modules/es.function.bind.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/es.function.name.js";
import { hasMatchesAdvancedNode } from '../has_matches_advanced_node';
import { hasUserAttributeNodeWithoutValue } from '../has_user_attribute_node_without_value';
import { parseFilterExpression } from '../parse_filter_expression';
import { inorderTraversal } from '../tree';
import { typeToGrammar } from '../type_to_grammar';
import i18next from 'i18next';
var t = i18next.t.bind(i18next);

var treeToSummary = function treeToSummary(root, describe, filterType, field) {
  var orItems = [];
  var andItems = [];
  inorderTraversal(root, function (node) {
    var item = node;

    if (item.type !== ',') {
      ;
      (item.is ? orItems : andItems).push(describe(item, filterType, field));
    }
  });
  var resultOr = orItems ? orItems.join(' or ') : '';
  var resultAnd = andItems ? andItems.join(' and ') : '';
  var result = resultOr;
  result += resultOr && resultAnd ? ', and ' : '';
  result += resultAnd;
  return result;
};

export var summary = function summary(props) {
  var _ref = props,
      type = _ref.type,
      _ref$expression = _ref.expression,
      expression = _ref$expression === void 0 ? '' : _ref$expression,
      userAttributes = _ref.userAttributes,
      field = _ref.field,
      required = _ref.required;

  if (required && !expression) {
    return t('Value required', {
      ns: 'summary'
    });
  }

  var _typeToGrammar = typeToGrammar(type),
      describe = _typeToGrammar.describe,
      subTypes = _typeToGrammar.subTypes;

  var ast = parseFilterExpression(type, expression, userAttributes);

  if (hasUserAttributeNodeWithoutValue(ast)) {
    var userAttribute = getUserAttributeMatchingAST(ast, userAttributes);

    if (userAttribute) {
      return "".concat(userAttribute.label, " (null)");
    }
  }

  var isMatchesAdvanced = hasMatchesAdvancedNode(subTypes)(ast);
  return isMatchesAdvanced ? expression : treeToSummary(ast, describe, type, field);
};

var getUserAttributeMatchingAST = function getUserAttributeMatchingAST(_ref2, userAttributes) {
  var attributeName = _ref2.attributeName;
  return userAttributes === null || userAttributes === void 0 ? void 0 : userAttributes.find(function (ua) {
    return ua.name === attributeName;
  });
};
//# sourceMappingURL=summary.js.map