import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { TYPE_USER_ATTRIBUTE } from '../../types';
import { findUserAttribute } from '../user_attribute';

var updateAttributeValue = function updateAttributeValue(node, userAttributes) {
  if (node && node.type === TYPE_USER_ATTRIBUTE) {
    var userAttribute = findUserAttribute(node.attributeName, userAttributes);
    return _objectSpread(_objectSpread({}, node), {}, {
      attributeValue: userAttribute && userAttribute.value
    });
  }

  return node;
};

export var userAttributeTransform = function userAttributeTransform(userAttributes) {
  return function (root) {
    if (!userAttributes || !userAttributes.length) return root;
    var workingRoot = updateAttributeValue(root, userAttributes);
    var pointer = workingRoot;

    while (pointer.right) {
      pointer.left = pointer.left && updateAttributeValue(pointer.left, userAttributes);
      pointer.right = updateAttributeValue(pointer.right, userAttributes);
      pointer = pointer.right;
    }

    return workingRoot;
  };
};
//# sourceMappingURL=userAttributeTransform.js.map