import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.index-of.js";
var _excluded = ["left", "right"];
import "core-js/modules/es.object.define-property.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import union from 'lodash/union';

var mergeNodes = function mergeNodes(left, right) {
  return _objectSpread(_objectSpread({}, left), {}, {
    type: left.type,
    value: union(left.value, right.value),
    is: left.is && right.is
  });
};

var canMergeLeftNodes = function canMergeLeftNodes(_ref, compareType, allowDifferentIsValue) {
  var left = _ref.left,
      right = _ref.right;
  return left && right && right.left && left.type === right.left.type && left.type === compareType && (left.is === right.left.is || allowDifferentIsValue);
};

var canMergeEndNodes = function canMergeEndNodes(_ref2, compareType, allowDifferentIsValue) {
  var left = _ref2.left,
      right = _ref2.right;
  return left && right && left.type === right.type && left.type === compareType && (left.is === right.is || allowDifferentIsValue);
};

var mergeNodesWithSameType = function mergeNodesWithSameType(root, compareType) {
  var allowDifferentIsValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var node = root;

  while (canMergeLeftNodes(node, compareType, allowDifferentIsValue)) {
    var _node = node,
        left = _node.left,
        right = _node.right,
        rest = _objectWithoutProperties(_node, _excluded);

    var newLeft = mergeNodes(left, right.left);
    var newRight = right.right;
    node = _objectSpread(_objectSpread({}, rest), {}, {
      left: newLeft,
      right: newRight
    });
  }

  if (canMergeEndNodes(node, compareType, allowDifferentIsValue)) {
    node = mergeNodes(node.left, node.right);
  }

  return node;
};

export var mergeMultiValueNodes = function mergeMultiValueNodes(root, type) {
  var mergeDifferentIsValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var workingRoot = mergeNodesWithSameType(root, type, mergeDifferentIsValue);
  var pointer = workingRoot;

  while (pointer.right) {
    pointer.right = mergeNodesWithSameType(pointer.right, type, mergeDifferentIsValue);
    pointer = pointer.right;
  }

  return workingRoot;
};
//# sourceMappingURL=mergeMultiValueNodes.js.map