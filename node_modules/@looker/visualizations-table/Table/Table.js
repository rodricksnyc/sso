function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.from-entries.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.number.is-integer.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.parse-int.js";
import "core-js/modules/es.object.entries.js";
import "core-js/modules/es.array.find-index.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import React, { useContext } from 'react';
import styled, { ThemeContext } from 'styled-components';
import get from 'lodash/get';
import reduce from 'lodash/reduce';
import has from 'lodash/has';
import isArray from 'lodash/isArray';
import { Table as TableElement, TableHead, TableRow, TableBody, TableHeaderCell, TableDataCell, Truncate } from '@looker/components';
import { isNumeric } from '@looker/visualizations-adapters';
import { TableMeasure } from './TableMeasure';
import numeral from 'numeral';
import { useTranslation } from 'react-i18next';

var getMinMax = function getMinMax(key, data) {
  return reduce(data, function (minMax, d) {
    var value = d[key];
    return {
      max: Math.max(minMax.max, value),
      min: Math.min(minMax.min, value)
    };
  }, {
    max: 0,
    min: Infinity
  });
};

export var Table = function Table(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      config = _ref.config,
      _ref$fields = _ref.fields,
      fields = _ref$fields === void 0 ? {
    dimensions: [],
    measures: []
  } : _ref$fields,
      _ref$totals = _ref.totals,
      totals = _ref$totals === void 0 ? {} : _ref$totals,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'auto' : _ref$width;

  var _useTranslation = useTranslation('Table'),
      t = _useTranslation.t;

  var theme = useContext(ThemeContext);

  if (!data.length) {
    return null;
  }

  var truncateText = config.truncate_text;
  var fieldLabels = Object.fromEntries([].concat(_toConsumableArray(fields.measures), _toConsumableArray(fields.dimensions)).map(function (f, i) {
    var series = isArray(config.series) ? get(config, ['series', i]) : get(config, ['series', f.name]);
    var label = (series === null || series === void 0 ? void 0 : series.label) || f.pivoted_label || f.label_short;
    return [f.name, label];
  }));
  var cellVis = reduce(get(config, 'series', {}), function (acc, _ref2, key) {
    var _fields$measures$pars;

    var cell_visualization = _ref2.cell_visualization;
    var measureName = Number.isInteger(key) ? (_fields$measures$pars = fields.measures[parseInt(key)]) === null || _fields$measures$pars === void 0 ? void 0 : _fields$measures$pars.name : key;
    var cell = cell_visualization ? _defineProperty({}, measureName, getMinMax(measureName, data)) : {};
    return _objectSpread(_objectSpread({}, acc), cell);
  }, {});
  var formattedData = data.map(function (d) {
    return Object.fromEntries(Object.entries(d).map(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
          key = _ref5[0],
          value = _ref5[1];

      var matchingMeasureIndex = fields.measures.findIndex(function (measure) {
        return measure.name === key;
      });
      var seriesConfig = isArray(config.series) ? get(config, ['series', matchingMeasureIndex]) : get(config, ['series', key]);

      var _ref6 = seriesConfig || {},
          value_format = _ref6.value_format,
          color = _ref6.color;

      var isNumericValue = typeof value === 'number' || typeof value === 'string' && isNumeric(value);
      var valueFormatted = isNumericValue && value_format ? numeral(value).format(value_format) : value;
      var cellVisEntry = cellVis[key];
      var formattedValue = cellVisEntry ? function () {
        return React.createElement(TableMeasure, {
          value: value,
          valueFormatted: valueFormatted,
          min: cellVisEntry.min,
          max: cellVisEntry.max,
          color: color
        });
      } : valueFormatted;
      return [key, formattedValue];
    }));
  });
  var resultKeys = Array.isArray(data) ? Object.keys(data[0]) : Object.keys(data);
  return React.createElement(TableElement, {
    width: width === 'auto' ? '100%' : "".concat(width, "px"),
    "data-testid": "table-chart"
  }, React.createElement(TableHead, null, React.createElement(TableRow, null, React.createElement(TableHeaderCell, null), resultKeys.map(function (key) {
    return React.createElement(StyledTableHeaderCell, {
      key: key,
      width: has(cellVis, key) ? '30%' : 'auto'
    }, fieldLabels[key]);
  }))), React.createElement(TableBody, null, Array.isArray(data) && formattedData.map(function (obj, i) {
    return React.createElement(StyledTableRow, {
      key: i,
      backgroundColor: i % 2 ? theme.colors.ui1 : theme.colors.background
    }, React.createElement(StyledTableDataCell, {
      textAlign: "right",
      color: "text1",
      width: "1px",
      pr: "small"
    }, i + 1), resultKeys.map(function (key) {
      var val = obj[key];
      var valHelper = val;

      if (typeof val === 'function') {
        valHelper = val();
      } else if (Object(val) === val) {
        valHelper = JSON.stringify(val);
      }

      return React.createElement(StyledTableDataCell, {
        key: key
      }, truncateText ? React.createElement(Truncate, null, valHelper) : valHelper);
    }));
  }), Object.keys(totals).length > 0 && React.createElement(TableRow, null, React.createElement(StyledTableDataCell, {
    textAlign: "right",
    color: "text1",
    width: "1px",
    pr: "small"
  }, t('Totals')), resultKeys.map(function (key) {
    var val = totals[key];
    return React.createElement(StyledTableDataCell, {
      key: key
    }, val);
  }))));
};
var StyledTableHeaderCell = styled(TableHeaderCell).withConfig({
  displayName: "Table__StyledTableHeaderCell",
  componentId: "sc-1kzwowz-0"
})(["&:first-child{max-width:0;min-width:0;}padding:", ";"], function (_ref7) {
  var theme = _ref7.theme;
  return theme.space.xsmall;
});
var StyledTableRow = styled(TableRow).withConfig({
  displayName: "Table__StyledTableRow",
  componentId: "sc-1kzwowz-1"
})(["background:", ";"], function (_ref8) {
  var backgroundColor = _ref8.backgroundColor;
  return backgroundColor;
});
var StyledTableDataCell = styled(TableDataCell).withConfig({
  displayName: "Table__StyledTableDataCell",
  componentId: "sc-1kzwowz-2"
})(["font-size:", ";max-width:500px;overflow-wrap:break-word;position:relative;", "{left:0;padding:", ";position:absolute;top:0;}"], function (_ref9) {
  var theme = _ref9.theme;
  return theme.fontSizes.medium;
}, Truncate, function (_ref10) {
  var theme = _ref10.theme;
  return theme.space.xsmall;
});
//# sourceMappingURL=Table.js.map