"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YearMonthForm = exports.toMonth = exports.fromMonth = exports.currentYear = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireDefault(require("react"));

var _reactI18next = require("react-i18next");

var _components = require("@looker/components");

var _CalendarNav = require("./CalendarNav");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const currentYear = new Date().getFullYear();
exports.currentYear = currentYear;
const fromMonth = new Date(currentYear - 100, 0);
exports.fromMonth = fromMonth;
const toMonth = new Date(currentYear + 10, 11);
exports.toMonth = toMonth;

const YearMonthForm = ({
  selectMonth,
  date,
  disabled,
  localeUtils,
  onChange,
  onNowClick,
  size
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('Calendar'),
        t = _useTranslation.t;

  const months = localeUtils === null || localeUtils === void 0 ? void 0 : localeUtils.getMonths();
  const years = [];

  for (let i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i++) {
    years.push(i.toString());
  }

  const monthOptions = months === null || months === void 0 ? void 0 : months.map((month, index) => {
    return {
      label: month,
      value: index.toString()
    };
  });
  const yearOptions = years.map(year => {
    return {
      label: year,
      value: year
    };
  });

  const handleMonth = month => {
    onChange && date && onChange(new Date(date.getFullYear(), parseInt(month)));
  };

  const handleYear = year => {
    onChange && date && onChange(new Date(parseInt(year), date.getMonth()));
  };

  const handleLabelClick = () => {
    onNowClick && Date && onNowClick(new Date(Date.now()));
  };

  const StationaryMonthYear = disabled ? _react.default.createElement(_components.Space, {
    my: _components.theme.space.u2,
    justifyContent: "center"
  }, _react.default.createElement(_components.Heading, {
    as: (0, _CalendarNav.headingSizeMap)(size),
    fontWeight: "semiBold",
    fontFamily: "body"
  }, date && localeUtils && localeUtils.formatMonthTitle(date))) : _react.default.createElement(_components.Space, {
    justifyContent: "center"
  }, _react.default.createElement(_components.Tooltip, {
    placement: "bottom",
    content: t('View Current Month')
  }, _react.default.createElement(_components.ButtonTransparent, {
    onClick: handleLabelClick,
    color: "key"
  }, _react.default.createElement(_components.Heading, {
    as: (0, _CalendarNav.headingSizeMap)(size),
    fontWeight: "semiBold",
    fontFamily: "body"
  }, date && localeUtils && localeUtils.formatMonthTitle(date)))));
  return selectMonth ? _react.default.createElement(_components.Space, {
    justifyContent: "center",
    gap: "xsmall",
    py: "u2"
  }, _react.default.createElement(_components.Select, {
    autoResize: true,
    onChange: handleMonth,
    value: date === null || date === void 0 ? void 0 : date.getMonth().toString(),
    options: monthOptions
  }), _react.default.createElement(_components.Select, {
    autoResize: true,
    onChange: handleYear,
    value: date === null || date === void 0 ? void 0 : date.getFullYear().toString(),
    options: yearOptions
  })) : StationaryMonthYear;
};

exports.YearMonthForm = YearMonthForm;
//# sourceMappingURL=YearMonthForm.js.map