"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = void 0;

var _enUS = _interopRequireDefault(require("date-fns/locale/en-US"));

var _react = _interopRequireDefault(require("react"));

var _reactDayPicker = _interopRequireWildcard(require("react-day-picker"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _has = _interopRequireDefault(require("lodash/has"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _designTokens = require("@looker/design-tokens");

var _locale = require("../locale");

var _calendarSize = require("./calendar-size");

var _CalendarContext = require("./CalendarContext");

var _CalendarNav = require("./CalendarNav");

var _dayPickerCss = require("./dayPickerCss");

var _formatMonthTitle = require("./formatMonthTitle");

var _YearMonthForm = require("./YearMonthForm");

const _excluded = ["localeUtils"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getLocaleProps = ({
  firstDayOfWeek,
  locale = _enUS.default
}) => {
  const localeUtils = _objectSpread(_objectSpread({}, _reactDayPicker.LocaleUtils), {}, {
    formatDay: date => (0, _locale.formatDateString)(date, locale, 'iii PP'),
    formatMonthTitle: (0, _formatMonthTitle.formatMonthTitle)(locale),
    formatWeekdayLong: date => {
      var _locale$localize;

      return (_locale$localize = locale.localize) === null || _locale$localize === void 0 ? void 0 : _locale$localize.day(date);
    },
    formatWeekdayShort: date => {
      var _locale$localize2;

      return (_locale$localize2 = locale.localize) === null || _locale$localize2 === void 0 ? void 0 : _locale$localize2.day(date, {
        width: 'short'
      });
    }
  });

  return {
    firstDayOfWeek,
    locale: locale.code,
    localeUtils
  };
};

const NoopComponent = () => null;

const InternalCalendar = ({
  className,
  selectMonth,
  disabled,
  firstDayOfWeek: propsFirstDayOfWeek,
  locale,
  onDayClick,
  onMonthChange,
  onNextClick,
  onNowClick,
  onPrevClick,
  readOnly,
  selectedDates,
  showNextButton = true,
  showPreviousButton = true,
  viewMonth
}) => {
  var _locale$options;

  const firstDayOfWeek = propsFirstDayOfWeek !== null && propsFirstDayOfWeek !== void 0 ? propsFirstDayOfWeek : locale === null || locale === void 0 ? void 0 : (_locale$options = locale.options) === null || _locale$options === void 0 ? void 0 : _locale$options.weekStartsOn;
  const renderDateRange = selectedDates && (0, _has.default)(selectedDates, 'from');
  const modifiers = renderDateRange ? selectedDates : {};

  const disableCallback = (cb = _noop.default) => {
    return date => disabled ? (0, _noop.default)() : cb(date);
  };

  const _getLocaleProps = getLocaleProps({
    firstDayOfWeek,
    locale
  }),
        localeUtils = _getLocaleProps.localeUtils,
        localeProps = _objectWithoutProperties(_getLocaleProps, _excluded);

  const form = _react.default.createElement(_YearMonthForm.YearMonthForm, {
    selectMonth: selectMonth,
    date: viewMonth,
    disabled: disabled,
    localeUtils: localeUtils,
    onChange: onMonthChange,
    onNowClick: onNowClick,
    size: "medium"
  });

  const nav = _react.default.createElement(_CalendarNav.CalendarNav, null, form);

  return _react.default.createElement(_CalendarContext.CalendarContext.Provider, {
    value: {
      onNextClick: disableCallback(onNextClick),
      onNowClick: disableCallback(onNowClick),
      onPrevClick: disableCallback(onPrevClick),
      showNextButton: (!disabled || !readOnly) && showNextButton,
      showPreviousButton: (!disabled || !readOnly) && showPreviousButton,
      size: 'medium'
    }
  }, _react.default.createElement(_reactDayPicker.default, _extends({
    localeUtils: localeUtils
  }, localeProps, {
    className: `${renderDateRange && 'render-date-range'} ${className}`,
    month: viewMonth,
    fromMonth: _YearMonthForm.fromMonth,
    toMonth: _YearMonthForm.toMonth,
    onDayClick: disableCallback(onDayClick),
    navbarElement: !disabled ? nav : form,
    captionElement: NoopComponent,
    selectedDays: selectedDates,
    showOutsideDays: true,
    modifiers: modifiers,
    onMonthChange: onMonthChange
  })));
};

const Calendar = (0, _styledComponents.default)(InternalCalendar).attrs(() => ({
  size: 'medium'
})).withConfig({
  displayName: "Calendar",
  componentId: "sc-1d4vmg5-0"
})(["", " ", " ", " .DayPicker-NavBar{display:none;}.DayPicker-wrapper{border:2px solid transparent;&:focus{outline:none;", "}}.DayPicker-Month{margin:0;padding:0;}.DayPicker-Body{display:grid;grid-gap:1px;}.DayPicker-Weekdays{display:block;margin-top:0;}.DayPicker-Week,.DayPicker-WeekdaysRow{display:grid;grid-template-columns:repeat(7,auto);}.DayPicker-Day{", " align-items:center;border:1px solid transparent;color:", ";cursor:", ";display:grid;justify-items:center;line-height:1;padding:0;transition:background-color 110ms linear;&.DayPicker-Day--outside{color:", ";}&--today{color:", ";}&--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside){background-color:", ";position:static;&:hover{background-color:", ";}}&:focus{border-color:", ";border-width:2px;outline:none;}}&.render-date-range{.DayPicker-Day--selected{border-radius:0;&:not(.DayPicker-Day--from):first-child{border-bottom-left-radius:", ";border-top-left-radius:", ";}&:not(.DayPicker-Day--to):last-child{border-bottom-right-radius:", ";border-top-right-radius:", ";}&.DayPicker-Day--outside,&:not(.DayPicker-Day--to):not(.DayPicker-Day--from){background-color:", ";", "}&:not(.DayPicker-Day--to):not(.DayPicker-Day--from):not(.DayPicker-Day--outside){color:", ";}}.DayPicker-Day--from{border-bottom-left-radius:50%;border-top-left-radius:50%;}.DayPicker-Day--to{border-bottom-right-radius:50%;border-top-right-radius:50%;}}&:not(.DayPicker--interactionDisabled){.DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover{&:hover{background-color:", ";color:", ";}}}"], _designTokens.reset, _dayPickerCss.dayPickerCss, _calendarSize.calendarSpacing, ({
  disabled
}) => !disabled && (0, _styledComponents.css)(["border-color:", ";"], ({
  theme
}) => theme.colors.key), _calendarSize.calendarSize, ({
  theme: {
    colors
  },
  disabled
}) => disabled ? colors.text2 : colors.text4, ({
  disabled
}) => disabled ? 'default' : 'pointer', ({
  theme: {
    colors
  }
}) => colors.text1, ({
  theme: {
    colors
  },
  disabled
}) => !disabled && colors.key, ({
  theme: {
    colors
  },
  disabled
}) => disabled ? colors.neutral : colors.key, ({
  theme: {
    colors
  },
  disabled,
  readOnly
}) => disabled || readOnly ? colors.neutralInteractive : colors.keyInteractive, ({
  theme: {
    colors
  },
  disabled,
  readOnly
}) => disabled || readOnly ? 'transparent' : colors.keyBorder, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    radii
  }
}) => radii.medium, ({
  theme: {
    colors
  },
  disabled
}) => disabled ? colors.neutralAccent : colors.keyAccent, _designTokens.calendarMixColor, ({
  theme: {
    colors
  }
}) => colors.neutralInteractive, ({
  theme: {
    colors
  },
  disabled
}) => disabled ? 'transparent' : colors.keyAccent, ({
  theme: {
    colors
  },
  disabled
}) => !disabled && colors.key);
exports.Calendar = Calendar;
//# sourceMappingURL=Calendar.js.map