{"version":3,"sources":["../../../src/InputTimeSelect/InputTimeSelect.tsx"],"names":["cycleHourDisplay","format","hour","formatLabel","minute","formattedHour","formattedMinute","period","generateMinuteIntervals","interval","minutes","Array","_","index","generateTimes","hours","result","hourWithMinutes","label","value","matchClosestMinute","timeCode","minuteOptions","parseBase10Int","now","Date","currentMinute","split","getMinutes","currentHour","getHours","optionBefore","optionAfter","roundedMinute","createOptionFromStringValue","convert12to24hr","createOptionFromLabel","toLowerCase","includes","numericTime","replace","map","hr24","undefined","matchStringValueToOption","options","option","matchStringLabelToOption","o","setScrollIntoView","selectedOption","scrollIntoView","arrowKeys","InputTimeSelectLayout","ref","className","onChange","defaultValue","validationType","disabled","autoFocus","id","props","t","valueProp","console","error","timeOptions","setSelectedOption","inputTextValue","setInputTextValue","throttledHandleChange","newSelectedOption","newValue","trailing","handleTextInputChange","e","target","handleTextInputBlur","isNavigating","setIsNavigating","handleKeyDown","key","length","optionToFocus","timeOptionsFocused","ariaProps","displayName","InputTimeSelect"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport { useTranslation } from 'react-i18next'\nimport type { KeyboardEvent, Ref, SyntheticEvent } from 'react'\nimport React, { useMemo, forwardRef, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport reduce from 'lodash/reduce'\nimport map from 'lodash/map'\nimport isFunction from 'lodash/isFunction'\nimport find from 'lodash/find'\nimport trim from 'lodash/trim'\nimport last from 'lodash/last'\nimport head from 'lodash/head'\nimport sortedIndex from 'lodash/sortedIndex'\nimport throttle from 'lodash/throttle'\nimport type {\n  BorderProps,\n  SpaceProps,\n  CompatibleHTMLProps,\n} from '@looker/design-tokens'\nimport type {\n  ComboboxOptionObject,\n  MaybeComboboxOptionObject,\n  ValidationType,\n} from '@looker/components'\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxList,\n  ComboboxOption,\n  pickAriaAndValidationProps,\n  useReadOnlyWarn,\n} from '@looker/components'\nimport type { TimeFormats } from '../InputTime/utils'\nimport {\n  formatTimeString,\n  parseBase10Int,\n  isValidTime,\n} from '../InputTime/utils'\n\n/*\n * We've limited allowed intervals to a few approved options rather than\n * accepting any number. This is to protect against uninteded use where an\n * engineer might specify 1-minute intervals and generate an unusable\n * select box with 1400 options. We also wouldn't want to support bizarre\n * instances of a random numbers like 37 or 152 minute intervals.\n */\n\ntype intervals = 5 | 10 | 15 | 20 | 30 | 60\n\nexport interface InputTimeSelectProps\n  extends SpaceProps,\n    BorderProps,\n    Omit<CompatibleHTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  format?: TimeFormats\n  interval?: intervals\n  defaultValue?: string\n  value?: string\n  onChange?: (val?: string) => void\n  validationType?: ValidationType\n  onValidationFail?: (value: string) => void\n}\n\n// if format is `12h`, repeat hours 1-12 twice\nconst cycleHourDisplay = (format: TimeFormats, hour: number) => {\n  if (format === '12h') {\n    if (hour === 0) {\n      return 12 // 12:00 am\n    } else if (hour > 12) {\n      return hour - 12 // 1:00 pm - 11:00 pm\n    }\n  }\n  return hour\n}\n\n// human readable value returned based on 12h or 24h formats\n// e.g. instead of 13:45 display \"01:45 pm\"\nconst formatLabel = (format: TimeFormats, hour: number, minute: number) => {\n  const formattedHour = formatTimeString(cycleHourDisplay(format, hour))\n  const formattedMinute = formatTimeString(minute)\n  const period = format === '12h' && (hour < 12 ? 'am' : 'pm')\n\n  return trim(`${formattedHour}:${formattedMinute} ${period || ''}`)\n}\n\n// generates all values from 0-60 that match provided interval setting\n// e.g. if interval is 15, return [0, 15, 30, 45]\nconst generateMinuteIntervals = (interval: intervals) => {\n  const minutes = new Array(60 / interval)\n  return map(minutes, (_, index) => formatTimeString(index * interval))\n}\n\n// generates all time options based on format and interval settings\nconst generateTimes = (format: TimeFormats, interval: intervals) => {\n  const hours = new Array(24)\n  const minutes = generateMinuteIntervals(interval)\n\n  return reduce(\n    hours,\n    (result: ComboboxOptionObject[], _, hour: number) => {\n      const formatLabel = format === '12h' && (hour < 12 ? 'am' : 'pm')\n      const formattedHour = formatTimeString(cycleHourDisplay(format, hour))\n\n      const hourWithMinutes: ComboboxOptionObject[] = map(\n        minutes,\n        (minute: string) => {\n          const label = trim(`${formattedHour}:${minute} ${formatLabel || ''}`)\n          const value = `${formatTimeString(hour)}:${minute}` // value always in 24hr time\n          return {\n            label,\n            value,\n          }\n        }\n      )\n      return [...result, ...hourWithMinutes]\n    },\n    []\n  )\n}\n\n// takes a non-normalized time value (e.g. 10:13) and rounds to the nearest valid interval (e.g. 10:15)\nconst matchClosestMinute = (interval: intervals, timeCode?: string) => {\n  const minuteOptions = map(generateMinuteIntervals(interval), parseBase10Int)\n  const now = new Date(Date.now()) // Include Date.now for easy test mocks\n  const currentMinute = timeCode\n    ? parseBase10Int(timeCode.split(':')[1])\n    : now.getMinutes()\n  const currentHour = timeCode\n    ? parseBase10Int(timeCode.split(':')[0])\n    : now.getHours()\n\n  // round current minute to closest option\n  const index = sortedIndex(minuteOptions, currentMinute)\n  const optionBefore =\n    minuteOptions[index - 1] || (head(minuteOptions) as number)\n  const optionAfter = minuteOptions[index] || (last(minuteOptions) as number)\n  const roundedMinute =\n    currentMinute - optionBefore < optionAfter - currentMinute\n      ? optionBefore\n      : optionAfter\n\n  // format and return time string\n  const formattedHour = formatTimeString(currentHour)\n  const formattedMinute = formatTimeString(roundedMinute)\n\n  return `${formattedHour}:${formattedMinute}`\n}\n\n// take in a string value ('03:45') and return a formatted option object\n// e.g. {label:'03:45 am', value: '03:45'}\nconst createOptionFromStringValue = (format: TimeFormats, value: string) => {\n  const [hour, minute] = map(value.split(':'), parseBase10Int)\n\n  return {\n    label: formatLabel(format, hour, minute),\n    value,\n  }\n}\n\n// convert times like \"2:00 pm\" or \"12:15 am\" to 24 hour equivalents\nconst convert12to24hr = (hour: number, period: 'am' | 'pm') => {\n  if (hour + period === '12am') {\n    return 0\n  } else if (period === 'pm' && hour < 12) {\n    return hour + 12\n  } else {\n    return hour\n  }\n}\n\n// take in a shorthand string label ('2pm') and return a formatted object\n// e.g. {label: '02:00 pm', value: '14:00'}\nconst createOptionFromLabel = (format: TimeFormats, label: string) => {\n  const period = label.toLowerCase().includes('p') ? 'pm' : 'am'\n  const numericTime = label.replace(/[apm]/gi, '')\n  const [hour = 0, minute = 0] = numericTime.split(':').map(parseBase10Int)\n  const hr24 = convert12to24hr(hour, period)\n  const value = `${formatTimeString(hr24)}:${formatTimeString(minute)}`\n\n  if (isValidTime(value)) {\n    return { label: formatLabel(format, hr24, minute), value }\n  }\n\n  return undefined\n}\n\n// pass in a string value ('03:45') and return full option object\n// e.g. {label:'03:45 am', value: '03:45'}\nconst matchStringValueToOption = (\n  options: ComboboxOptionObject[],\n  format: TimeFormats,\n  value?: string\n) => {\n  if (value && isValidTime(value)) {\n    const option = find(options, { value: value })\n    return option || createOptionFromStringValue(format, value)\n  }\n  return undefined\n}\n\n// take in a string label ('1:45 pm') and returns matching object\n// e.g. {label: '01:45 pm', value: '13:45'}\n// used in controlled components where value might not match the list of options\nconst matchStringLabelToOption = (\n  options: ComboboxOptionObject[],\n  label?: string\n) => {\n  if (label) {\n    return find(options, o => {\n      return o.label ? o.label.includes(label) : false\n    })\n  }\n  return undefined\n}\n\n// choose one option to scroll into visible menu area\n// adds {scrollIntoView: true} metadata to matching option\nconst setScrollIntoView = (\n  options: ComboboxOptionObject[],\n  interval: intervals,\n  selectedOption?: ComboboxOptionObject\n) => {\n  // CASE 1: scroll currently selected option into view\n  if (selectedOption) {\n    return map(options, option =>\n      matchClosestMinute(interval, selectedOption.value) === option.value\n        ? { ...option, scrollIntoView: true }\n        : option\n    )\n  }\n\n  // CASE 2: scroll current time into view\n  const now = matchClosestMinute(interval)\n  return map(options, option =>\n    option.value === now ? { ...option, scrollIntoView: true } : option\n  )\n}\n\nconst arrowKeys = ['ArrowDown', 'ArrowUp', 'ArrowRight', 'ArrowLeft']\n\nconst InputTimeSelectLayout = forwardRef(\n  (\n    {\n      className,\n      interval = 15,\n      format = '12h',\n      onChange,\n      value = '',\n      defaultValue,\n      validationType,\n      disabled,\n      autoFocus,\n      id,\n      ...props\n    }: InputTimeSelectProps,\n    ref: Ref<HTMLDivElement>\n  ) => {\n    const { t } = useTranslation('InputTimeSelect')\n    useReadOnlyWarn('InputTimeSelect', value, onChange)\n    const valueProp = value || defaultValue\n    if (!isValidTime(valueProp)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Invalid time (\"${valueProp}\") passed to <InputTimeSelect />. Value should be formatted as a 24-hour string (e.g. value=\"02:00\" or value=\"23:15\").`\n      )\n    }\n\n    const timeOptions = generateTimes(format, interval)\n\n    const [\n      selectedOption,\n      setSelectedOption,\n    ] = useState<MaybeComboboxOptionObject>()\n\n    const [inputTextValue, setInputTextValue] = useState('')\n\n    useEffect(() => {\n      // controlled component behavior: update state when value prop changes\n      setSelectedOption(\n        matchStringValueToOption(timeOptions, format, value || defaultValue)\n      )\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [value])\n\n    const throttledHandleChange = useMemo(\n      () =>\n        throttle(\n          (newSelectedOption: MaybeComboboxOptionObject) => {\n            setSelectedOption(newSelectedOption)\n            const newValue = newSelectedOption\n              ? newSelectedOption.value\n              : undefined\n            if (isFunction(onChange) && isValidTime(newValue)) {\n              onChange(newValue)\n            }\n          },\n          50,\n          { trailing: false }\n        ),\n      [onChange]\n    )\n\n    const handleTextInputChange = (e: SyntheticEvent) => {\n      setInputTextValue((e.target as HTMLInputElement).value)\n    }\n\n    const handleTextInputBlur = () => {\n      setInputTextValue('')\n    }\n\n    const [isNavigating, setIsNavigating] = useState(false)\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n      const { key } = e\n      if (arrowKeys.includes(key)) {\n        setIsNavigating(true)\n      } else if (key === 'Enter' || key === 'Tab') {\n        if (inputTextValue.length) {\n          // allow entering shortcuts like `2pm` to select `02:00 pm` on enter\n          const option = createOptionFromLabel(format, inputTextValue)\n          // don't fire change event here if user is selecting an option from the dropdown list\n          !isNavigating && throttledHandleChange(option)\n        }\n      } else {\n        setIsNavigating(false)\n      }\n    }\n\n    // scroll dropdown to relevant value\n    // inputTextValue: user input typeahead match\n    // selectedOption.value: current component state\n    // value: prop value passed in externally\n    const optionToFocus =\n      matchStringLabelToOption(timeOptions, inputTextValue) || selectedOption\n\n    const timeOptionsFocused = setScrollIntoView(\n      timeOptions,\n      interval,\n      optionToFocus\n    )\n\n    const ariaProps = pickAriaAndValidationProps(props)\n\n    return (\n      <Combobox\n        className={className}\n        ref={ref}\n        onChange={throttledHandleChange}\n        value={selectedOption}\n      >\n        <ComboboxInput\n          placeholder={t('Select time')}\n          onChange={handleTextInputChange}\n          onBlur={handleTextInputBlur}\n          onKeyDown={handleKeyDown}\n          autoComplete={false}\n          validationType={validationType}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          id={id}\n          {...ariaProps}\n        />\n        <ComboboxList persistSelection>\n          {timeOptionsFocused.map((option, index) => (\n            <ComboboxOption {...option} key={index} />\n          ))}\n        </ComboboxList>\n      </Combobox>\n    )\n  }\n)\n\nInputTimeSelectLayout.displayName = 'InputTimeSelectLayout'\n\nexport const InputTimeSelect = styled(InputTimeSelectLayout)`\n  width: 100%;\n`\n"],"file":"InputTimeSelect.js"}