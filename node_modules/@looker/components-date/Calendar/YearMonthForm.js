import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.parse-int.js";
import "core-js/modules/es.date.now.js";
import React from 'react';
import { useTranslation } from 'react-i18next';
import { ButtonTransparent, Heading, Select, Space, theme, Tooltip } from '@looker/components';
import { headingSizeMap } from './CalendarNav';
export var currentYear = new Date().getFullYear();
export var fromMonth = new Date(currentYear - 100, 0);
export var toMonth = new Date(currentYear + 10, 11);
export var YearMonthForm = function YearMonthForm(_ref) {
  var selectMonth = _ref.selectMonth,
      date = _ref.date,
      disabled = _ref.disabled,
      localeUtils = _ref.localeUtils,
      onChange = _ref.onChange,
      onNowClick = _ref.onNowClick,
      size = _ref.size;

  var _useTranslation = useTranslation('Calendar'),
      t = _useTranslation.t;

  var months = localeUtils === null || localeUtils === void 0 ? void 0 : localeUtils.getMonths();
  var years = [];

  for (var i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i++) {
    years.push(i.toString());
  }

  var monthOptions = months === null || months === void 0 ? void 0 : months.map(function (month, index) {
    return {
      label: month,
      value: index.toString()
    };
  });
  var yearOptions = years.map(function (year) {
    return {
      label: year,
      value: year
    };
  });

  var handleMonth = function handleMonth(month) {
    onChange && date && onChange(new Date(date.getFullYear(), parseInt(month)));
  };

  var handleYear = function handleYear(year) {
    onChange && date && onChange(new Date(parseInt(year), date.getMonth()));
  };

  var handleLabelClick = function handleLabelClick() {
    onNowClick && Date && onNowClick(new Date(Date.now()));
  };

  var StationaryMonthYear = disabled ? React.createElement(Space, {
    my: theme.space.u2,
    justifyContent: "center"
  }, React.createElement(Heading, {
    as: headingSizeMap(size),
    fontWeight: "semiBold",
    fontFamily: "body"
  }, date && localeUtils && localeUtils.formatMonthTitle(date))) : React.createElement(Space, {
    justifyContent: "center"
  }, React.createElement(Tooltip, {
    placement: "bottom",
    content: t('View Current Month')
  }, React.createElement(ButtonTransparent, {
    onClick: handleLabelClick,
    color: "key"
  }, React.createElement(Heading, {
    as: headingSizeMap(size),
    fontWeight: "semiBold",
    fontFamily: "body"
  }, date && localeUtils && localeUtils.formatMonthTitle(date)))));
  return selectMonth ? React.createElement(Space, {
    justifyContent: "center",
    gap: "xsmall",
    py: "u2"
  }, React.createElement(Select, {
    autoResize: true,
    onChange: handleMonth,
    value: date === null || date === void 0 ? void 0 : date.getMonth().toString(),
    options: monthOptions
  }), React.createElement(Select, {
    autoResize: true,
    onChange: handleYear,
    value: date === null || date === void 0 ? void 0 : date.getFullYear().toString(),
    options: yearOptions
  })) : StationaryMonthYear;
};
//# sourceMappingURL=YearMonthForm.js.map