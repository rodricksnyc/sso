function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
import React, { forwardRef, useEffect, useCallback, useMemo, useState } from 'react';
import styled from 'styled-components';
import isFunction from 'lodash/isFunction';
import isEmpty from 'lodash/isEmpty';
import { isBefore, isSameDay } from 'date-fns';
import { CalendarToday } from '@styled-icons/material/CalendarToday';
import { useTranslation } from '../../../utils';
import { Calendar } from '../../../Calendar/Calendar';
import { formatDateString, parseDateFromString } from '../../../Calendar/utils';
import { VisuallyHidden } from '../../../VisuallyHidden';
import { usePopover } from '../../../Popover';
import { InlineInputTextBase } from '../InlineInputText';
import { InputTextContent } from '../InputText/InputTextContent';
import { ErrorIcon } from '../ErrorIcon';
import { IconButton } from '../../../Button/IconButton';
import { Space } from '../../../Layout/Space';
import { useToggle, useID } from '../../../utils/';
import { inputCSS, inputTextDisabled, inputTextFocus, inputTextHover, inputTextValidation } from '../InputText';
import { inputHeight } from '../height';

var getTextForDate = function getTextForDate(range, dateStringFormat, locale) {
  return function (endpoint) {
    var date = endpoint ? range === null || range === void 0 ? void 0 : range[endpoint] : undefined;
    return formatDateString(date, dateStringFormat, locale);
  };
};

var getViewMonthFromValue = function getViewMonthFromValue(value) {
  return value.from || value.to || new Date();
};

export var InputDateRange = styled(forwardRef(function (props, ref) {
  var ariaLabelledby = props['aria-labelledby'],
      dateStringFormat = props.dateStringFormat,
      disabled = props.disabled,
      locale = props.locale,
      id = props.id,
      onChange = props.onChange,
      onValidationFail = props.onValidationFail,
      readOnly = props.readOnly,
      value = props.value,
      validationType = props.validationType;

  var _useTranslation = useTranslation('InputDateRange'),
      t = _useTranslation.t;

  var _useState = useState(getViewMonthFromValue(value)),
      _useState2 = _slicedToArray(_useState, 2),
      viewMonth = _useState2[0],
      setViewMonth = _useState2[1];

  var startDateLabelledby = "startDate-labelledby-".concat(id);
  var endDateLabelledby = "endDate-labelledby-".concat(id);
  var dateTexts = useMemo(function () {
    var getText = getTextForDate(value, dateStringFormat, locale);
    return {
      from: getText('from'),
      to: getText('to')
    };
  }, [value, dateStringFormat, locale]);

  var _useState3 = useState(dateTexts.from),
      _useState4 = _slicedToArray(_useState3, 2),
      fromTextInputValue = _useState4[0],
      setFromTextInputValue = _useState4[1];

  useEffect(function () {
    setFromTextInputValue(dateTexts.from);
  }, [dateTexts.from]);
  var fromID = useID(id && "from-".concat(id));

  var _useState5 = useState(dateTexts.to),
      _useState6 = _slicedToArray(_useState5, 2),
      toTextInputValue = _useState6[0],
      setToTextInputValue = _useState6[1];

  useEffect(function () {
    setToTextInputValue(dateTexts.to);
  }, [dateTexts.to]);
  var toID = useID(id && "to-".concat(id));
  var getEndpoint = useCallback(function (_ref) {
    var id = _ref.id;
    return id === fromID ? 'from' : 'to';
  }, [fromID]);
  var updateRangeFromInput = useCallback(function (currentTarget) {
    var inputValue = currentTarget.value;
    var endpoint = getEndpoint(currentTarget);
    var validationMessage = inputValue;
    var valueEndpoint = value[endpoint];

    if (inputValue === '') {
      validationMessage = '';

      if (valueEndpoint) {
        var newRange = _objectSpread({}, value);

        delete newRange[endpoint];
        onChange(newRange);
      }
    } else {
      var parsedValue = parseDateFromString(inputValue, locale, dateStringFormat);

      if (parsedValue) {
        var _newRange = _objectSpread(_objectSpread({}, value), {}, _defineProperty({}, endpoint, parsedValue));

        validationMessage = _newRange.from && _newRange.to && !isBefore(_newRange.from, _newRange.to) ? 'Invalid range' : '';

        if (!valueEndpoint || !isSameDay(valueEndpoint, parsedValue)) {
          setViewMonth(parsedValue);
          onChange(_newRange);
        }
      }
    }

    if (validationMessage && isFunction(onValidationFail)) {
      onValidationFail(validationMessage);
    }
  }, [dateStringFormat, getEndpoint, locale, onChange, onValidationFail, value]);
  var handleBlur = useCallback(function (e) {
    updateRangeFromInput(e.currentTarget);
  }, [updateRangeFromInput]);
  var handleKeyDown = useCallback(function (e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      updateRangeFromInput(e.currentTarget);
    }
  }, [updateRangeFromInput]);

  var handleInputChange = function handleInputChange(e) {
    var currentTarget = e.currentTarget;
    var value = currentTarget.value;
    var endpoint = getEndpoint(currentTarget);

    if (endpoint === 'from') {
      setFromTextInputValue(value);
    } else {
      setToTextInputValue(value);
    }
  };

  var _useToggle = useToggle(),
      isOpen = _useToggle.value,
      setOpen = _useToggle.change,
      toggle = _useToggle.toggle;

  var handleIconClick = useCallback(function () {
    setViewMonth(getViewMonthFromValue(value));
    toggle();
  }, [toggle, value]);

  var _usePopover = usePopover({
    content: React.createElement("div", null, React.createElement(VisuallyHidden, {
      "aria-live": "assertive"
    }, viewMonth ? formatDateString(viewMonth, 'MMMM-yyyy', locale) : ''), React.createElement(Calendar, {
      disabled: disabled,
      locale: locale,
      isRange: true,
      onSelectRange: onChange,
      selectedRange: value,
      viewMonth: viewMonth,
      onMonthChange: setViewMonth
    })),
    focusTrap: false,
    isOpen: isOpen,
    placement: 'bottom-start',
    ref: ref,
    setOpen: setOpen,
    triggerToggle: false
  }),
      popover = _usePopover.popover,
      popoverRef = _usePopover.ref;

  var commonInputProps = {
    disabled: disabled,
    fontSize: 'small',
    onBlur: handleBlur,
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    readOnly: readOnly
  };
  return React.createElement(InputTextGroupWrapper, {
    ref: popoverRef,
    disabled: disabled,
    validationType: validationType
  }, React.createElement(InlineInputTextBase, _extends({
    placeholder: t('Start date'),
    "data-testid": "date-from-text-input",
    id: fromID,
    value: fromTextInputValue,
    "aria-labelledby": "".concat(ariaLabelledby, " ").concat(startDateLabelledby)
  }, commonInputProps)), React.createElement(HyphenWrapper, {
    hasInputValues: !isEmpty(value),
    "aria-hidden": "true"
  }, "\u2013"), React.createElement(VisuallyHidden, {
    id: endDateLabelledby
  }, 'End date'), React.createElement(InlineInputTextBase, _extends({
    placeholder: t('End date'),
    "data-testid": "date-to-text-input",
    id: toID,
    value: toTextInputValue,
    "aria-labelledby": "".concat(ariaLabelledby, " ").concat(endDateLabelledby)
  }, commonInputProps)), React.createElement(Space, {
    gap: "xxsmall",
    justify: "end",
    pr: "u2"
  }, React.createElement(IconButton, {
    size: "xsmall",
    label: 'Open calendar',
    icon: React.createElement(CalendarToday, null),
    onClick: handleIconClick,
    disabled: readOnly || disabled
  }), validationType === 'error' && React.createElement(InputTextContent, {
    pl: "u1"
  }, React.createElement(ErrorIcon, null))), popover);
})).withConfig({
  displayName: "InputDateRange",
  componentId: "sc-1mk7l5x-0"
})([""]);
var HyphenWrapper = styled.span.withConfig({
  displayName: "InputDateRange__HyphenWrapper",
  componentId: "sc-1mk7l5x-1"
})(["align-items:center;color:", ";display:flex;.label-down &{display:none;}"], function (_ref2) {
  var theme = _ref2.theme,
      hasInputValues = _ref2.hasInputValues;
  return hasInputValues ? theme.colors.text3 : theme.colors.text1;
});
var InputTextGroupWrapper = styled.div.withConfig({
  displayName: "InputDateRange__InputTextGroupWrapper",
  componentId: "sc-1mk7l5x-2"
})(["", " align-items:stretch;display:flex;font-family:", ";height:", ";justify-content:space-evenly;padding:", ";width:100%;&:hover{", "}&:focus-within{", "}", " ", " input{font-family:inherit;}", "{flex-shrink:0;margin:", " 0;&:focus-within{background:", ";}input,span{padding:0 ", ";}}"], inputCSS, function (_ref3) {
  var theme = _ref3.theme;
  return theme.fonts.body;
}, inputHeight, function (_ref4) {
  var space = _ref4.theme.space;
  return "".concat(space.u05, " ").concat(space.u1);
}, inputTextHover, inputTextFocus, inputTextValidation, function (_ref5) {
  var disabled = _ref5.disabled;
  return disabled && inputTextDisabled;
}, InlineInputTextBase, function (_ref6) {
  var theme = _ref6.theme;
  return theme.space.u05;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.keyAccent;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.space.u2;
});
//# sourceMappingURL=InputDateRange.js.map