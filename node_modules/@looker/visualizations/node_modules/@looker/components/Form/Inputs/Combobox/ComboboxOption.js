import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "className", "isSelected", "label", "style", "value"],
    _excluded2 = ["callbacks"],
    _excluded3 = ["children", "indicator", "highlightText", "scrollIntoView"],
    _excluded4 = ["highlightText"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import { color, flexbox, layout, reset, space, typography, omitStyledProps } from '@looker/design-tokens';
import React, { forwardRef, useContext } from 'react';
import styled, { css } from 'styled-components';
import omit from 'lodash/omit';
import { ReplaceText, Span } from '../../../Text';
import { useForkedRef } from '../../../utils';
import { rippleHandlerKeys, rippleStyle, useBoundedRipple, useRippleHandlers } from '../../../Ripple';
import { makeHash } from './utils/makeHash';
import { OptionContext, ComboboxContext, ComboboxMultiContext } from './ComboboxContext';
import { ComboboxOptionIndicator } from './ComboboxOptionIndicator';
import { getComboboxText } from './utils/getComboboxText';
import { useOptionEvents } from './utils/useOptionEvents';
import { useOptionStatus } from './utils/useOptionStatus';
import { useAddOptionToContext } from './utils/useAddOptionToContext';
import { useOptionScroll } from './utils/useOptionScroll';
export var ComboboxOptionWrapper = styled(forwardRef(function (props, forwardedRef) {
  var children = props.children,
      className = props.className,
      isSelected = props.isSelected,
      label = props.label,
      style = props.style,
      value = props.value,
      rest = _objectWithoutProperties(props, _excluded);

  var _useBoundedRipple = useBoundedRipple({
    className: className,
    color: isSelected ? 'key' : 'neutral',
    ref: forwardedRef,
    style: style
  }),
      callbacks = _useBoundedRipple.callbacks,
      rippleProps = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(_objectSpread({}, rest), rippleHandlerKeys)), rest.disabled);
  return React.createElement(OptionContext.Provider, {
    value: {
      label: label,
      value: value
    }
  }, React.createElement("li", _extends({}, omit(omitStyledProps(rest)), {
    id: String(makeHash(value)),
    role: "option"
  }, rippleProps, rippleHandlers, {
    tabIndex: -1
  }), children));
})).withConfig({
  displayName: "ComboboxOption__ComboboxOptionWrapper",
  componentId: "sc-w994y4-0"
})(["", " background-color:", ";&[aria-selected='true']{background-color:", ";}"], rippleStyle, function (_ref) {
  var isSelected = _ref.isSelected,
      theme = _ref.theme;
  return isSelected && theme.colors.keySubtle;
}, function (_ref2) {
  var isSelected = _ref2.isSelected,
      theme = _ref2.theme;
  return isSelected ? theme.colors.keyAccent : theme.colors.ui1;
});
var ComboboxOptionInternal = forwardRef(function (_ref3, forwardedRef) {
  var children = _ref3.children,
      indicator = _ref3.indicator,
      _ref3$highlightText = _ref3.highlightText,
      highlightText = _ref3$highlightText === void 0 ? true : _ref3$highlightText,
      scrollIntoView = _ref3.scrollIntoView,
      props = _objectWithoutProperties(_ref3, _excluded3);

  var label = props.label,
      value = props.value;
  useAddOptionToContext(ComboboxContext, value, label, scrollIntoView);
  var optionEvents = useOptionEvents(props, ComboboxContext);

  var _useOptionStatus = useOptionStatus(ComboboxContext, value),
      isActive = _useOptionStatus.isActive,
      isSelected = _useOptionStatus.isSelected;

  var scrollRef = useOptionScroll(ComboboxContext, value, label, scrollIntoView, isActive);
  var ref = useForkedRef(scrollRef, forwardedRef);
  return React.createElement(ComboboxOptionWrapper, _extends({}, props, optionEvents, {
    ref: ref,
    "aria-selected": isActive,
    isSelected: isSelected
  }), React.createElement(ComboboxOptionIndicator, {
    indicator: indicator,
    isActive: isActive,
    isSelected: isSelected
  }), children || React.createElement(ComboboxOptionText, {
    highlightText: highlightText
  }));
});
ComboboxOptionInternal.displayName = 'ComboboxOptionInternal';
export var comboboxOptionStyle = css(["", " ", " ", " ", " ", " ", " align-items:stretch;cursor:default;outline:none;"], reset, color, flexbox, layout, space, typography);
export var ComboboxOption = styled(ComboboxOptionInternal).attrs(function (_ref4) {
  var _ref4$color = _ref4.color,
      color = _ref4$color === void 0 ? 'text4' : _ref4$color,
      _ref4$display = _ref4.display,
      display = _ref4$display === void 0 ? 'flex' : _ref4$display,
      _ref4$fontSize = _ref4.fontSize,
      fontSize = _ref4$fontSize === void 0 ? 'small' : _ref4$fontSize,
      _ref4$lineHeight = _ref4.lineHeight,
      lineHeight = _ref4$lineHeight === void 0 ? 'small' : _ref4$lineHeight,
      _ref4$px = _ref4.px,
      px = _ref4$px === void 0 ? 'xsmall' : _ref4$px,
      _ref4$py = _ref4.py,
      py = _ref4$py === void 0 ? 'xxsmall' : _ref4$py;
  return {
    color: color,
    display: display,
    fontSize: fontSize,
    lineHeight: lineHeight,
    px: px,
    py: py
  };
}).withConfig({
  displayName: "ComboboxOption",
  componentId: "sc-w994y4-1"
})(["", ""], comboboxOptionStyle);
export function ComboboxOptionTextInternal(_ref5) {
  var _ref5$highlightText = _ref5.highlightText,
      highlightText = _ref5$highlightText === void 0 ? true : _ref5$highlightText,
      props = _objectWithoutProperties(_ref5, _excluded4);

  var context = useContext(ComboboxContext);
  var contextMulti = useContext(ComboboxMultiContext);
  var contextToUse = context.transition ? context : contextMulti;
  var data = contextToUse.data;
  var inputValue = data.inputValue;
  var contextOption = data.option;
  var option = useContext(OptionContext);
  var text = getComboboxText(option);

  if (!highlightText || !inputValue || inputValue === '' || inputValue === getComboboxText(contextOption)) {
    return React.createElement("span", props, text);
  }

  return React.createElement("span", props, React.createElement(ReplaceText, {
    match: inputValue,
    replace: function replace(str, index) {
      return React.createElement(Span, {
        fontWeight: "semiBold",
        fontSize: "small",
        textDecoration: "underline",
        key: index
      }, str);
    }
  }, text));
}
export var ComboboxOptionText = styled(ComboboxOptionTextInternal).withConfig({
  displayName: "ComboboxOption__ComboboxOptionText",
  componentId: "sc-w994y4-2"
})([""]);
//# sourceMappingURL=ComboboxOption.js.map