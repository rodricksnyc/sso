function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.math.hypot.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { useContext } from 'react';
import { ThemeContext } from 'styled-components';
import { mergeClassNames } from '../utils';
import { useRippleState } from './useRippleState';
import { useRippleStateBG } from './useRippleStateBG';

var getMinMaxDimensions = function getMinMaxDimensions(width, height) {
  var min = Math.min(width, height);
  var max = Math.max(width, height);
  return [min, max];
};

var getRippleScaleRange = function getRippleScaleRange(bounded, min, max, size, noScale) {
  var start = 0.1;

  if (bounded && min > 0 && max > 0) {
    var startBounded = min === max ? start : 1;
    var end = Math.hypot(min, max) / min;

    if (noScale) {
      return [end, end];
    }

    return [startBounded, end];
  }

  if (noScale) {
    return [size, size];
  }

  return [start, size];
};

var getRippleOffset = function getRippleOffset(min, max, bounded) {
  if (!bounded || min === max) {
    return '0, 0';
  }

  var offset = max / 2 - min / 2;
  return "".concat(offset, "px, 0");
};

export var useRipple = function useRipple(_ref) {
  var _rippleStyle;

  var _ref$bounded = _ref.bounded,
      bounded = _ref$bounded === void 0 ? false : _ref$bounded,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'neutral' : _ref$color,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 0 : _ref$height,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 1 : _ref$size,
      style = _ref.style,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 0 : _ref$width;

  var _useContext = useContext(ThemeContext),
      colors = _useContext.colors,
      brandAnimation = _useContext.defaults.brandAnimation;

  var _getMinMaxDimensions = getMinMaxDimensions(width, height),
      _getMinMaxDimensions2 = _slicedToArray(_getMinMaxDimensions, 2),
      min = _getMinMaxDimensions2[0],
      max = _getMinMaxDimensions2[1];

  var rippleScaleRange = getRippleScaleRange(bounded, min, max, size, !brandAnimation);
  var rippleOffset = getRippleOffset(min, max, bounded);

  var _useRippleStateBG = useRippleStateBG(),
      startBG = _useRippleStateBG.start,
      endBG = _useRippleStateBG.end,
      bgClass = _useRippleStateBG.className;

  var _useRippleState = useRippleState(),
      startFG = _useRippleState.start,
      endFG = _useRippleState.end,
      fgClass = _useRippleState.className;

  var rippleStyle = (_rippleStyle = {}, _defineProperty(_rippleStyle, '--ripple-color', colors[color]), _defineProperty(_rippleStyle, '--ripple-scale-end', rippleScaleRange[1] || 1), _defineProperty(_rippleStyle, '--ripple-scale-start', rippleScaleRange[0]), _defineProperty(_rippleStyle, '--ripple-size', bounded && min > 0 ? "".concat(min, "px") : '100%'), _defineProperty(_rippleStyle, '--ripple-translate', rippleOffset), _defineProperty(_rippleStyle, '--ripple-overflow', bounded ? 'hidden' : 'visible'), _rippleStyle);
  return {
    callbacks: {
      endBG: endBG,
      endFG: endFG,
      startBG: startBG,
      startFG: startFG
    },
    className: mergeClassNames([className, "".concat(bgClass, " ").concat(fgClass)]),
    style: _objectSpread(_objectSpread({}, style), rippleStyle)
  };
};
//# sourceMappingURL=useRipple.js.map