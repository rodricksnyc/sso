"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxOptionTextInternal = ComboboxOptionTextInternal;
exports.ComboboxOptionText = exports.ComboboxOption = exports.comboboxOptionStyle = exports.ComboboxOptionWrapper = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _Text = require("../../../Text");

var _utils = require("../../../utils");

var _Ripple = require("../../../Ripple");

var _makeHash = require("./utils/makeHash");

var _ComboboxContext = require("./ComboboxContext");

var _ComboboxOptionIndicator = require("./ComboboxOptionIndicator");

var _getComboboxText = require("./utils/getComboboxText");

var _useOptionEvents = require("./utils/useOptionEvents");

var _useOptionStatus2 = require("./utils/useOptionStatus");

var _useAddOptionToContext = require("./utils/useAddOptionToContext");

var _useOptionScroll = require("./utils/useOptionScroll");

const _excluded = ["children", "className", "isSelected", "label", "style", "value"],
      _excluded2 = ["callbacks"],
      _excluded3 = ["children", "indicator", "highlightText", "scrollIntoView"],
      _excluded4 = ["highlightText"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ComboboxOptionWrapper = (0, _styledComponents.default)((0, _react.forwardRef)((props, forwardedRef) => {
  const children = props.children,
        className = props.className,
        isSelected = props.isSelected,
        label = props.label,
        style = props.style,
        value = props.value,
        rest = _objectWithoutProperties(props, _excluded);

  const _useBoundedRipple = (0, _Ripple.useBoundedRipple)({
    className,
    color: isSelected ? 'key' : 'neutral',
    ref: forwardedRef,
    style
  }),
        callbacks = _useBoundedRipple.callbacks,
        rippleProps = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({}, (0, _pick.default)(_objectSpread({}, rest), _Ripple.rippleHandlerKeys)), rest.disabled);
  return _react.default.createElement(_ComboboxContext.OptionContext.Provider, {
    value: {
      label,
      value
    }
  }, _react.default.createElement("li", _extends({}, (0, _omit.default)((0, _designTokens.omitStyledProps)(rest)), {
    id: String((0, _makeHash.makeHash)(value)),
    role: "option"
  }, rippleProps, rippleHandlers, {
    tabIndex: -1
  }), children));
})).withConfig({
  displayName: "ComboboxOption__ComboboxOptionWrapper",
  componentId: "sc-w994y4-0"
})(["", " background-color:", ";&[aria-selected='true']{background-color:", ";}"], _Ripple.rippleStyle, ({
  isSelected,
  theme
}) => isSelected && theme.colors.keySubtle, ({
  isSelected,
  theme
}) => isSelected ? theme.colors.keyAccent : theme.colors.ui1);
exports.ComboboxOptionWrapper = ComboboxOptionWrapper;
const ComboboxOptionInternal = (0, _react.forwardRef)((_ref, forwardedRef) => {
  let children = _ref.children,
      indicator = _ref.indicator,
      _ref$highlightText = _ref.highlightText,
      highlightText = _ref$highlightText === void 0 ? true : _ref$highlightText,
      scrollIntoView = _ref.scrollIntoView,
      props = _objectWithoutProperties(_ref, _excluded3);

  const label = props.label,
        value = props.value;
  (0, _useAddOptionToContext.useAddOptionToContext)(_ComboboxContext.ComboboxContext, value, label, scrollIntoView);
  const optionEvents = (0, _useOptionEvents.useOptionEvents)(props, _ComboboxContext.ComboboxContext);

  const _useOptionStatus = (0, _useOptionStatus2.useOptionStatus)(_ComboboxContext.ComboboxContext, value),
        isActive = _useOptionStatus.isActive,
        isSelected = _useOptionStatus.isSelected;

  const scrollRef = (0, _useOptionScroll.useOptionScroll)(_ComboboxContext.ComboboxContext, value, label, scrollIntoView, isActive);
  const ref = (0, _utils.useForkedRef)(scrollRef, forwardedRef);
  return _react.default.createElement(ComboboxOptionWrapper, _extends({}, props, optionEvents, {
    ref: ref,
    "aria-selected": isActive,
    isSelected: isSelected
  }), _react.default.createElement(_ComboboxOptionIndicator.ComboboxOptionIndicator, {
    indicator: indicator,
    isActive: isActive,
    isSelected: isSelected
  }), children || _react.default.createElement(ComboboxOptionText, {
    highlightText: highlightText
  }));
});
ComboboxOptionInternal.displayName = 'ComboboxOptionInternal';
const comboboxOptionStyle = (0, _styledComponents.css)(["", " ", " ", " ", " ", " ", " align-items:stretch;cursor:default;outline:none;"], _designTokens.reset, _designTokens.color, _designTokens.flexbox, _designTokens.layout, _designTokens.space, _designTokens.typography);
exports.comboboxOptionStyle = comboboxOptionStyle;
const ComboboxOption = (0, _styledComponents.default)(ComboboxOptionInternal).attrs(({
  color = 'text4',
  display = 'flex',
  fontSize = 'small',
  lineHeight = 'small',
  px = 'xsmall',
  py = 'xxsmall'
}) => ({
  color,
  display,
  fontSize,
  lineHeight,
  px,
  py
})).withConfig({
  displayName: "ComboboxOption",
  componentId: "sc-w994y4-1"
})(["", ""], comboboxOptionStyle);
exports.ComboboxOption = ComboboxOption;

function ComboboxOptionTextInternal(_ref2) {
  let _ref2$highlightText = _ref2.highlightText,
      highlightText = _ref2$highlightText === void 0 ? true : _ref2$highlightText,
      props = _objectWithoutProperties(_ref2, _excluded4);

  const context = (0, _react.useContext)(_ComboboxContext.ComboboxContext);
  const contextMulti = (0, _react.useContext)(_ComboboxContext.ComboboxMultiContext);
  const contextToUse = context.transition ? context : contextMulti;
  const data = contextToUse.data;
  const inputValue = data.inputValue;
  const contextOption = data.option;
  const option = (0, _react.useContext)(_ComboboxContext.OptionContext);
  const text = (0, _getComboboxText.getComboboxText)(option);

  if (!highlightText || !inputValue || inputValue === '' || inputValue === (0, _getComboboxText.getComboboxText)(contextOption)) {
    return _react.default.createElement("span", props, text);
  }

  return _react.default.createElement("span", props, _react.default.createElement(_Text.ReplaceText, {
    match: inputValue,
    replace: (str, index) => _react.default.createElement(_Text.Span, {
      fontWeight: "semiBold",
      fontSize: "small",
      textDecoration: "underline",
      key: index
    }, str)
  }, text));
}

const ComboboxOptionText = (0, _styledComponents.default)(ComboboxOptionTextInternal).withConfig({
  displayName: "ComboboxOption__ComboboxOptionText",
  componentId: "sc-w994y4-2"
})([""]);
exports.ComboboxOptionText = ComboboxOptionText;
//# sourceMappingURL=ComboboxOption.js.map