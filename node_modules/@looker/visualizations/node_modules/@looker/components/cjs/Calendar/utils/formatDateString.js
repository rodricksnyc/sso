"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDateString = void 0;

var _i18n = require("@looker/i18n");

var _format = _interopRequireDefault(require("date-fns-tz/format"));

var _utcToZonedTime = _interopRequireDefault(require("date-fns-tz/utcToZonedTime"));

var _repeat = _interopRequireDefault(require("lodash/repeat"));

var _trim = _interopRequireDefault(require("lodash/trim"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const dateFormatRepetitions = {
  full: 4,
  long: 3,
  medium: 2,
  short: 1
};

const isDateFormat = stringFormat => dateFormatRepetitions[stringFormat];

const getStringFormat = (stringFormat, timeZone = undefined, {
  date = true,
  time = true
}) => {
  const dateFormat = (0, _repeat.default)('P', dateFormatRepetitions[stringFormat]);
  const timeFormat = (0, _repeat.default)('p', dateFormatRepetitions[stringFormat]);
  const timeZoneFormat = (0, _repeat.default)('z', dateFormatRepetitions[stringFormat]);
  return (0, _trim.default)(`${date ? dateFormat : ''}${time ? timeFormat : ''} ${timeZone ? timeZoneFormat : ''}`);
};

const formatDateString = (date, stringFormat = 'P', locale = (0, _i18n.getDateLocale)(), timeZone = undefined, options = {}) => {
  if (!date) {
    return '';
  }

  const renderedDate = timeZone ? (0, _utcToZonedTime.default)(date, timeZone) : date;
  const actualFormat = isDateFormat(stringFormat) ? getStringFormat(stringFormat, timeZone, options) : stringFormat;
  return (0, _format.default)(renderedDate, actualFormat, _objectSpread({
    locale
  }, timeZone && {
    timeZone
  }));
};

exports.formatDateString = formatDateString;
//# sourceMappingURL=formatDateString.js.map