import "core-js/modules/es.array.some.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.array.map.js";
import React, { Children } from 'react';
import flow from 'lodash/flow';
import { useQueryId, useVisConfig, useQueryData, useQueryIdFromDashboard } from '@looker/components-data';
import { ProgressCircular, Space } from '@looker/components';
import { useTranslation } from '../utils';
import { ErrorBoundary, buildTrackingTag, sortByDateTime, nullValueZero, xAxisReversed } from '@looker/visualizations-adapters';
import { QueryError } from '../QueryError';

var QueryInternal = function QueryInternal(_ref) {
  var query = _ref.query,
      dashboard = _ref.dashboard,
      children = _ref.children,
      configProp = _ref.config,
      LoadingIndicator = _ref.LoadingIndicator;

  var _useTranslation = useTranslation('Query'),
      t = _useTranslation.t;

  if (dashboard && query) {
    console.warn(t('Query component received both dashboard and query props'));
  }

  var _useQueryIdFromDashbo = useQueryIdFromDashboard(dashboard),
      dashboardQueryId = _useQueryIdFromDashbo.queryId,
      isDashboardPending = _useQueryIdFromDashbo.isPending,
      isDashboardOK = _useQueryIdFromDashbo.isOK,
      dashboardError = _useQueryIdFromDashbo.error;

  var _useQueryId = useQueryId(query || dashboardQueryId),
      queryId = _useQueryId.queryId,
      isQueryIdPending = _useQueryId.isPending,
      isQueryIdOK = _useQueryId.isOK,
      queryIdError = _useQueryId.error;

  var _useVisConfig = useVisConfig(queryId, configProp),
      visConfig = _useVisConfig.visConfig,
      isVisConfigPending = _useVisConfig.isPending,
      isVisConfigOK = _useVisConfig.isOK,
      visConfigError = _useVisConfig.error;

  var _useQueryData = useQueryData(queryId, buildTrackingTag(visConfig.type)),
      data = _useQueryData.data,
      fields = _useQueryData.fields,
      totals = _useQueryData.totals,
      isQueryDataPending = _useQueryData.isPending,
      isQueryDataOK = _useQueryData.isOK,
      queryDataError = _useQueryData.error;

  var isLoading = [isDashboardPending, isQueryIdPending, isVisConfigPending, isQueryDataPending].some(Boolean);
  var isEveryResponseOk = [isDashboardOK, isQueryIdOK, isVisConfigOK, isQueryDataOK].every(function (responseOk) {
    return responseOk === true;
  });

  if (!query && !dashboard) {
    return null;
  }

  if (isLoading) {
    return React.createElement(Space, {
      justifyContent: "center",
      p: "small"
    }, LoadingIndicator ? React.createElement(LoadingIndicator, null) : React.createElement(ProgressCircular, null));
  }

  if (!isEveryResponseOk) {
    return React.createElement(QueryError, {
      message: (visConfigError === null || visConfigError === void 0 ? void 0 : visConfigError.message) || (queryIdError === null || queryIdError === void 0 ? void 0 : queryIdError.message) || (dashboardError === null || dashboardError === void 0 ? void 0 : dashboardError.message) || (queryDataError === null || queryDataError === void 0 ? void 0 : queryDataError.message)
    });
  }

  var dataTransformations = [sortByDateTime, nullValueZero, xAxisReversed];

  var _flow = flow(dataTransformations)({
    data: data,
    config: visConfig,
    fields: fields
  }),
      transformedData = _flow.data;

  if (Children.count(children) >= 1) {
    return React.createElement(React.Fragment, null, Children.map(children, function (child) {
      return React.isValidElement(child) ? React.cloneElement(child, {
        config: visConfig,
        data: transformedData,
        fields: fields,
        loading: isLoading,
        ok: isEveryResponseOk,
        totals: totals
      }) : child;
    }));
  } else {
    console.warn(t('No children passed to Query component'));
    return null;
  }
};

export var Query = function Query(props) {
  return React.createElement(ErrorBoundary, null, React.createElement(QueryInternal, props));
};
//# sourceMappingURL=Query.js.map