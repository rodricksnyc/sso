import "core-js/modules/es.array.some.js";
import React, { useContext } from 'react';
import { ComponentsProvider } from '@looker/components';
import { ThemeContext } from 'styled-components';
import { Table } from '@looker/visualizations-table';
import { Area, Bar, Column, Sparkline, Line, Scatter, Pie } from '@looker/visualizations-visx';
import { SingleValue } from '@looker/visualizations-single-value';
import { ErrorBoundary } from '@looker/visualizations-adapters';
import has from 'lodash/has';
import { useTranslation } from '../utils';
export var chartComponentMap = {
  area: Area,
  bar: Bar,
  column: Column,
  "default": Table,
  line: Line,
  pie: Pie,
  scatter: Scatter,
  single_value: SingleValue,
  sparkline: Sparkline,
  table: Table
};

var VisualizationComponent = function VisualizationComponent(_ref) {
  var height = _ref.height,
      width = _ref.width,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      fields = _ref.fields,
      totals = _ref.totals,
      config = _ref.config;

  var _useTranslation = useTranslation('Visualization'),
      t = _useTranslation.t;

  if (fields !== null && fields !== void 0 && fields.measures.some(function (measure) {
    return measure.type === 'date';
  })) {
    throw new Error(t("Measures of type 'date' are currently not supported"));
  }

  if (has(chartComponentMap, (config === null || config === void 0 ? void 0 : config.type) || '')) {
    var ChartComponent = chartComponentMap[config === null || config === void 0 ? void 0 : config.type];
    return React.createElement(ChartComponent, {
      data: data,
      config: config,
      fields: fields,
      totals: totals,
      width: width,
      height: height
    });
  } else {
    console.warn(t('No supported chart type defined in config object'));
    return null;
  }
};

export var Visualization = function Visualization(props) {
  var theme = useContext(ThemeContext);

  if (!theme) {
    return React.createElement(ComponentsProvider, null, React.createElement(Visualization, props));
  }

  return React.createElement(ErrorBoundary, props, React.createElement(VisualizationComponent, props));
};
//# sourceMappingURL=Visualization.js.map