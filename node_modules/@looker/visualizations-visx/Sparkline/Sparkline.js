function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.flat-map.js";
import "core-js/modules/es.array.unscopables.flat-map.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import React, { useState, useContext, useEffect } from 'react';
import { ThemeContext } from 'styled-components';
import { LinePath } from '@visx/shape';
import { Point } from '@visx/point';
import { useMeasuredElement } from '@looker/components';
import { VisWrapper, isNumeric, DEFAULT_HEIGHT } from '@looker/visualizations-adapters';
import { getSeriesColor } from '../utils';

var chunkByNull = function chunkByNull(data) {
  return data.reduce(function (chunks, d) {
    if (d === null) {
      chunks.push([]);
    } else {
      chunks[chunks.length - 1].push(d);
    }

    return chunks;
  }, [[]]);
};

var generatePoints = function generatePoints(_ref) {
  var data = _ref.data,
      chartDimensions = _ref.chartDimensions,
      yRange = _ref.yRange,
      lineWidth = _ref.lineWidth;
  var dataChunks = chunkByNull(data);

  var _yRange = _slicedToArray(yRange, 2),
      yMin = _yRange[0],
      yMax = _yRange[1];

  var chartPadding = lineWidth / 2;
  var chartWidth = chartDimensions.width - chartPadding * 2;
  var chartHeight = chartDimensions.height - chartPadding * 2;
  var pointSpacing = chartWidth / Math.max(data.length - 1, 1);
  var valueRange = yMax - yMin;
  return dataChunks.map(function (chunk, chunkId) {
    var prevChunks = dataChunks.slice(0, chunkId);
    var countFrom = prevChunks.flatMap(function (c) {
      return c;
    }).length;
    return chunk.map(function (d, i) {
      return new Point({
        x: (i + countFrom + chunkId) * pointSpacing + chartPadding,
        y: chartHeight - (Number(d) - yMin) / valueRange * chartHeight + chartPadding
      });
    });
  });
};

export var Sparkline = function Sparkline(_ref2) {
  var _data$reduce, _config$y_axis, _config$y_axis$;

  var _ref2$data = _ref2.data,
      data = _ref2$data === void 0 ? [] : _ref2$data,
      config = _ref2.config,
      fields = _ref2.fields,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? DEFAULT_HEIGHT : _ref2$height,
      width = _ref2.width;

  var _ref3 = config || {},
      _ref3$series = _ref3.series,
      series = _ref3$series === void 0 ? {} : _ref3$series;

  var firstMeasure = fields.measures[0];
  var firstSeries = Array.isArray(series) ? series[0] : series[firstMeasure.name || ''];
  var themeContext = useContext(ThemeContext);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      wrapperRef = _useState2[0],
      setWrapperRef = _useState2[1];

  var _useMeasuredElement = useMeasuredElement(wrapperRef),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 2),
      wrapperRect = _useMeasuredElement2[0],
      refreshRect = _useMeasuredElement2[1];

  useEffect(function () {
    refreshRect();
  }, [wrapperRef, refreshRect]);

  var _ref4 = firstSeries || {},
      _ref4$line_width = _ref4.line_width,
      lineWidth = _ref4$line_width === void 0 ? 3 : _ref4$line_width;

  var _ref5 = (_data$reduce = data === null || data === void 0 ? void 0 : data.reduce(function (_ref6, d) {
    var dataSet = _ref6.dataSet,
        dataMin = _ref6.dataMin,
        dataMax = _ref6.dataMax;
    var val = d[firstMeasure.name];
    return {
      dataSet: [].concat(_toConsumableArray(dataSet), [val]),
      dataMin: isNumeric(val) ? Math.min(dataMin, Number(val)) : dataMin,
      dataMax: isNumeric(val) ? Math.max(dataMax, Number(val)) : dataMax
    };
  }, {
    dataSet: [],
    dataMin: Infinity,
    dataMax: -Infinity
  })) !== null && _data$reduce !== void 0 ? _data$reduce : {},
      dataSet = _ref5.dataSet,
      dataMin = _ref5.dataMin,
      dataMax = _ref5.dataMax;

  var _ref7 = (config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.range) || [],
      _ref8 = _slicedToArray(_ref7, 2),
      configMin = _ref8[0],
      configMax = _ref8[1];

  var chartPoints = generatePoints({
    chartDimensions: {
      width: width || wrapperRect.width,
      height: height
    },
    data: dataSet || [],
    lineWidth: lineWidth || 1,
    yRange: [isNumeric(configMin) ? configMin : dataMin, isNumeric(configMax) ? configMax : dataMax]
  });

  if (!data || data.length === 0) {
    return null;
  }

  return React.createElement(VisWrapper, {
    ref: setWrapperRef
  }, React.createElement("svg", {
    width: width,
    height: height,
    "data-testid": "sparkline-chart"
  }, chartPoints.length && chartPoints.map(function (chunk, i) {
    return React.createElement(LinePath, {
      key: i,
      data: chunk,
      stroke: getSeriesColor(firstSeries, themeContext),
      strokeWidth: lineWidth,
      x: function x(d) {
        return d.x || 0;
      },
      y: function y(d) {
        return d.y || 0;
      }
    });
  })));
};
//# sourceMappingURL=Sparkline.js.map