"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XYTooltip = exports.tooltipStyles = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _xychart = require("@visx/xychart");

var _components = require("@looker/components");

var _reactI18next = require("react-i18next");

var _get = _interopRequireDefault(require("lodash/get"));

var _Glyph = require("../Glyph");

var _utils = require("../utils");

var _DLGroup = require("../DLGroup");

var _numeral = _interopRequireDefault(require("numeral"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const tooltipStyles = (0, _styledComponents.css)(["background-color:", ";border-radius:", ";color:", ";font-family:", ";font-size:", ";padding:", ";pointer-events:none;"], ({
  theme
}) => theme.colors.inverse, ({
  theme
}) => theme.radii.medium, ({
  theme
}) => theme.colors.inverseOn, ({
  theme
}) => theme.fonts.body, ({
  theme
}) => theme.fontSizes.xsmall, ({
  theme
}) => theme.space.u3);
exports.tooltipStyles = tooltipStyles;
const XYTooltip = (0, _styledComponents.default)(({
  className,
  config,
  data,
  fields,
  snapToDatum = true,
  showDatumGlyph = true
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('XYTooltip'),
        t = _useTranslation.t;

  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const tooltips = config.tooltips,
        series = config.series;

  if (!tooltips) {
    return _react.default.createElement(_react.default.Fragment, null);
  }

  const renderTooltip = ({
    tooltipData
  }) => {
    var _tooltipData$nearestD, _tooltipData$nearestD2;

    const nearestDatumMeasureName = (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD = tooltipData.nearestDatum) === null || _tooltipData$nearestD === void 0 ? void 0 : _tooltipData$nearestD.key) || '';
    const nearestDatumIndex = (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD2 = tooltipData.nearestDatum) === null || _tooltipData$nearestD2 === void 0 ? void 0 : _tooltipData$nearestD2.index) || 0;
    const datum = data[nearestDatumIndex];
    const nearestSeries = (0, _visualizationsAdapters.pickSeriesByName)(fields, config, nearestDatumMeasureName);
    const dimensionLabel = fields.dimensions.length === 1 ? fields.dimensions[0].label_short : '';
    const valueFormatted = (0, _numeral.default)(datum[nearestDatumMeasureName]).format(nearestSeries.value_format);
    const size_by = nearestSeries.size_by;
    const sizeBySeries = size_by ? (0, _get.default)(series, size_by) : {};
    const sizeByValueFormatted = (0, _numeral.default)(datum[nearestSeries.size_by || '']).format(sizeBySeries.value_format);
    return _react.default.createElement("dl", null, _react.default.createElement(_components.SpaceVertical, {
      gap: "u3"
    }, _react.default.createElement(_DLGroup.DLGroup, {
      label: dimensionLabel,
      value: datum.dimension
    }), _react.default.createElement(_DLGroup.DLGroup, {
      label: (0, _utils.seriesLabelFormatter)(fields, config, nearestDatumMeasureName),
      value: valueFormatted
    }), nearestSeries.size_by && _react.default.createElement(_DLGroup.DLGroup, {
      preface: t('Points sized by'),
      label: (0, _utils.seriesLabelFormatter)(fields, config, nearestSeries.size_by),
      value: sizeByValueFormatted
    })));
  };

  const glyphSize = (sizeByData = 0, line_width = 3, size_by) => {
    const defaultSize = (0, _utils.getDefaultGlyphSize)(line_width) + 20 + line_width * 4;

    if (size_by) {
      const sizeByMin = (0, _visualizationsAdapters.getSeriesMin)(size_by, data);
      const sizeByMax = (0, _visualizationsAdapters.getSeriesMax)(size_by, data);
      return sizeByMin !== sizeByMax ? (0, _utils.getRelativeGlyphSize)(sizeByData, sizeByMin, sizeByMax) : defaultSize;
    }

    return defaultSize;
  };

  const styleObj = (size, size_by) => {
    const scaleValue = Math.round(-0.001 * size + 20) / 100 + 0.9;
    return _objectSpread({
      stroke: theme.colors.background,
      transform: `scale(${scaleValue}, ${scaleValue})`
    }, size_by ? {
      opacity: `0.5`,
      filter: `drop-shadow(1px 1px 3px rgb(0 0 0 / 0.5))`
    } : {});
  };

  return _react.default.createElement(_xychart.Tooltip, {
    className: className,
    detectBounds: true,
    renderTooltip: renderTooltip,
    showDatumGlyph: showDatumGlyph,
    snapTooltipToDatumX: snapToDatum,
    snapTooltipToDatumY: snapToDatum,
    unstyled: true,
    applyPositionStyle: true,
    renderGlyph: ({
      color,
      key,
      datum
    }) => {
      const nearestSeries = (0, _visualizationsAdapters.pickSeriesByName)(fields, config, key);
      const _nearestSeries$line_w = nearestSeries.line_width,
            line_width = _nearestSeries$line_w === void 0 ? 1 : _nearestSeries$line_w,
            size_by = nearestSeries.size_by;
      const size = glyphSize((0, _get.default)(datum, size_by || ''), line_width, size_by);
      const style = styleObj(size, size_by);
      return _react.default.createElement(_Glyph.Glyph, {
        series: _objectSpread(_objectSpread({}, nearestSeries), {}, {
          line_width: 3
        }),
        top: 0,
        left: 0,
        size: size,
        fill: color,
        styleObj: style
      });
    }
  });
}).withConfig({
  displayName: "XYTooltip",
  componentId: "sc-48579u-0"
})(["", ""], tooltipStyles);
exports.XYTooltip = XYTooltip;
//# sourceMappingURL=XYTooltip.js.map