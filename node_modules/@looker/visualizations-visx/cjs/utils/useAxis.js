"use strict";

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAxis = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.object.values.js");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _xychart = require("@visx/xychart");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _Axis = require("../Axis");

var _ = require(".");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const TICK_LABEL_TO_AXIS_LABEL_SPACER = 10;

const useAxis = ({
  config,
  data,
  fields
}) => {
  var _config$x_axis, _config$x_axis$, _config$y_axis, _config$y_axis$;

  const visxTheme = (0, _react.useContext)(_xychart.ThemeContext);
  const xAxisLabels = data.map(datum => (0, _.formatDateLabel)({
    dateString: datum.dimension,
    fields
  }).slice(0, _Axis.MAX_TICK_LABEL_LENGTH));
  const xAxisLongestLabel = (0, _visualizationsAdapters.pickLongestLabel)(xAxisLabels);

  const _useMeasuredText = (0, _visualizationsAdapters.useMeasuredText)(xAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
        xAxisLongestLabelHeight = _useMeasuredText.height,
        xAxisLongestLabelWidth = _useMeasuredText.width;

  const averageLabelLength = xAxisLabels.join('').length / xAxisLabels.length;
  const renderXAxisTicks = config === null || config === void 0 ? void 0 : (_config$x_axis = config.x_axis) === null || _config$x_axis === void 0 ? void 0 : (_config$x_axis$ = _config$x_axis[0]) === null || _config$x_axis$ === void 0 ? void 0 : _config$x_axis$.values;
  const hasRotatedXAxisLabels = renderXAxisTicks && averageLabelLength > 10;
  const angledLabelHypotenuse = Math.sqrt(xAxisLongestLabelWidth * xAxisLongestLabelWidth / 2) + TICK_LABEL_TO_AXIS_LABEL_SPACER;
  const X_AXIS_STYLE = hasRotatedXAxisLabels ? {
    labelDy: angledLabelHypotenuse,
    tickAngle: -45,
    tickSpace: xAxisLongestLabelHeight * 2,
    tickTextAnchor: 'end'
  } : {
    labelDy: 0,
    tickAngle: 0,
    tickSpace: xAxisLongestLabelWidth + _visualizationsAdapters.DEFAULT_MARGIN,
    tickTextAnchor: 'inherit'
  };
  const xAxisValueFormat = (0, _utils.getXAxisFormat)(fields);

  const XAxisWrapped = () => {
    var _config$x_axis2, _config$x_axis2$, _config$x_axis3, _config$x_axis3$;

    return (0, _.isDateQuery)(fields) && config.type !== 'column' ? _react.default.createElement(_Axis.XAxisDate, {
      label: (config === null || config === void 0 ? void 0 : (_config$x_axis2 = config.x_axis) === null || _config$x_axis2 === void 0 ? void 0 : (_config$x_axis2$ = _config$x_axis2[0]) === null || _config$x_axis2$ === void 0 ? void 0 : _config$x_axis2$.label) || undefined,
      showTicks: renderXAxisTicks
    }) : _react.default.createElement(_Axis.XAxis, _extends({
      showTicks: renderXAxisTicks,
      fields: fields,
      label: (config === null || config === void 0 ? void 0 : (_config$x_axis3 = config.x_axis) === null || _config$x_axis3 === void 0 ? void 0 : (_config$x_axis3$ = _config$x_axis3[0]) === null || _config$x_axis3$ === void 0 ? void 0 : _config$x_axis3$.label) || undefined,
      valueFormat: xAxisValueFormat
    }, X_AXIS_STYLE));
  };

  const renderYAxisTicks = config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.values;
  let yAxisLongestLabel;

  if (fields.measures.every(measure => measure.is_numeric)) {
    const dataRangeStrings = (0, _.getYAxisRange)({
      config,
      data,
      fields
    }).map(d => String(Math.round(d)));
    yAxisLongestLabel = (0, _visualizationsAdapters.pickLongestLabel)(dataRangeStrings);
  } else {
    const measureNames = (0, _visualizationsAdapters.getVisibleMeasureNames)(fields, config);
    const measureValues = data.flatMap(d => {
      const datumMeasureValues = Object.values((0, _pick.default)(d, measureNames));
      return datumMeasureValues.map(value => String(value));
    });
    yAxisLongestLabel = (0, _visualizationsAdapters.pickLongestLabel)(measureValues);
  }

  const _useMeasuredText2 = (0, _visualizationsAdapters.useMeasuredText)(yAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.y.left.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.y.left.tickLabel.fontSize || '1rem'
  }),
        yAxisLongestLabelWidth = _useMeasuredText2.width;

  const yAxisLabelDx = renderYAxisTicks ? -yAxisLongestLabelWidth - 10 : -10;
  const yAxisValueFormat = (0, _utils.getYAxisFormat)(config);

  const YAxisWrapped = () => {
    var _config$y_axis2, _config$y_axis2$;

    return _react.default.createElement(_Axis.YAxis, {
      showTicks: renderYAxisTicks,
      fields: fields,
      label: (config === null || config === void 0 ? void 0 : (_config$y_axis2 = config.y_axis) === null || _config$y_axis2 === void 0 ? void 0 : (_config$y_axis2$ = _config$y_axis2[0]) === null || _config$y_axis2$ === void 0 ? void 0 : _config$y_axis2$.label) || undefined,
      labelDx: yAxisLabelDx,
      valueFormat: yAxisValueFormat
    });
  };

  const yAxisLabelWidth = renderYAxisTicks ? yAxisLongestLabelWidth + _visualizationsAdapters.DEFAULT_MARGIN : _visualizationsAdapters.DEFAULT_MARGIN;
  const chartMarginBottom = hasRotatedXAxisLabels ? angledLabelHypotenuse + _visualizationsAdapters.DEFAULT_MARGIN : _visualizationsAdapters.DEFAULT_MARGIN;
  const chartMarginLeft = hasRotatedXAxisLabels ? Math.max(angledLabelHypotenuse, yAxisLabelWidth) : yAxisLabelWidth;
  const chartMargin = {
    top: 0,
    right: 0,
    bottom: chartMarginBottom,
    left: chartMarginLeft
  };
  return {
    XAxis: XAxisWrapped,
    YAxis: YAxisWrapped,
    chartMargin
  };
};

exports.useAxis = useAxis;
//# sourceMappingURL=useAxis.js.map