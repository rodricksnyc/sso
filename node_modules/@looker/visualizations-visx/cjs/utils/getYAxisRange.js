"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getYAxisRange = void 0;

var _visualizationsAdapters = require("@looker/visualizations-adapters");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getYAxisRange = ({
  config,
  data,
  fields
}) => {
  var _config$y_axis, _config$y_axis$;

  const _ref = (config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.range) || [],
        _ref2 = _slicedToArray(_ref, 2),
        _ref2$ = _ref2[0],
        configMin = _ref2$ === void 0 ? 'auto' : _ref2$,
        _ref2$2 = _ref2[1],
        configMax = _ref2$2 === void 0 ? 'auto' : _ref2$2;

  const _getDataRange = (0, _visualizationsAdapters.getDataRange)({
    config,
    data,
    fields
  }),
        _getDataRange2 = _slicedToArray(_getDataRange, 2),
        dataMin = _getDataRange2[0],
        dataMax = _getDataRange2[1];

  const min = configMin === 'auto' ? Math.min(0, Math.floor(dataMin)) : Number(configMin);
  const max = configMax === 'auto' ? Math.max(0, Math.ceil(dataMax)) : Number(configMax);
  return [min, max];
};

exports.getYAxisRange = getYAxisRange;
//# sourceMappingURL=getYAxisRange.js.map