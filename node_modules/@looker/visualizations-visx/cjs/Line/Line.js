"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Line = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("styled-components");

var _xychart = require("@visx/xychart");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _XYLegend = require("../XYLegend");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _get = _interopRequireDefault(require("lodash/get"));

var _utils = require("../utils");

var _XYTooltip = require("../XYTooltip");

var _Marker = require("../Marker");

var _Grid = require("../Grid");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Line = ({
  data,
  config,
  height = _visualizationsAdapters.DEFAULT_HEIGHT,
  width,
  fields
}) => {
  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const formattedData = (0, _utils.concatDimensions)(data, fields);

  const _useAxis = (0, _utils.useAxis)({
    config,
    data: formattedData,
    fields
  }),
        XAxis = _useAxis.XAxis,
        YAxis = _useAxis.YAxis,
        chartMargin = _useAxis.chartMargin;

  const chartTheme = (0, _utils.useChartTheme)(config.series);

  if (!(0, _utils.isValidChartData)(data, fields)) {
    return null;
  }

  const lines = fields.measures.map((measure, i) => {
    const series = (0, _isArray.default)(config.series) ? (0, _get.default)(config, ['series', i]) : (0, _get.default)(config, ['series', measure.name]);
    if (!(series !== null && series !== void 0 && series.visible)) return _react.default.createElement(_react.Fragment, {
      key: i
    });
    const style = series.style,
          line_width = series.line_width,
          shape = series.shape;
    const id = `marker-${shape}-${i}`;
    return _react.default.createElement(_react.Fragment, {
      key: id
    }, style !== 'none' && _react.default.createElement(_Marker.Marker, {
      series: series,
      id: id
    }), _react.default.createElement(_xychart.LineSeries, {
      key: id,
      dataKey: measure.name,
      data: (0, _utils.dimensionToDate)(formattedData, fields),
      stroke: (0, _utils.getSeriesColor)(series, theme),
      strokeWidth: line_width,
      xAccessor: d => (0, _utils.getX)(d),
      yAccessor: d => (0, _utils.getY)(d, i),
      markerMid: `url(#${id})`,
      markerStart: `url(#${id})`,
      markerEnd: `url(#${id})`
    }));
  });
  const domain = (0, _utils.getYAxisRange)({
    config,
    data: formattedData,
    fields
  });

  const Y_SCALE = _objectSpread({
    type: 'linear'
  }, domain && {
    domain,
    zero: false
  });

  return _react.default.createElement(_xychart.DataProvider, {
    xScale: {
      type: (0, _utils.isDateQuery)(fields) ? 'time' : 'band'
    },
    yScale: Y_SCALE,
    theme: chartTheme
  }, _react.default.createElement(_visualizationsAdapters.VisWrapper, {
    legend: config.legend
  }, _react.default.createElement(_xychart.XYChart, {
    margin: chartMargin,
    width: width,
    height: height
  }, _react.default.createElement(XAxis, null), _react.default.createElement(YAxis, null), _react.default.createElement(_Grid.Grid, {
    config: config
  }), _react.default.createElement(_XYTooltip.XYTooltip, {
    config: config,
    data: formattedData,
    fields: fields
  }), lines), _react.default.createElement(_XYLegend.XYLegend, {
    chartWidth: width,
    config: config,
    fields: fields
  })));
};

exports.Line = Line;
//# sourceMappingURL=Line.js.map