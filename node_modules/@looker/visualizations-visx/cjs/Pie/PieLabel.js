"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PieLabel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _annotation = require("@visx/annotation");

var _d3Shape = require("d3-shape");

var _styledComponents = require("styled-components");

var _getConnectorLength = require("./getConnectorLength");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const PieLabel = ({
  arc,
  outerRadius,
  labelContent,
  datumColor
}) => {
  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const startAngle = arc.startAngle,
        endAngle = arc.endAngle;
  const averageAngle = (startAngle + endAngle) / 2;

  const _pointRadial = (0, _d3Shape.pointRadial)(averageAngle, outerRadius),
        _pointRadial2 = _slicedToArray(_pointRadial, 2),
        connectorX = _pointRadial2[0],
        connectorY = _pointRadial2[1];

  const connectorLength = (0, _getConnectorLength.getConnectorLength)(averageAngle, outerRadius);

  const _pointRadial3 = (0, _d3Shape.pointRadial)(averageAngle, connectorLength),
        _pointRadial4 = _slicedToArray(_pointRadial3, 2),
        labelX = _pointRadial4[0],
        labelY = _pointRadial4[1];

  const ANCHOR_POSITION = connectorX > 0 ? 'start' : 'end';
  return _react.default.createElement(_annotation.Annotation, {
    x: connectorX,
    y: connectorY,
    dx: labelX,
    dy: labelY
  }, _react.default.createElement(_annotation.Connector, {
    stroke: datumColor,
    pathProps: {
      strokeWidth: 2
    },
    type: "line"
  }), _react.default.createElement(_annotation.Label, {
    titleFontSize: theme.fontSizes.xsmall,
    backgroundFill: "transparent",
    backgroundPadding: {
      top: 5,
      right: 5,
      bottom: 5,
      left: 5
    },
    showAnchorLine: false,
    horizontalAnchor: ANCHOR_POSITION,
    verticalAnchor: "middle",
    title: labelContent
  }));
};

exports.PieLabel = PieLabel;
//# sourceMappingURL=PieLabel.js.map