"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PieLegendControls = void 0;

var _react = _interopRequireDefault(require("react"));

var _material = require("@styled-icons/material");

var _components = require("@looker/components");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _reactI18next = require("react-i18next");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PieLegendControls = ({
  orientation,
  contentRect,
  containerRect,
  page,
  totalPages,
  handleNextClick,
  handlePrevClick
}) => {
  const _useTranslation = (0, _reactI18next.useTranslation)('PieLegendControls'),
        t = _useTranslation.t;

  return _react.default.createElement(_react.default.Fragment, null, contentRect.height > containerRect.height && orientation === 'vertical' && _react.default.createElement(LegendControls, {
    orientation: orientation
  }, _react.default.createElement(CondensedIconButton, {
    shape: "square",
    p: "small",
    icon: _react.default.createElement(_material.KeyboardArrowUp, null),
    onClick: handlePrevClick,
    disabled: page === 0,
    size: "large",
    label: t('Previous page')
  }), _react.default.createElement("span", null, page + 1, "/", totalPages + 1), _react.default.createElement(CondensedIconButton, {
    shape: "square",
    icon: _react.default.createElement(_material.KeyboardArrowDown, null),
    onClick: handleNextClick,
    disabled: page === totalPages,
    p: "small",
    size: "large",
    label: t('Next page')
  })), contentRect.width > containerRect.width && orientation === 'horizontal' && _react.default.createElement(LegendControls, {
    orientation: orientation
  }, _react.default.createElement(CondensedIconButton, {
    shape: "square",
    p: "small",
    icon: _react.default.createElement(_material.KeyboardArrowRight, null),
    onClick: handleNextClick,
    disabled: page === totalPages,
    size: "large",
    label: t('Next page')
  }), _react.default.createElement("span", null, page + 1, "/", totalPages + 1), _react.default.createElement(CondensedIconButton, {
    shape: "square",
    icon: _react.default.createElement(_material.KeyboardArrowLeft, null),
    onClick: handlePrevClick,
    disabled: page === 0,
    p: "small",
    size: "large",
    label: t('Previous page')
  })));
};

exports.PieLegendControls = PieLegendControls;

const LegendControls = _styledComponents.default.div.withConfig({
  displayName: "PieLegendControls__LegendControls",
  componentId: "sc-x61jcd-0"
})(["align-items:center;display:grid;grid-gap:", ";justify-items:center;", ""], ({
  theme
}) => theme.space.xxsmall, ({
  orientation,
  theme
}) => {
  if (orientation === 'horizontal') {
    return (0, _styledComponents.css)(["border-left:1px solid ", ";grid-template-rows:auto auto auto;padding-left:", ";"], theme.colors.ui2, theme.space.xxsmall);
  } else {
    return (0, _styledComponents.css)(["border-top:1px solid ", ";grid-template-columns:auto auto auto 1fr;padding-top:", ";"], theme.colors.ui2, theme.space.xxsmall);
  }
});

const CondensedIconButton = (0, _styledComponents.default)(_components.IconButton).withConfig({
  displayName: "PieLegendControls__CondensedIconButton",
  componentId: "sc-x61jcd-1"
})(["height:auto;padding:0;"]);
//# sourceMappingURL=PieLegendControls.js.map