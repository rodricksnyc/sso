"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sparkline = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.array.iterator.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("styled-components");

var _shape = require("@visx/shape");

var _point = require("@visx/point");

var _components = require("@looker/components");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const chunkByNull = data => data.reduce((chunks, d) => {
  if (d === null) {
    chunks.push([]);
  } else {
    chunks[chunks.length - 1].push(d);
  }

  return chunks;
}, [[]]);

const generatePoints = ({
  data,
  chartDimensions,
  yRange,
  lineWidth
}) => {
  const dataChunks = chunkByNull(data);

  const _yRange = _slicedToArray(yRange, 2),
        yMin = _yRange[0],
        yMax = _yRange[1];

  const chartPadding = lineWidth / 2;
  const chartWidth = chartDimensions.width - chartPadding * 2;
  const chartHeight = chartDimensions.height - chartPadding * 2;
  const pointSpacing = chartWidth / Math.max(data.length - 1, 1);
  const valueRange = yMax - yMin;
  return dataChunks.map((chunk, chunkId) => {
    const prevChunks = dataChunks.slice(0, chunkId);
    const countFrom = prevChunks.flatMap(c => c).length;
    return chunk.map((d, i) => {
      return new _point.Point({
        x: (i + countFrom + chunkId) * pointSpacing + chartPadding,
        y: chartHeight - (Number(d) - yMin) / valueRange * chartHeight + chartPadding
      });
    });
  });
};

const Sparkline = ({
  data = [],
  config,
  fields,
  height = _visualizationsAdapters.DEFAULT_HEIGHT,
  width
}) => {
  var _data$reduce, _config$y_axis, _config$y_axis$;

  const _ref = config || {},
        _ref$series = _ref.series,
        series = _ref$series === void 0 ? {} : _ref$series;

  const firstMeasure = fields.measures[0];
  const firstSeries = Array.isArray(series) ? series[0] : series[firstMeasure.name || ''];
  const themeContext = (0, _react.useContext)(_styledComponents.ThemeContext);

  const _useState = (0, _react.useState)(null),
        _useState2 = _slicedToArray(_useState, 2),
        wrapperRef = _useState2[0],
        setWrapperRef = _useState2[1];

  const _useMeasuredElement = (0, _components.useMeasuredElement)(wrapperRef),
        _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 2),
        wrapperRect = _useMeasuredElement2[0],
        refreshRect = _useMeasuredElement2[1];

  (0, _react.useEffect)(() => {
    refreshRect();
  }, [wrapperRef, refreshRect]);

  const _ref2 = firstSeries || {},
        _ref2$line_width = _ref2.line_width,
        lineWidth = _ref2$line_width === void 0 ? 3 : _ref2$line_width;

  const _ref3 = (_data$reduce = data === null || data === void 0 ? void 0 : data.reduce(({
    dataSet,
    dataMin,
    dataMax
  }, d) => {
    const val = d[firstMeasure.name];
    return {
      dataSet: [...dataSet, val],
      dataMin: (0, _visualizationsAdapters.isNumeric)(val) ? Math.min(dataMin, Number(val)) : dataMin,
      dataMax: (0, _visualizationsAdapters.isNumeric)(val) ? Math.max(dataMax, Number(val)) : dataMax
    };
  }, {
    dataSet: [],
    dataMin: Infinity,
    dataMax: -Infinity
  })) !== null && _data$reduce !== void 0 ? _data$reduce : {},
        dataSet = _ref3.dataSet,
        dataMin = _ref3.dataMin,
        dataMax = _ref3.dataMax;

  const _ref4 = (config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.range) || [],
        _ref5 = _slicedToArray(_ref4, 2),
        configMin = _ref5[0],
        configMax = _ref5[1];

  const chartPoints = generatePoints({
    chartDimensions: {
      width: width || wrapperRect.width,
      height
    },
    data: dataSet || [],
    lineWidth: lineWidth || 1,
    yRange: [(0, _visualizationsAdapters.isNumeric)(configMin) ? configMin : dataMin, (0, _visualizationsAdapters.isNumeric)(configMax) ? configMax : dataMax]
  });

  if (!data || data.length === 0) {
    return null;
  }

  return _react.default.createElement(_visualizationsAdapters.VisWrapper, {
    ref: setWrapperRef
  }, _react.default.createElement("svg", {
    width: width,
    height: height,
    "data-testid": "sparkline-chart"
  }, chartPoints.length && chartPoints.map((chunk, i) => {
    return _react.default.createElement(_shape.LinePath, {
      key: i,
      data: chunk,
      stroke: (0, _utils.getSeriesColor)(firstSeries, themeContext),
      strokeWidth: lineWidth,
      x: d => d.x || 0,
      y: d => d.y || 0
    });
  })));
};

exports.Sparkline = Sparkline;
//# sourceMappingURL=Sparkline.js.map