"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Column = void 0;

require("core-js/modules/es.array.map.js");

var _react = _interopRequireDefault(require("react"));

var _xychart = require("@visx/xychart");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _XYLegend = require("../XYLegend");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _get = _interopRequireDefault(require("lodash/get"));

var _compact = _interopRequireDefault(require("lodash/compact"));

var _utils = require("../utils");

var _XYTooltip = require("../XYTooltip");

var _Grid = require("../Grid");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Column = ({
  data,
  config,
  height = _visualizationsAdapters.DEFAULT_HEIGHT,
  width,
  fields
}) => {
  const positioning = config.positioning,
        seriesList = config.series,
        legend = config.legend;
  const formattedData = (0, _utils.concatDimensions)(data, fields);

  const _useAxis = (0, _utils.useAxis)({
    config,
    data: formattedData,
    fields
  }),
        XAxis = _useAxis.XAxis,
        YAxis = _useAxis.YAxis,
        chartMargin = _useAxis.chartMargin;

  const chartTheme = (0, _utils.useChartTheme)(seriesList);

  if (!(0, _utils.isValidChartData)(data, fields)) {
    return null;
  }

  const renderedColumns = (0, _compact.default)(fields.measures.map((measure, i) => {
    const series = (0, _isArray.default)(seriesList) ? (0, _get.default)(config, ['series', i]) : (0, _get.default)(config, ['series', measure.name]);
    if (!series.visible) return undefined;
    return _react.default.createElement(_xychart.BarSeries, {
      key: i,
      dataKey: measure.name,
      data: formattedData,
      xAccessor: d => (0, _utils.getX)(d),
      yAccessor: d => (0, _utils.getY)(d, i)
    });
  }));
  const domain = positioning === 'percent' ? [0, 1] : (0, _utils.getYAxisRange)({
    config,
    data: formattedData,
    fields
  });

  const Y_SCALE = _objectSpread({
    type: 'linear'
  }, domain && {
    domain,
    zero: false
  });

  return _react.default.createElement(_xychart.DataProvider, {
    xScale: {
      type: 'band',
      paddingInner: 0.2
    },
    yScale: Y_SCALE,
    theme: chartTheme
  }, _react.default.createElement(_visualizationsAdapters.VisWrapper, {
    legend: legend
  }, _react.default.createElement(_xychart.XYChart, {
    margin: chartMargin,
    width: width,
    height: height
  }, _react.default.createElement(XAxis, null), _react.default.createElement(YAxis, null), _react.default.createElement(_Grid.Grid, {
    config: config
  }), _react.default.createElement(_XYTooltip.XYTooltip, {
    config: config,
    data: formattedData,
    fields: fields,
    showDatumGlyph: false,
    snapToDatum: false
  }), positioning === 'stacked' || positioning === 'percent' ? _react.default.createElement(_xychart.BarStack, {
    offset: positioning === 'percent' ? 'expand' : 'none'
  }, renderedColumns) : _react.default.createElement(_xychart.BarGroup, null, renderedColumns)), _react.default.createElement(_XYLegend.XYLegend, {
    chartWidth: width,
    config: config,
    fields: fields
  })));
};

exports.Column = Column;
//# sourceMappingURL=Column.js.map