"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bar = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.object.values.js");

var _react = _interopRequireWildcard(require("react"));

var _xychart = require("@visx/xychart");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _XYLegend = require("../XYLegend");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _get = _interopRequireDefault(require("lodash/get"));

var _compact = _interopRequireDefault(require("lodash/compact"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _Axis = require("../Axis");

var _utils = require("../utils");

var _XYTooltip = require("../XYTooltip");

var _Grid = require("../Grid");

var _numeral = _interopRequireDefault(require("numeral"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Bar = ({
  data,
  config,
  height = _visualizationsAdapters.DEFAULT_HEIGHT,
  width,
  fields
}) => {
  var _config$x_axis, _config$y_axis;

  const positioning = config.positioning,
        seriesList = config.series,
        legend = config.legend;
  const formattedData = (0, _utils.concatDimensions)(data, fields);
  const chartTheme = (0, _utils.useChartTheme)(seriesList);
  const visxTheme = (0, _react.useContext)(_xychart.ThemeContext);
  const yAxisLabels = formattedData.map(datum => (0, _utils.formatDateLabel)({
    dateString: datum.dimension,
    fields
  }));
  const yAxisLongestLabel = (0, _visualizationsAdapters.pickLongestLabel)(yAxisLabels);

  const _useMeasuredText = (0, _visualizationsAdapters.useMeasuredText)(yAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
        yAxisLongestLabelWidth = _useMeasuredText.width;

  const yAxisConfig = config === null || config === void 0 ? void 0 : (_config$x_axis = config.x_axis) === null || _config$x_axis === void 0 ? void 0 : _config$x_axis[0];
  const yAxisValueFormat = (0, _utils.getXAxisFormat)(fields);
  const yAxisLabelDx = yAxisConfig !== null && yAxisConfig !== void 0 && yAxisConfig.values ? -yAxisLongestLabelWidth - 10 : -10;
  const xAxisConfig = config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : _config$y_axis[0];
  const xAxisValueFormat = (0, _utils.getYAxisFormat)(config);
  const measureNames = (0, _visualizationsAdapters.getVisibleMeasureNames)(fields, config);
  const measureValues = data.flatMap(d => {
    const datumMeasureValues = Object.values((0, _pick.default)(d, measureNames));
    return datumMeasureValues.map(value => (0, _numeral.default)(value).format(xAxisValueFormat));
  });
  const xAxisLongestLabel = (0, _visualizationsAdapters.pickLongestLabel)(measureValues);

  const _useMeasuredText2 = (0, _visualizationsAdapters.useMeasuredText)(xAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
        xAxisLongestLabelHeight = _useMeasuredText2.height,
        xAxisLongestLabelWidth = _useMeasuredText2.width;

  const averageMeasureValueLength = measureValues.join('').length / measureValues.length;
  const hasRotatedXAxisLabels = (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.values) && averageMeasureValueLength > 10;
  const angledLabelHypotenuse = Math.sqrt(xAxisLongestLabelWidth * xAxisLongestLabelWidth / 2);
  const X_AXIS_STYLE = hasRotatedXAxisLabels ? {
    labelDy: angledLabelHypotenuse,
    tickAngle: -45,
    tickSpace: xAxisLongestLabelHeight * 2,
    tickTextAnchor: 'end'
  } : {
    labelDy: 0,
    tickAngle: 0,
    tickSpace: xAxisLongestLabelWidth + _visualizationsAdapters.DEFAULT_MARGIN,
    tickTextAnchor: 'inherit'
  };

  if (!(0, _utils.isValidChartData)(data, fields)) {
    return null;
  }

  const domain = positioning === 'percent' ? [0, 1] : (0, _utils.getYAxisRange)({
    config,
    data: formattedData,
    fields
  });

  const X_SCALE = _objectSpread({
    type: 'linear'
  }, domain && {
    domain,
    zero: false
  });

  const chartMarginBottom = hasRotatedXAxisLabels ? angledLabelHypotenuse + _visualizationsAdapters.DEFAULT_MARGIN : _visualizationsAdapters.DEFAULT_MARGIN;
  const chartMargin = {
    right: 0,
    top: 0,
    bottom: chartMarginBottom,
    left: yAxisConfig !== null && yAxisConfig !== void 0 && yAxisConfig.values ? yAxisLongestLabelWidth + _visualizationsAdapters.DEFAULT_MARGIN : _visualizationsAdapters.DEFAULT_MARGIN
  };
  const renderedBars = (0, _compact.default)(fields.measures.map((measure, i) => {
    const series = (0, _isArray.default)(seriesList) ? (0, _get.default)(config, ['series', i]) : (0, _get.default)(config, ['series', measure.name]);
    if (!series.visible) return undefined;
    return _react.default.createElement(_xychart.BarSeries, {
      key: i,
      dataKey: measure.name,
      data: formattedData,
      xAccessor: d => (0, _utils.getY)(d, i),
      yAccessor: d => (0, _utils.getX)(d)
    });
  }));
  return _react.default.createElement(_xychart.DataProvider, {
    xScale: X_SCALE,
    yScale: {
      type: 'band',
      paddingInner: 0.2
    },
    theme: chartTheme
  }, _react.default.createElement(_visualizationsAdapters.VisWrapper, {
    legend: legend
  }, _react.default.createElement(_xychart.XYChart, {
    margin: chartMargin,
    width: width,
    height: height
  }, _react.default.createElement(_Axis.XAxis, _extends({
    showTicks: xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.values,
    fields: fields,
    label: (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.label) || '',
    valueFormat: xAxisValueFormat
  }, X_AXIS_STYLE)), _react.default.createElement(_Axis.YAxis, {
    showTicks: yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.values,
    fields: fields,
    label: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.label) || '',
    labelDx: yAxisLabelDx,
    valueFormat: yAxisValueFormat
  }), _react.default.createElement(_Grid.Grid, {
    config: config
  }), _react.default.createElement(_XYTooltip.XYTooltip, {
    config: config,
    data: formattedData,
    fields: fields,
    showDatumGlyph: false,
    snapToDatum: false
  }), positioning === 'stacked' || positioning === 'percent' ? _react.default.createElement(_xychart.BarStack, {
    offset: positioning === 'percent' ? 'expand' : 'none'
  }, renderedBars) : _react.default.createElement(_xychart.BarGroup, null, renderedBars)), _react.default.createElement(_XYLegend.XYLegend, {
    chartWidth: width,
    config: config,
    fields: fields
  })));
};

exports.Bar = Bar;
//# sourceMappingURL=Bar.js.map