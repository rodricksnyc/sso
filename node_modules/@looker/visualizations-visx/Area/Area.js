function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import React, { Fragment } from 'react';
import { DataProvider, AreaSeries, XYChart, AreaStack } from '@visx/xychart';
import { DEFAULT_HEIGHT, VisWrapper } from '@looker/visualizations-adapters';
import { XYLegend } from '../XYLegend';
import isArray from 'lodash/isArray';
import get from 'lodash/get';
import { concatDimensions, getX, getY, getYAxisRange, useAxis, useChartTheme, isValidChartData, isDateQuery, dimensionToDate } from '../utils';
import { XYTooltip } from '../XYTooltip';
import { Marker } from '../Marker';
import { Grid } from '../Grid';

var NoopComponent = function NoopComponent(_ref) {
  var children = _ref.children;
  return React.createElement(React.Fragment, null, children);
};

export var Area = function Area(_ref2) {
  var data = _ref2.data,
      config = _ref2.config,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? DEFAULT_HEIGHT : _ref2$height,
      width = _ref2.width,
      fields = _ref2.fields;
  var positioning = config.positioning,
      seriesList = config.series,
      legend = config.legend;
  var formattedData = concatDimensions(data, fields);

  var _useAxis = useAxis({
    config: config,
    data: formattedData,
    fields: fields
  }),
      XAxis = _useAxis.XAxis,
      YAxis = _useAxis.YAxis,
      chartMargin = _useAxis.chartMargin;

  var chartTheme = useChartTheme(seriesList);

  if (!isValidChartData(data, fields)) {
    return null;
  }

  var areas = fields.measures.map(function (measure, i) {
    var series = isArray(seriesList) ? get(config, ['series', i]) : get(config, ['series', measure.name]);
    if (!series.visible) return React.createElement(Fragment, {
      key: i
    });
    var style = series.style,
        line_width = series.line_width,
        shape = series.shape;
    var id = "marker-".concat(shape, "-").concat(i);
    return React.createElement(Fragment, {
      key: id
    }, style !== 'none' && React.createElement(Marker, {
      series: series,
      id: id
    }), React.createElement(AreaSeries, {
      key: id,
      dataKey: measure.name,
      data: dimensionToDate(formattedData, fields),
      lineProps: {
        strokeWidth: line_width,
        markerMid: "url(#".concat(id, ")"),
        markerStart: "url(#".concat(id, ")"),
        markerEnd: "url(#".concat(id, ")")
      },
      fillOpacity: 0.4,
      xAccessor: function xAccessor(d) {
        return getX(d);
      },
      yAccessor: function yAccessor(d) {
        return getY(d, i);
      }
    }));
  });
  var domain = positioning === 'percent' ? [0, 1] : getYAxisRange({
    config: config,
    data: formattedData,
    fields: fields
  });

  var Y_SCALE = _objectSpread({
    type: 'linear'
  }, domain && {
    domain: domain,
    zero: false
  });

  var PositioningWrapper = positioning === 'stacked' || positioning === 'percent' ? AreaStack : NoopComponent;
  return React.createElement(DataProvider, {
    xScale: {
      type: isDateQuery(fields) ? 'time' : 'band'
    },
    yScale: Y_SCALE,
    theme: chartTheme
  }, React.createElement(VisWrapper, {
    legend: legend
  }, React.createElement(XYChart, {
    margin: chartMargin,
    width: width,
    height: height
  }, React.createElement(XAxis, null), React.createElement(YAxis, null), React.createElement(Grid, {
    config: config
  }), React.createElement(XYTooltip, {
    config: config,
    data: formattedData,
    fields: fields
  }), React.createElement(PositioningWrapper, {
    offset: positioning === 'percent' ? 'expand' : 'none'
  }, areas)), React.createElement(XYLegend, {
    chartWidth: width,
    config: config,
    fields: fields
  })));
};
//# sourceMappingURL=Area.js.map