import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from 'react';
import styled, { ThemeContext, css } from 'styled-components';
import { getSeriesMax, getSeriesMin, pickSeriesByName } from '@looker/visualizations-adapters';
import { Tooltip as VisxTooltip } from '@visx/xychart';
import { SpaceVertical } from '@looker/components';
import { useTranslation } from 'react-i18next';
import get from 'lodash/get';
import { Glyph } from '../Glyph';
import { seriesLabelFormatter, getRelativeGlyphSize, getDefaultGlyphSize } from '../utils';
import { DLGroup } from '../DLGroup';
import numeral from 'numeral';
export var tooltipStyles = css(["background-color:", ";border-radius:", ";color:", ";font-family:", ";font-size:", ";padding:", ";pointer-events:none;"], function (_ref) {
  var theme = _ref.theme;
  return theme.colors.inverse;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.radii.medium;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.inverseOn;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.fonts.body;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.fontSizes.xsmall;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.space.u3;
});
export var XYTooltip = styled(function (_ref7) {
  var className = _ref7.className,
      config = _ref7.config,
      data = _ref7.data,
      fields = _ref7.fields,
      _ref7$snapToDatum = _ref7.snapToDatum,
      snapToDatum = _ref7$snapToDatum === void 0 ? true : _ref7$snapToDatum,
      _ref7$showDatumGlyph = _ref7.showDatumGlyph,
      showDatumGlyph = _ref7$showDatumGlyph === void 0 ? true : _ref7$showDatumGlyph;

  var _useTranslation = useTranslation('XYTooltip'),
      t = _useTranslation.t;

  var theme = useContext(ThemeContext);
  var tooltips = config.tooltips,
      series = config.series;

  if (!tooltips) {
    return React.createElement(React.Fragment, null);
  }

  var renderTooltip = function renderTooltip(_ref8) {
    var _tooltipData$nearestD, _tooltipData$nearestD2;

    var tooltipData = _ref8.tooltipData;
    var nearestDatumMeasureName = (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD = tooltipData.nearestDatum) === null || _tooltipData$nearestD === void 0 ? void 0 : _tooltipData$nearestD.key) || '';
    var nearestDatumIndex = (tooltipData === null || tooltipData === void 0 ? void 0 : (_tooltipData$nearestD2 = tooltipData.nearestDatum) === null || _tooltipData$nearestD2 === void 0 ? void 0 : _tooltipData$nearestD2.index) || 0;
    var datum = data[nearestDatumIndex];
    var nearestSeries = pickSeriesByName(fields, config, nearestDatumMeasureName);
    var dimensionLabel = fields.dimensions.length === 1 ? fields.dimensions[0].label_short : '';
    var valueFormatted = numeral(datum[nearestDatumMeasureName]).format(nearestSeries.value_format);
    var size_by = nearestSeries.size_by;
    var sizeBySeries = size_by ? get(series, size_by) : {};
    var sizeByValueFormatted = numeral(datum[nearestSeries.size_by || '']).format(sizeBySeries.value_format);
    return React.createElement("dl", null, React.createElement(SpaceVertical, {
      gap: "u3"
    }, React.createElement(DLGroup, {
      label: dimensionLabel,
      value: datum.dimension
    }), React.createElement(DLGroup, {
      label: seriesLabelFormatter(fields, config, nearestDatumMeasureName),
      value: valueFormatted
    }), nearestSeries.size_by && React.createElement(DLGroup, {
      preface: t('Points sized by'),
      label: seriesLabelFormatter(fields, config, nearestSeries.size_by),
      value: sizeByValueFormatted
    })));
  };

  var glyphSize = function glyphSize() {
    var sizeByData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var line_width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    var size_by = arguments.length > 2 ? arguments[2] : undefined;
    var defaultSize = getDefaultGlyphSize(line_width) + 20 + line_width * 4;

    if (size_by) {
      var sizeByMin = getSeriesMin(size_by, data);
      var sizeByMax = getSeriesMax(size_by, data);
      return sizeByMin !== sizeByMax ? getRelativeGlyphSize(sizeByData, sizeByMin, sizeByMax) : defaultSize;
    }

    return defaultSize;
  };

  var styleObj = function styleObj(size, size_by) {
    var scaleValue = Math.round(-0.001 * size + 20) / 100 + 0.9;
    return _objectSpread({
      stroke: theme.colors.background,
      transform: "scale(".concat(scaleValue, ", ").concat(scaleValue, ")")
    }, size_by ? {
      opacity: "0.5",
      filter: "drop-shadow(1px 1px 3px rgb(0 0 0 / 0.5))"
    } : {});
  };

  return React.createElement(VisxTooltip, {
    className: className,
    detectBounds: true,
    renderTooltip: renderTooltip,
    showDatumGlyph: showDatumGlyph,
    snapTooltipToDatumX: snapToDatum,
    snapTooltipToDatumY: snapToDatum,
    unstyled: true,
    applyPositionStyle: true,
    renderGlyph: function renderGlyph(_ref9) {
      var color = _ref9.color,
          key = _ref9.key,
          datum = _ref9.datum;
      var nearestSeries = pickSeriesByName(fields, config, key);
      var _nearestSeries$line_w = nearestSeries.line_width,
          line_width = _nearestSeries$line_w === void 0 ? 1 : _nearestSeries$line_w,
          size_by = nearestSeries.size_by;
      var size = glyphSize(get(datum, size_by || ''), line_width, size_by);
      var style = styleObj(size, size_by);
      return React.createElement(Glyph, {
        series: _objectSpread(_objectSpread({}, nearestSeries), {}, {
          line_width: 3
        }),
        top: 0,
        left: 0,
        size: size,
        fill: color,
        styleObj: style
      });
    }
  });
}).withConfig({
  displayName: "XYTooltip",
  componentId: "sc-48579u-0"
})(["", ""], tooltipStyles);
//# sourceMappingURL=XYTooltip.js.map