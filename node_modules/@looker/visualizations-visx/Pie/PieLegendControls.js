import React from 'react';
import { KeyboardArrowUp, KeyboardArrowDown, KeyboardArrowRight, KeyboardArrowLeft } from '@styled-icons/material';
import { IconButton } from '@looker/components';
import styled, { css } from 'styled-components';
import { useTranslation } from 'react-i18next';
export var PieLegendControls = function PieLegendControls(_ref) {
  var orientation = _ref.orientation,
      contentRect = _ref.contentRect,
      containerRect = _ref.containerRect,
      page = _ref.page,
      totalPages = _ref.totalPages,
      handleNextClick = _ref.handleNextClick,
      handlePrevClick = _ref.handlePrevClick;

  var _useTranslation = useTranslation('PieLegendControls'),
      t = _useTranslation.t;

  return React.createElement(React.Fragment, null, contentRect.height > containerRect.height && orientation === 'vertical' && React.createElement(LegendControls, {
    orientation: orientation
  }, React.createElement(CondensedIconButton, {
    shape: "square",
    p: "small",
    icon: React.createElement(KeyboardArrowUp, null),
    onClick: handlePrevClick,
    disabled: page === 0,
    size: "large",
    label: t('Previous page')
  }), React.createElement("span", null, page + 1, "/", totalPages + 1), React.createElement(CondensedIconButton, {
    shape: "square",
    icon: React.createElement(KeyboardArrowDown, null),
    onClick: handleNextClick,
    disabled: page === totalPages,
    p: "small",
    size: "large",
    label: t('Next page')
  })), contentRect.width > containerRect.width && orientation === 'horizontal' && React.createElement(LegendControls, {
    orientation: orientation
  }, React.createElement(CondensedIconButton, {
    shape: "square",
    p: "small",
    icon: React.createElement(KeyboardArrowRight, null),
    onClick: handleNextClick,
    disabled: page === totalPages,
    size: "large",
    label: t('Next page')
  }), React.createElement("span", null, page + 1, "/", totalPages + 1), React.createElement(CondensedIconButton, {
    shape: "square",
    icon: React.createElement(KeyboardArrowLeft, null),
    onClick: handlePrevClick,
    disabled: page === 0,
    p: "small",
    size: "large",
    label: t('Previous page')
  })));
};
var LegendControls = styled.div.withConfig({
  displayName: "PieLegendControls__LegendControls",
  componentId: "sc-x61jcd-0"
})(["align-items:center;display:grid;grid-gap:", ";justify-items:center;", ""], function (_ref2) {
  var theme = _ref2.theme;
  return theme.space.xxsmall;
}, function (_ref3) {
  var orientation = _ref3.orientation,
      theme = _ref3.theme;

  if (orientation === 'horizontal') {
    return css(["border-left:1px solid ", ";grid-template-rows:auto auto auto;padding-left:", ";"], theme.colors.ui2, theme.space.xxsmall);
  } else {
    return css(["border-top:1px solid ", ";grid-template-columns:auto auto auto 1fr;padding-top:", ";"], theme.colors.ui2, theme.space.xxsmall);
  }
});
var CondensedIconButton = styled(IconButton).withConfig({
  displayName: "PieLegendControls__CondensedIconButton",
  componentId: "sc-x61jcd-1"
})(["height:auto;padding:0;"]);
//# sourceMappingURL=PieLegendControls.js.map