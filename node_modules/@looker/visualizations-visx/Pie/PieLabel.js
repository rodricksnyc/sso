import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useContext } from 'react';
import { Annotation, Label, Connector } from '@visx/annotation';
import { pointRadial } from 'd3-shape';
import { ThemeContext } from 'styled-components';
import { getConnectorLength } from './getConnectorLength';
export var PieLabel = function PieLabel(_ref) {
  var arc = _ref.arc,
      outerRadius = _ref.outerRadius,
      labelContent = _ref.labelContent,
      datumColor = _ref.datumColor;
  var theme = useContext(ThemeContext);
  var startAngle = arc.startAngle,
      endAngle = arc.endAngle;
  var averageAngle = (startAngle + endAngle) / 2;

  var _pointRadial = pointRadial(averageAngle, outerRadius),
      _pointRadial2 = _slicedToArray(_pointRadial, 2),
      connectorX = _pointRadial2[0],
      connectorY = _pointRadial2[1];

  var connectorLength = getConnectorLength(averageAngle, outerRadius);

  var _pointRadial3 = pointRadial(averageAngle, connectorLength),
      _pointRadial4 = _slicedToArray(_pointRadial3, 2),
      labelX = _pointRadial4[0],
      labelY = _pointRadial4[1];

  var ANCHOR_POSITION = connectorX > 0 ? 'start' : 'end';
  return React.createElement(Annotation, {
    x: connectorX,
    y: connectorY,
    dx: labelX,
    dy: labelY
  }, React.createElement(Connector, {
    stroke: datumColor,
    pathProps: {
      strokeWidth: 2
    },
    type: "line"
  }), React.createElement(Label, {
    titleFontSize: theme.fontSizes.xsmall,
    backgroundFill: "transparent",
    backgroundPadding: {
      top: 5,
      right: 5,
      bottom: 5,
      left: 5
    },
    showAnchorLine: false,
    horizontalAnchor: ANCHOR_POSITION,
    verticalAnchor: "middle",
    title: labelContent
  }));
};
//# sourceMappingURL=PieLabel.js.map