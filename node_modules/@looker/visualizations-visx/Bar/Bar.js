function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.flat-map.js";
import "core-js/modules/es.array.unscopables.flat-map.js";
import "core-js/modules/es.object.values.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
import React, { useContext } from 'react';
import { DataProvider, BarSeries, XYChart, BarStack, BarGroup, ThemeContext as VisxThemeContext } from '@visx/xychart';
import { DEFAULT_HEIGHT, VisWrapper, pickLongestLabel, useMeasuredText, getVisibleMeasureNames, DEFAULT_MARGIN } from '@looker/visualizations-adapters';
import { XYLegend } from '../XYLegend';
import isArray from 'lodash/isArray';
import get from 'lodash/get';
import compact from 'lodash/compact';
import pick from 'lodash/pick';
import { XAxis, YAxis } from '../Axis';
import { concatDimensions, getX, getY, getYAxisRange, useChartTheme, isValidChartData, formatDateLabel, getXAxisFormat, getYAxisFormat } from '../utils';
import { XYTooltip } from '../XYTooltip';
import { Grid } from '../Grid';
import numeral from 'numeral';
export var Bar = function Bar(_ref) {
  var _config$x_axis, _config$y_axis;

  var data = _ref.data,
      config = _ref.config,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? DEFAULT_HEIGHT : _ref$height,
      width = _ref.width,
      fields = _ref.fields;
  var positioning = config.positioning,
      seriesList = config.series,
      legend = config.legend;
  var formattedData = concatDimensions(data, fields);
  var chartTheme = useChartTheme(seriesList);
  var visxTheme = useContext(VisxThemeContext);
  var yAxisLabels = formattedData.map(function (datum) {
    return formatDateLabel({
      dateString: datum.dimension,
      fields: fields
    });
  });
  var yAxisLongestLabel = pickLongestLabel(yAxisLabels);

  var _useMeasuredText = useMeasuredText(yAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
      yAxisLongestLabelWidth = _useMeasuredText.width;

  var yAxisConfig = config === null || config === void 0 ? void 0 : (_config$x_axis = config.x_axis) === null || _config$x_axis === void 0 ? void 0 : _config$x_axis[0];
  var yAxisValueFormat = getXAxisFormat(fields);
  var yAxisLabelDx = yAxisConfig !== null && yAxisConfig !== void 0 && yAxisConfig.values ? -yAxisLongestLabelWidth - 10 : -10;
  var xAxisConfig = config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : _config$y_axis[0];
  var xAxisValueFormat = getYAxisFormat(config);
  var measureNames = getVisibleMeasureNames(fields, config);
  var measureValues = data.flatMap(function (d) {
    var datumMeasureValues = Object.values(pick(d, measureNames));
    return datumMeasureValues.map(function (value) {
      return numeral(value).format(xAxisValueFormat);
    });
  });
  var xAxisLongestLabel = pickLongestLabel(measureValues);

  var _useMeasuredText2 = useMeasuredText(xAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
      xAxisLongestLabelHeight = _useMeasuredText2.height,
      xAxisLongestLabelWidth = _useMeasuredText2.width;

  var averageMeasureValueLength = measureValues.join('').length / measureValues.length;
  var hasRotatedXAxisLabels = (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.values) && averageMeasureValueLength > 10;
  var angledLabelHypotenuse = Math.sqrt(xAxisLongestLabelWidth * xAxisLongestLabelWidth / 2);
  var X_AXIS_STYLE = hasRotatedXAxisLabels ? {
    labelDy: angledLabelHypotenuse,
    tickAngle: -45,
    tickSpace: xAxisLongestLabelHeight * 2,
    tickTextAnchor: 'end'
  } : {
    labelDy: 0,
    tickAngle: 0,
    tickSpace: xAxisLongestLabelWidth + DEFAULT_MARGIN,
    tickTextAnchor: 'inherit'
  };

  if (!isValidChartData(data, fields)) {
    return null;
  }

  var domain = positioning === 'percent' ? [0, 1] : getYAxisRange({
    config: config,
    data: formattedData,
    fields: fields
  });

  var X_SCALE = _objectSpread({
    type: 'linear'
  }, domain && {
    domain: domain,
    zero: false
  });

  var chartMarginBottom = hasRotatedXAxisLabels ? angledLabelHypotenuse + DEFAULT_MARGIN : DEFAULT_MARGIN;
  var chartMargin = {
    right: 0,
    top: 0,
    bottom: chartMarginBottom,
    left: yAxisConfig !== null && yAxisConfig !== void 0 && yAxisConfig.values ? yAxisLongestLabelWidth + DEFAULT_MARGIN : DEFAULT_MARGIN
  };
  var renderedBars = compact(fields.measures.map(function (measure, i) {
    var series = isArray(seriesList) ? get(config, ['series', i]) : get(config, ['series', measure.name]);
    if (!series.visible) return undefined;
    return React.createElement(BarSeries, {
      key: i,
      dataKey: measure.name,
      data: formattedData,
      xAccessor: function xAccessor(d) {
        return getY(d, i);
      },
      yAccessor: function yAccessor(d) {
        return getX(d);
      }
    });
  }));
  return React.createElement(DataProvider, {
    xScale: X_SCALE,
    yScale: {
      type: 'band',
      paddingInner: 0.2
    },
    theme: chartTheme
  }, React.createElement(VisWrapper, {
    legend: legend
  }, React.createElement(XYChart, {
    margin: chartMargin,
    width: width,
    height: height
  }, React.createElement(XAxis, _extends({
    showTicks: xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.values,
    fields: fields,
    label: (xAxisConfig === null || xAxisConfig === void 0 ? void 0 : xAxisConfig.label) || '',
    valueFormat: xAxisValueFormat
  }, X_AXIS_STYLE)), React.createElement(YAxis, {
    showTicks: yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.values,
    fields: fields,
    label: (yAxisConfig === null || yAxisConfig === void 0 ? void 0 : yAxisConfig.label) || '',
    labelDx: yAxisLabelDx,
    valueFormat: yAxisValueFormat
  }), React.createElement(Grid, {
    config: config
  }), React.createElement(XYTooltip, {
    config: config,
    data: formattedData,
    fields: fields,
    showDatumGlyph: false,
    snapToDatum: false
  }), positioning === 'stacked' || positioning === 'percent' ? React.createElement(BarStack, {
    offset: positioning === 'percent' ? 'expand' : 'none'
  }, renderedBars) : React.createElement(BarGroup, null, renderedBars)), React.createElement(XYLegend, {
    chartWidth: width,
    config: config,
    fields: fields
  })));
};
//# sourceMappingURL=Bar.js.map