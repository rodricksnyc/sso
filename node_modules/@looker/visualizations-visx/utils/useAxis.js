function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.every.js";
import "core-js/modules/es.array.flat-map.js";
import "core-js/modules/es.array.unscopables.flat-map.js";
import "core-js/modules/es.object.values.js";
import "core-js/modules/es.object.assign.js";
import pick from 'lodash/pick';
import React, { useContext } from 'react';
import { ThemeContext as VisxThemeContext } from '@visx/xychart';
import { useMeasuredText, pickLongestLabel, getVisibleMeasureNames, DEFAULT_MARGIN } from '@looker/visualizations-adapters';
import { MAX_TICK_LABEL_LENGTH, XAxis, XAxisDate, YAxis } from '../Axis';
import { formatDateLabel, getYAxisRange, isDateQuery } from '.';
import { getYAxisFormat, getXAxisFormat } from '../utils';
var TICK_LABEL_TO_AXIS_LABEL_SPACER = 10;
export var useAxis = function useAxis(_ref) {
  var _config$x_axis, _config$x_axis$, _config$y_axis, _config$y_axis$;

  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;
  var visxTheme = useContext(VisxThemeContext);
  var xAxisLabels = data.map(function (datum) {
    return formatDateLabel({
      dateString: datum.dimension,
      fields: fields
    }).slice(0, MAX_TICK_LABEL_LENGTH);
  });
  var xAxisLongestLabel = pickLongestLabel(xAxisLabels);

  var _useMeasuredText = useMeasuredText(xAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.x.bottom.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.x.bottom.tickLabel.fontSize || '1rem'
  }),
      xAxisLongestLabelHeight = _useMeasuredText.height,
      xAxisLongestLabelWidth = _useMeasuredText.width;

  var averageLabelLength = xAxisLabels.join('').length / xAxisLabels.length;
  var renderXAxisTicks = config === null || config === void 0 ? void 0 : (_config$x_axis = config.x_axis) === null || _config$x_axis === void 0 ? void 0 : (_config$x_axis$ = _config$x_axis[0]) === null || _config$x_axis$ === void 0 ? void 0 : _config$x_axis$.values;
  var hasRotatedXAxisLabels = renderXAxisTicks && averageLabelLength > 10;
  var angledLabelHypotenuse = Math.sqrt(xAxisLongestLabelWidth * xAxisLongestLabelWidth / 2) + TICK_LABEL_TO_AXIS_LABEL_SPACER;
  var X_AXIS_STYLE = hasRotatedXAxisLabels ? {
    labelDy: angledLabelHypotenuse,
    tickAngle: -45,
    tickSpace: xAxisLongestLabelHeight * 2,
    tickTextAnchor: 'end'
  } : {
    labelDy: 0,
    tickAngle: 0,
    tickSpace: xAxisLongestLabelWidth + DEFAULT_MARGIN,
    tickTextAnchor: 'inherit'
  };
  var xAxisValueFormat = getXAxisFormat(fields);

  var XAxisWrapped = function XAxisWrapped() {
    var _config$x_axis2, _config$x_axis2$, _config$x_axis3, _config$x_axis3$;

    return isDateQuery(fields) && config.type !== 'column' ? React.createElement(XAxisDate, {
      label: (config === null || config === void 0 ? void 0 : (_config$x_axis2 = config.x_axis) === null || _config$x_axis2 === void 0 ? void 0 : (_config$x_axis2$ = _config$x_axis2[0]) === null || _config$x_axis2$ === void 0 ? void 0 : _config$x_axis2$.label) || undefined,
      showTicks: renderXAxisTicks
    }) : React.createElement(XAxis, _extends({
      showTicks: renderXAxisTicks,
      fields: fields,
      label: (config === null || config === void 0 ? void 0 : (_config$x_axis3 = config.x_axis) === null || _config$x_axis3 === void 0 ? void 0 : (_config$x_axis3$ = _config$x_axis3[0]) === null || _config$x_axis3$ === void 0 ? void 0 : _config$x_axis3$.label) || undefined,
      valueFormat: xAxisValueFormat
    }, X_AXIS_STYLE));
  };

  var renderYAxisTicks = config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.values;
  var yAxisLongestLabel;

  if (fields.measures.every(function (measure) {
    return measure.is_numeric;
  })) {
    var dataRangeStrings = getYAxisRange({
      config: config,
      data: data,
      fields: fields
    }).map(function (d) {
      return String(Math.round(d));
    });
    yAxisLongestLabel = pickLongestLabel(dataRangeStrings);
  } else {
    var measureNames = getVisibleMeasureNames(fields, config);
    var measureValues = data.flatMap(function (d) {
      var datumMeasureValues = Object.values(pick(d, measureNames));
      return datumMeasureValues.map(function (value) {
        return String(value);
      });
    });
    yAxisLongestLabel = pickLongestLabel(measureValues);
  }

  var _useMeasuredText2 = useMeasuredText(yAxisLongestLabel, {
    fontFamily: visxTheme.axisStyles.y.left.tickLabel.fontFamily || 'Roboto',
    fontSize: visxTheme.axisStyles.y.left.tickLabel.fontSize || '1rem'
  }),
      yAxisLongestLabelWidth = _useMeasuredText2.width;

  var yAxisLabelDx = renderYAxisTicks ? -yAxisLongestLabelWidth - 10 : -10;
  var yAxisValueFormat = getYAxisFormat(config);

  var YAxisWrapped = function YAxisWrapped() {
    var _config$y_axis2, _config$y_axis2$;

    return React.createElement(YAxis, {
      showTicks: renderYAxisTicks,
      fields: fields,
      label: (config === null || config === void 0 ? void 0 : (_config$y_axis2 = config.y_axis) === null || _config$y_axis2 === void 0 ? void 0 : (_config$y_axis2$ = _config$y_axis2[0]) === null || _config$y_axis2$ === void 0 ? void 0 : _config$y_axis2$.label) || undefined,
      labelDx: yAxisLabelDx,
      valueFormat: yAxisValueFormat
    });
  };

  var yAxisLabelWidth = renderYAxisTicks ? yAxisLongestLabelWidth + DEFAULT_MARGIN : DEFAULT_MARGIN;
  var chartMarginBottom = hasRotatedXAxisLabels ? angledLabelHypotenuse + DEFAULT_MARGIN : DEFAULT_MARGIN;
  var chartMarginLeft = hasRotatedXAxisLabels ? Math.max(angledLabelHypotenuse, yAxisLabelWidth) : yAxisLabelWidth;
  var chartMargin = {
    top: 0,
    right: 0,
    bottom: chartMarginBottom,
    left: chartMarginLeft
  };
  return {
    XAxis: XAxisWrapped,
    YAxis: YAxisWrapped,
    chartMargin: chartMargin
  };
};
//# sourceMappingURL=useAxis.js.map