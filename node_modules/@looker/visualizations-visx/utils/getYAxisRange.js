import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { getDataRange } from '@looker/visualizations-adapters';
export var getYAxisRange = function getYAxisRange(_ref) {
  var _config$y_axis, _config$y_axis$;

  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;

  var _ref2 = (config === null || config === void 0 ? void 0 : (_config$y_axis = config.y_axis) === null || _config$y_axis === void 0 ? void 0 : (_config$y_axis$ = _config$y_axis[0]) === null || _config$y_axis$ === void 0 ? void 0 : _config$y_axis$.range) || [],
      _ref3 = _slicedToArray(_ref2, 2),
      _ref3$ = _ref3[0],
      configMin = _ref3$ === void 0 ? 'auto' : _ref3$,
      _ref3$2 = _ref3[1],
      configMax = _ref3$2 === void 0 ? 'auto' : _ref3$2;

  var _getDataRange = getDataRange({
    config: config,
    data: data,
    fields: fields
  }),
      _getDataRange2 = _slicedToArray(_getDataRange, 2),
      dataMin = _getDataRange2[0],
      dataMax = _getDataRange2[1];

  var min = configMin === 'auto' ? Math.min(0, Math.floor(dataMin)) : Number(configMin);
  var max = configMax === 'auto' ? Math.max(0, Math.ceil(dataMax)) : Number(configMax);
  return [min, max];
};
//# sourceMappingURL=getYAxisRange.js.map