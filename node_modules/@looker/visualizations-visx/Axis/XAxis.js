import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from 'react';
import { Axis, ThemeContext as VisxThemeContext, DataContext } from '@visx/xychart';
import { Tick } from './Tick';
export var XAxis = function XAxis(_ref) {
  var fields = _ref.fields,
      label = _ref.label,
      labelDy = _ref.labelDy,
      showTicks = _ref.showTicks,
      tickAngle = _ref.tickAngle,
      tickTextAnchor = _ref.tickTextAnchor,
      tickSpace = _ref.tickSpace,
      valueFormat = _ref.valueFormat;
  var visxTheme = useContext(VisxThemeContext);

  var _useContext = useContext(DataContext),
      _useContext$width = _useContext.width,
      width = _useContext$width === void 0 ? 0 : _useContext$width;

  var numTicks = Math.floor(width / tickSpace);
  return React.createElement(Axis, {
    hideTicks: !showTicks,
    label: label,
    labelOffset: showTicks ? undefined : 0,
    labelProps: _objectSpread(_objectSpread({}, visxTheme.axisStyles.x.bottom.axisLabel), {}, {
      dy: labelDy
    }),
    orientation: "bottom",
    numTicks: numTicks,
    tickComponent: function tickComponent(tickProps) {
      return showTicks ? React.createElement(Tick, _extends({
        fields: fields,
        valueFormat: valueFormat
      }, tickProps)) : null;
    },
    tickLabelProps: function tickLabelProps() {
      return {
        angle: tickAngle,
        textAnchor: tickTextAnchor
      };
    }
  });
};
//# sourceMappingURL=XAxis.js.map