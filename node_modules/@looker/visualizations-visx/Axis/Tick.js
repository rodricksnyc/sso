var _excluded = ["formattedValue", "fields", "valueFormat"];
import "core-js/modules/es.string.trim.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { isNumeric } from '@looker/visualizations-adapters';
import { Text } from '@visx/text';
import numeral from 'numeral';
import React from 'react';
import { formatDateLabel } from '../utils';
export var MAX_TICK_LABEL_LENGTH = 20;
export var Tick = function Tick(_ref) {
  var formattedValue = _ref.formattedValue,
      fields = _ref.fields,
      valueFormat = _ref.valueFormat,
      tickProps = _objectWithoutProperties(_ref, _excluded);

  var isNumericTick = isNumeric(formattedValue);
  var label = formatDateLabel({
    dateString: formattedValue || '',
    fields: fields
  });
  var renderedLabel = label.length > MAX_TICK_LABEL_LENGTH ? "".concat(label.slice(0, MAX_TICK_LABEL_LENGTH).trim(), "\u2026") : label;
  return React.createElement(Text, tickProps, valueFormat && isNumericTick ? numeral(formattedValue).format(valueFormat) : renderedLabel);
};
//# sourceMappingURL=Tick.js.map