"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockSDKWithListeners = exports.sdkMethodColorCollectionListener = exports.sdkMethodCreateQueryListener = exports.sdkMethodLookmlModelExploreListener = exports.sdkMethodRunQueryListener = exports.sdkMethodDashboardListener = exports.sdkMethodQueryForSlugListener = exports.sdkMethodQueryListener = void 0;

var _visualizationsAdapters = require("@looker/visualizations-adapters");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const sdkMethodQueryListener = jest.fn();
exports.sdkMethodQueryListener = sdkMethodQueryListener;
const sdkMethodQueryForSlugListener = jest.fn();
exports.sdkMethodQueryForSlugListener = sdkMethodQueryForSlugListener;
const sdkMethodDashboardListener = jest.fn();
exports.sdkMethodDashboardListener = sdkMethodDashboardListener;
const sdkMethodRunQueryListener = jest.fn();
exports.sdkMethodRunQueryListener = sdkMethodRunQueryListener;
const sdkMethodLookmlModelExploreListener = jest.fn();
exports.sdkMethodLookmlModelExploreListener = sdkMethodLookmlModelExploreListener;
const sdkMethodCreateQueryListener = jest.fn();
exports.sdkMethodCreateQueryListener = sdkMethodCreateQueryListener;
const sdkMethodColorCollectionListener = jest.fn();
exports.sdkMethodColorCollectionListener = sdkMethodColorCollectionListener;

const mockSDKWithListeners = _objectSpread(_objectSpread({}, _visualizationsAdapters.mockSDK), {}, {
  color_collection: () => _visualizationsAdapters.mockSDK.color_collection('abcdefghijklmnop').then(result => {
    sdkMethodColorCollectionListener(result);
    return result;
  }),
  create_query: () => _visualizationsAdapters.mockSDK.create_query({}).then(result => {
    sdkMethodCreateQueryListener(result);
    return result;
  }),
  dashboard: () => _visualizationsAdapters.mockSDK.dashboard('1').then(result => {
    sdkMethodDashboardListener(result);
    return result;
  }),
  lookml_model_explore: () => _visualizationsAdapters.mockSDK.lookml_model_explore('thelook', 'orders').then(result => {
    sdkMethodLookmlModelExploreListener(result);
    return result;
  }),
  query: () => _visualizationsAdapters.mockSDK.query('1').then(result => {
    sdkMethodQueryListener(result);
    return result;
  }),
  query_for_slug: () => _visualizationsAdapters.mockSDK.query_for_slug('qz123').then(result => {
    sdkMethodQueryForSlugListener(result);
    return result;
  }),
  run_query: () => _visualizationsAdapters.mockSDK.run_query({
    query_id: '1',
    result_format: 'json_detail'
  }).then(result => {
    sdkMethodRunQueryListener(result);
    return result;
  })
});

exports.mockSDKWithListeners = mockSDKWithListeners;
//# sourceMappingURL=mockSDKWithListeners.js.map