"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useQueryData = void 0;

require("core-js/modules/es.promise.js");

var _react = require("react");

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _swr = _interopRequireDefault(require("swr"));

var _utils = require("../utils");

var _useSDK = require("./useSDK");

var _useDataState = require("./useDataState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fetchQueryData = (0, _memoize.default)(function () {
  var _ref = _asyncToGenerator(function* (id, sdk, agentTag) {
    const result = yield sdk.run_query({
      query_id: String(id),
      result_format: `json_detail`
    }, {
      agentTag
    });
    return result;
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}());

const useQueryData = (id, agentTag) => {
  const sdk = (0, _useSDK.useSDK)();

  const _DataState$useContain = _useDataState.DataState.useContainer(),
        getById = _DataState$useContain.getById,
        setById = _DataState$useContain.setById;

  const data = getById(id, 'data');
  const fields = getById(id, 'fields');
  const pivots = getById(id, 'pivots');
  const totals = getById(id, 'totals');

  const fetcher = function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (id > 0 && (0, _isEmpty.default)(data)) {
        return fetchQueryData(id, sdk, agentTag);
      }

      return undefined;
    });

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  const _useSWR = (0, _swr.default)(`useQueryData-${id}`, fetcher),
        SWRData = _useSWR.data,
        isValidating = _useSWR.isValidating;

  (0, _react.useEffect)(() => {
    const _ref3 = SWRData !== null && SWRData !== void 0 && SWRData.ok ? SWRData.value : {},
          rawData = _ref3.data,
          rawFields = _ref3.fields,
          rawPivots = _ref3.pivots,
          rawTotals = _ref3.totals_data;

    if (id && !(0, _isEmpty.default)(rawData) && !(0, _isEqual.default)(rawData, data)) {
      setById(id, _objectSpread(_objectSpread(_objectSpread({
        data: rawData
      }, rawFields ? {
        fields: rawFields
      } : {}), rawPivots ? {
        pivots: rawPivots
      } : {}), rawTotals ? {
        totals: rawTotals
      } : {}));
    }
  }, [id, SWRData, setById, data]);
  const normalizedPivots = (0, _visualizationsAdapters.useNormalizedPivotLabels)(pivots);
  const normalizedFields = normalizedPivots && fields ? (0, _visualizationsAdapters.buildPivotFields)({
    fields,
    pivots: normalizedPivots
  }) : fields;
  const normalizedData = pivots && data && fields ? (0, _visualizationsAdapters.tabularPivotResponse)({
    data,
    fields,
    pivots
  }) : (0, _visualizationsAdapters.tabularResponse)(data || []);
  const normalizedTotals = totals ? (0, _visualizationsAdapters.formatTotals)(totals) : undefined;
  return _objectSpread({
    data: normalizedData,
    fields: normalizedFields,
    isOK: !!data,
    isPending: isValidating,
    totals: normalizedTotals
  }, (0, _utils.getErrorResponse)(SWRData));
};

exports.useQueryData = useQueryData;
//# sourceMappingURL=useQueryData.js.map