"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateQuery = void 0;

require("core-js/modules/es.promise.js");

var _react = require("react");

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _swr = _interopRequireDefault(require("swr"));

var _utils = require("../utils");

var _useSDK = require("./useSDK");

var _useDataState = require("./useDataState");

const _excluded = ["id"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const createQuery = (0, _memoize.default)(function () {
  var _ref = _asyncToGenerator(function* (newQuery, sdk) {
    const result = yield sdk.create_query(newQuery);
    return result;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

const useCreateQuery = newQuery => {
  const sdk = (0, _useSDK.useSDK)();

  const _DataState$useContain = _useDataState.DataState.useContainer(),
        setById = _DataState$useContain.setById;

  const fetcher = function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (newQuery) {
        return createQuery(newQuery, sdk);
      }

      return undefined;
    });

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  const _useSWR = (0, _swr.default)(JSON.stringify(newQuery), fetcher),
        SWRData = _useSWR.data,
        isValidating = _useSWR.isValidating;

  const _ref3 = (SWRData === null || SWRData === void 0 ? void 0 : SWRData.value) || {},
        draftId = _ref3.id,
        draftMetadata = _objectWithoutProperties(_ref3, _excluded);

  (0, _react.useEffect)(() => {
    setById(Number(draftId), {
      metadata: draftMetadata
    });
  }, [draftId]);
  return _objectSpread({
    isOK: (0, _utils.isSuccessResponse)(SWRData) || typeof newQuery === 'undefined',
    isPending: isValidating,
    queryId: draftId ? Number(draftId) : undefined
  }, (0, _utils.getErrorResponse)(SWRData));
};

exports.useCreateQuery = useCreateQuery;
//# sourceMappingURL=useCreateQuery.js.map