"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFieldGroups = void 0;

require("core-js/modules/es.promise.js");

var _react = require("react");

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _swr = _interopRequireDefault(require("swr"));

var _utils = require("../utils");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fetchModelExplore = (0, _memoize.default)(function () {
  var _ref = _asyncToGenerator(function* (model, explore, sdk) {
    const result = yield sdk.lookml_model_explore(model, explore, 'fields');
    return result;
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}());

const groupFields = fields => {
  if (!fields) return {};
  return fields.reduce((acc, dimension) => {
    const view = dimension.view;
    if (!view) return acc;

    if (!acc[view]) {
      acc[view] = [];
    }

    acc[view].push(dimension);
    return acc;
  }, {});
};

const useFieldGroups = id => {
  const sdk = (0, _.useSDK)();

  const _DataState$useContain = _.DataState.useContainer(),
        setModelExplore = _DataState$useContain.setModelExplore,
        getModelExplore = _DataState$useContain.getModelExplore;

  const _useQueryMetadata = (0, _.useQueryMetadata)(id),
        _useQueryMetadata$met = _useQueryMetadata.metadata,
        model = _useQueryMetadata$met.model,
        view = _useQueryMetadata$met.view;

  const allModelFields = getModelExplore(model, view);

  const fetcher = function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (id > 0 && model && view && (0, _isEmpty.default)(allModelFields)) {
        return fetchModelExplore(model, view, sdk);
      }

      return undefined;
    });

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  const _useSWR = (0, _swr.default)(`useFieldGroups-${model}-${view}`, fetcher),
        SWRData = _useSWR.data,
        isValidating = _useSWR.isValidating;

  (0, _react.useEffect)(() => {
    const _ref3 = (SWRData === null || SWRData === void 0 ? void 0 : SWRData.ok) && SWRData.value || {},
          draftModelFields = _ref3.fields;

    if (id && model && view && draftModelFields && !(0, _isEqual.default)(draftModelFields, allModelFields)) {
      setModelExplore(model, view, draftModelFields);
    }
  }, [id, SWRData, allModelFields, model, setModelExplore, view]);
  const fieldGroups = allModelFields !== null && allModelFields !== void 0 && allModelFields.dimensions ? groupFields(allModelFields === null || allModelFields === void 0 ? void 0 : allModelFields.dimensions) : {};
  return _objectSpread({
    fieldGroups,
    isOK: !!fieldGroups,
    isPending: isValidating
  }, (0, _utils.getErrorResponse)(SWRData));
};

exports.useFieldGroups = useFieldGroups;
//# sourceMappingURL=useFieldGroups.js.map