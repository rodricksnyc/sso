"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useQueryMetadata = void 0;

require("core-js/modules/es.promise.js");

var _react = require("react");

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _swr = _interopRequireDefault(require("swr"));

var _utils = require("../utils");

var _useSDK = require("./useSDK");

var _useDataState = require("./useDataState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fetchQueryMetadata = (0, _memoize.default)(function () {
  var _ref = _asyncToGenerator(function* (requestId, sdk) {
    const result = yield sdk.query(String(requestId));
    return result;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

const useQueryMetadata = id => {
  const sdk = (0, _useSDK.useSDK)();

  const _DataState$useContain = _useDataState.DataState.useContainer(),
        getById = _DataState$useContain.getById,
        setById = _DataState$useContain.setById;

  const metadata = (0, _react.useMemo)(() => getById(id, 'metadata') || {}, [id, getById]);

  const fetcher = function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (id > 0 && ((0, _isEmpty.default)(metadata.vis_config) || !metadata.model || !metadata.view)) {
        return fetchQueryMetadata(id, sdk);
      }

      return undefined;
    });

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  const _useSWR = (0, _swr.default)(`useQueryMetadata-${id}`, fetcher),
        SWRData = _useSWR.data,
        isValidating = _useSWR.isValidating;

  (0, _react.useEffect)(() => {
    const SWRValue = (0, _utils.isSuccessResponse)(SWRData) ? SWRData.value : {};
    const draftConfig = SWRValue.vis_config,
          draftModel = SWRValue.model,
          draftView = SWRValue.view;

    if (id && (!(0, _isEmpty.default)(draftConfig) && !(0, _isEqual.default)(metadata.vis_config, draftConfig) || draftModel && draftModel !== metadata.model || draftView && draftView !== metadata.view)) {
      const draftQuery = _objectSpread(_objectSpread({}, metadata), SWRValue);

      setById(id, {
        metadata: draftQuery
      });
    }
  }, [id, SWRData, metadata, setById]);
  return _objectSpread({
    isOK: !!metadata,
    isPending: isValidating,
    metadata
  }, (0, _utils.getErrorResponse)(SWRData));
};

exports.useQueryMetadata = useQueryMetadata;
//# sourceMappingURL=useQueryMetadata.js.map