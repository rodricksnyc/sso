"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataState = void 0;

var _react = require("react");

var _unstatedNext = require("unstated-next");

var _set = _interopRequireDefault(require("lodash/set"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const setModelExplore = (state, action) => {
  const _action$payload = action.payload,
        model = _action$payload.model,
        view = _action$payload.view,
        fieldset = _action$payload.fieldset;

  const draftModelExplore = _objectSpread({}, state.modelExplore);

  (0, _set.default)(draftModelExplore, [model, view], fieldset);
  return draftModelExplore;
};

const setById = (state, action) => {
  const _action$payload2 = action.payload,
        id = _action$payload2.id,
        queryInfo = _action$payload2.queryInfo;
  return _objectSpread(_objectSpread({}, state.byId), {}, {
    [id]: _objectSpread(_objectSpread({}, state.byId[id]), queryInfo)
  });
};

const reducer = (state, action) => {
  switch (action.type) {
    case 'update_by_slug':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action),
        slugIdMap: _objectSpread(_objectSpread({}, state.slugIdMap), {}, {
          [action.payload.slug]: action.payload.id
        })
      });

    case 'update_by_id':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action)
      });

    case 'update_by_dashboard_id':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action),
        dashboardIdMap: _objectSpread(_objectSpread({}, state.dashboardIdMap), {}, {
          [action.payload.dashboardId]: action.payload.id
        })
      });

    case 'update_model_view':
      return _objectSpread(_objectSpread({}, state), {}, {
        modelExplore: setModelExplore(state, action)
      });

    default:
      return state;
  }
};

const defaultInitialState = {
  byId: {},
  dashboardIdMap: {},
  modelExplore: {},
  slugIdMap: {}
};

const useDataState = (initialState = defaultInitialState) => {
  const _useReducer = (0, _react.useReducer)(reducer, initialState),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        _useReducer2$ = _useReducer2[0],
        dashboardIdMap = _useReducer2$.dashboardIdMap,
        slugIdMap = _useReducer2$.slugIdMap,
        byId = _useReducer2$.byId,
        modelExplore = _useReducer2$.modelExplore,
        dispatch = _useReducer2[1];

  const getIdFromDashboard = dashboardId => dashboardId && dashboardIdMap[dashboardId];

  const getIdFromSlug = slug => slugIdMap[slug];

  const getById = (id, key) => {
    var _byId$id;

    return (_byId$id = byId[id]) === null || _byId$id === void 0 ? void 0 : _byId$id[key];
  };

  const setById = (id, queryInfo) => dispatch({
    payload: {
      id,
      queryInfo
    },
    type: 'update_by_id'
  });

  const setBySlug = (slug, id, queryInfo) => dispatch({
    payload: {
      id,
      queryInfo,
      slug
    },
    type: 'update_by_slug'
  });

  const setByDashboardId = (dashboardId, queryId, queryInfo) => {
    dispatch({
      payload: {
        dashboardId,
        id: queryId,
        queryInfo
      },
      type: 'update_by_dashboard_id'
    });
  };

  const setModelExplore = (model, view, fieldset) => dispatch({
    payload: {
      fieldset,
      model,
      view
    },
    type: 'update_model_view'
  });

  const getModelExplore = (model, view) => {
    var _modelExplore$model;

    return model && view ? (_modelExplore$model = modelExplore[model]) === null || _modelExplore$model === void 0 ? void 0 : _modelExplore$model[view] : undefined;
  };

  return {
    getById,
    getIdFromDashboard,
    getIdFromSlug,
    getModelExplore,
    setByDashboardId,
    setById,
    setBySlug,
    setModelExplore
  };
};

const DataState = (0, _unstatedNext.createContainer)(useDataState);
exports.DataState = DataState;
//# sourceMappingURL=useDataState.js.map