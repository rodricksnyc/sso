"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useVisConfig = void 0;

var _merge = _interopRequireDefault(require("lodash/merge"));

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _useColorPalette2 = require("./useColorPalette");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const useVisConfig = (id, configOverrides) => {
  const _useQueryMetadata = (0, _.useQueryMetadata)(id),
        vis_config = _useQueryMetadata.metadata.vis_config,
        isMetadataOK = _useQueryMetadata.isOK,
        error = _useQueryMetadata.error,
        isPending = _useQueryMetadata.isPending;

  const _vis_config$configOve = _objectSpread(_objectSpread({}, vis_config), configOverrides),
        _vis_config$configOve2 = _vis_config$configOve.type,
        type = _vis_config$configOve2 === void 0 ? _visualizationsAdapters.CHART_TYPE_MAP.default : _vis_config$configOve2;

  const _useQueryData = (0, _.useQueryData)(id, (0, _visualizationsAdapters.buildTrackingTag)(_visualizationsAdapters.CHART_TYPE_MAP[type])),
        data = _useQueryData.data,
        fields = _useQueryData.fields;

  const _useColorPalette = (0, _useColorPalette2.useColorPalette)(vis_config === null || vis_config === void 0 ? void 0 : vis_config.color_application),
        colorPalette = _useColorPalette.colorPalette,
        isColorPalettePending = _useColorPalette.isPending,
        isColorPaletteOK = _useColorPalette.isOK;

  const configWithOverrides = (0, _merge.default)({}, vis_config, {
    default_series_colors: colorPalette
  }, configOverrides);
  const transformedConfig = (0, _visualizationsAdapters.buildChartConfig)({
    config: configWithOverrides,
    data,
    fields
  });
  return _objectSpread({
    isOK: isMetadataOK && isColorPaletteOK,
    isPending: isPending || isColorPalettePending,
    visConfig: transformedConfig
  }, error ? {
    error
  } : {});
};

exports.useVisConfig = useVisConfig;
//# sourceMappingURL=useVisConfig.js.map