"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useColorPalette = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

var _find = _interopRequireDefault(require("lodash/find"));

var _swr = _interopRequireDefault(require("swr"));

var _visualizationsAdapters = require("@looker/visualizations-adapters");

var _utils = require("../utils");

var _useSDK = require("./useSDK");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const fetchColorCollection = function () {
  var _ref = _asyncToGenerator(function* (id, sdk) {
    const result = yield sdk.color_collection(id);
    return result;
  });

  return function fetchColorCollection(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const isDiscretePalette = palette => {
  return 'colors' in palette;
};

const isContinuousPalette = palette => {
  return 'stops' in palette;
};

const normalizePalette = (palette = {}) => {
  if (isDiscretePalette(palette)) {
    return palette;
  } else if (isContinuousPalette(palette)) {
    var _palette$stops;

    return {
      colors: (_palette$stops = palette.stops) === null || _palette$stops === void 0 ? void 0 : _palette$stops.map((stop, i) => stop.color ? stop.color : _visualizationsAdapters.DEFAULT_SERIES_COLORS[i % _visualizationsAdapters.DEFAULT_SERIES_COLORS.length])
    };
  } else {
    return {
      colors: _visualizationsAdapters.DEFAULT_SERIES_COLORS
    };
  }
};

const useColorPalette = colorApplication => {
  const _ref2 = colorApplication || {},
        collection_id = _ref2.collection_id,
        palette_id = _ref2.palette_id,
        custom = _ref2.custom;

  const sdk = (0, _useSDK.useSDK)();

  const fetcher = function () {
    var _ref3 = _asyncToGenerator(function* () {
      if (collection_id) {
        return fetchColorCollection(collection_id, sdk);
      }

      return undefined;
    });

    return function fetcher() {
      return _ref3.apply(this, arguments);
    };
  }();

  const _useSWR = (0, _swr.default)(collection_id, fetcher),
        data = _useSWR.data,
        isValidating = _useSWR.isValidating;

  const _ref4 = (data === null || data === void 0 ? void 0 : data.ok) === true ? data : {
    value: {}
  },
        _ref4$value = _ref4.value,
        _ref4$value$categoric = _ref4$value.categoricalPalettes,
        categoricalPalettes = _ref4$value$categoric === void 0 ? [] : _ref4$value$categoric,
        _ref4$value$diverging = _ref4$value.divergingPalettes,
        divergingPalettes = _ref4$value$diverging === void 0 ? [] : _ref4$value$diverging,
        _ref4$value$sequentia = _ref4$value.sequentialPalettes,
        sequentialPalettes = _ref4$value$sequentia === void 0 ? [] : _ref4$value$sequentia;

  const allPalettes = [...categoricalPalettes, ...divergingPalettes, ...sequentialPalettes, custom];
  const paletteConfig = (0, _find.default)(allPalettes, {
    id: palette_id !== null && palette_id !== void 0 ? palette_id : custom === null || custom === void 0 ? void 0 : custom.id
  });
  const colorPalette = normalizePalette(paletteConfig).colors;
  return _objectSpread({
    colorPalette,
    isOK: !(colorApplication && (0, _utils.isErrorResponse)(data)) || !!colorPalette,
    isPending: isValidating
  }, (0, _utils.getErrorResponse)(data));
};

exports.useColorPalette = useColorPalette;
//# sourceMappingURL=useColorPalette.js.map