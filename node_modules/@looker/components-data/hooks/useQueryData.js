import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { useEffect } from 'react';
import { useNormalizedPivotLabels, buildPivotFields, tabularPivotResponse, tabularResponse, formatTotals } from '@looker/visualizations-adapters';
import memoize from 'lodash/memoize';
import isEmpty from 'lodash/isEmpty';
import isEqual from 'lodash/isEqual';
import useSWR from 'swr';
import { getErrorResponse } from '../utils';
import { useSDK } from './useSDK';
import { DataState } from './useDataState';
var fetchQueryData = memoize(function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(id, sdk, agentTag) {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return sdk.run_query({
              query_id: String(id),
              result_format: "json_detail"
            }, {
              agentTag: agentTag
            });

          case 2:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}());
export var useQueryData = function useQueryData(id, agentTag) {
  var sdk = useSDK();

  var _DataState$useContain = DataState.useContainer(),
      getById = _DataState$useContain.getById,
      setById = _DataState$useContain.setById;

  var data = getById(id, 'data');
  var fields = getById(id, 'fields');
  var pivots = getById(id, 'pivots');
  var totals = getById(id, 'totals');

  var fetcher = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(id > 0 && isEmpty(data))) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", fetchQueryData(id, sdk, agentTag));

            case 2:
              return _context2.abrupt("return", undefined);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  var _useSWR = useSWR("useQueryData-".concat(id), fetcher),
      SWRData = _useSWR.data,
      isValidating = _useSWR.isValidating;

  useEffect(function () {
    var _ref3 = SWRData !== null && SWRData !== void 0 && SWRData.ok ? SWRData.value : {},
        rawData = _ref3.data,
        rawFields = _ref3.fields,
        rawPivots = _ref3.pivots,
        rawTotals = _ref3.totals_data;

    if (id && !isEmpty(rawData) && !isEqual(rawData, data)) {
      setById(id, _objectSpread(_objectSpread(_objectSpread({
        data: rawData
      }, rawFields ? {
        fields: rawFields
      } : {}), rawPivots ? {
        pivots: rawPivots
      } : {}), rawTotals ? {
        totals: rawTotals
      } : {}));
    }
  }, [id, SWRData, setById, data]);
  var normalizedPivots = useNormalizedPivotLabels(pivots);
  var normalizedFields = normalizedPivots && fields ? buildPivotFields({
    fields: fields,
    pivots: normalizedPivots
  }) : fields;
  var normalizedData = pivots && data && fields ? tabularPivotResponse({
    data: data,
    fields: fields,
    pivots: pivots
  }) : tabularResponse(data || []);
  var normalizedTotals = totals ? formatTotals(totals) : undefined;
  return _objectSpread({
    data: normalizedData,
    fields: normalizedFields,
    isOK: !!data,
    isPending: isValidating,
    totals: normalizedTotals
  }, getErrorResponse(SWRData));
};
//# sourceMappingURL=useQueryData.js.map