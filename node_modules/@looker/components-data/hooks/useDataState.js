import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useReducer } from 'react';
import { createContainer } from 'unstated-next';
import set from 'lodash/set';

var setModelExplore = function setModelExplore(state, action) {
  var _action$payload = action.payload,
      model = _action$payload.model,
      view = _action$payload.view,
      fieldset = _action$payload.fieldset;

  var draftModelExplore = _objectSpread({}, state.modelExplore);

  set(draftModelExplore, [model, view], fieldset);
  return draftModelExplore;
};

var setById = function setById(state, action) {
  var _action$payload2 = action.payload,
      id = _action$payload2.id,
      queryInfo = _action$payload2.queryInfo;
  return _objectSpread(_objectSpread({}, state.byId), {}, _defineProperty({}, id, _objectSpread(_objectSpread({}, state.byId[id]), queryInfo)));
};

var reducer = function reducer(state, action) {
  switch (action.type) {
    case 'update_by_slug':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action),
        slugIdMap: _objectSpread(_objectSpread({}, state.slugIdMap), {}, _defineProperty({}, action.payload.slug, action.payload.id))
      });

    case 'update_by_id':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action)
      });

    case 'update_by_dashboard_id':
      return _objectSpread(_objectSpread({}, state), {}, {
        byId: setById(state, action),
        dashboardIdMap: _objectSpread(_objectSpread({}, state.dashboardIdMap), {}, _defineProperty({}, action.payload.dashboardId, action.payload.id))
      });

    case 'update_model_view':
      return _objectSpread(_objectSpread({}, state), {}, {
        modelExplore: setModelExplore(state, action)
      });

    default:
      return state;
  }
};

var defaultInitialState = {
  byId: {},
  dashboardIdMap: {},
  modelExplore: {},
  slugIdMap: {}
};

var useDataState = function useDataState() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultInitialState;

  var _useReducer = useReducer(reducer, initialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      dashboardIdMap = _useReducer2$.dashboardIdMap,
      slugIdMap = _useReducer2$.slugIdMap,
      byId = _useReducer2$.byId,
      modelExplore = _useReducer2$.modelExplore,
      dispatch = _useReducer2[1];

  var getIdFromDashboard = function getIdFromDashboard(dashboardId) {
    return dashboardId && dashboardIdMap[dashboardId];
  };

  var getIdFromSlug = function getIdFromSlug(slug) {
    return slugIdMap[slug];
  };

  var getById = function getById(id, key) {
    var _byId$id;

    return (_byId$id = byId[id]) === null || _byId$id === void 0 ? void 0 : _byId$id[key];
  };

  var setById = function setById(id, queryInfo) {
    return dispatch({
      payload: {
        id: id,
        queryInfo: queryInfo
      },
      type: 'update_by_id'
    });
  };

  var setBySlug = function setBySlug(slug, id, queryInfo) {
    return dispatch({
      payload: {
        id: id,
        queryInfo: queryInfo,
        slug: slug
      },
      type: 'update_by_slug'
    });
  };

  var setByDashboardId = function setByDashboardId(dashboardId, queryId, queryInfo) {
    dispatch({
      payload: {
        dashboardId: dashboardId,
        id: queryId,
        queryInfo: queryInfo
      },
      type: 'update_by_dashboard_id'
    });
  };

  var setModelExplore = function setModelExplore(model, view, fieldset) {
    return dispatch({
      payload: {
        fieldset: fieldset,
        model: model,
        view: view
      },
      type: 'update_model_view'
    });
  };

  var getModelExplore = function getModelExplore(model, view) {
    var _modelExplore$model;

    return model && view ? (_modelExplore$model = modelExplore[model]) === null || _modelExplore$model === void 0 ? void 0 : _modelExplore$model[view] : undefined;
  };

  return {
    getById: getById,
    getIdFromDashboard: getIdFromDashboard,
    getIdFromSlug: getIdFromSlug,
    getModelExplore: getModelExplore,
    setByDashboardId: setByDashboardId,
    setById: setById,
    setBySlug: setBySlug,
    setModelExplore: setModelExplore
  };
};

export var DataState = createContainer(useDataState);
//# sourceMappingURL=useDataState.js.map