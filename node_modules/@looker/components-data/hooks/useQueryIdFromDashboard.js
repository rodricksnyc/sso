var _excluded = ["id"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { useEffect } from 'react';
import memoize from 'lodash/memoize';
import useSWR from 'swr';
import { getErrorResponse } from '../utils';
import { DataState } from './useDataState';
import { useSDK } from './useSDK';
var fetchDashboard = memoize(function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(requestId, sdk) {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return sdk.dashboard(String(requestId), 'dashboard_elements');

          case 2:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
export var useQueryIdFromDashboard = function useQueryIdFromDashboard(dashboardId) {
  var sdk = useSDK();

  var _DataState$useContain = DataState.useContainer(),
      getIdFromDashboard = _DataState$useContain.getIdFromDashboard,
      setByDashboardId = _DataState$useContain.setByDashboardId;

  var queryId = getIdFromDashboard(dashboardId);

  var fetcher = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(dashboardId && !queryId)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", fetchDashboard(dashboardId, sdk));

            case 2:
              return _context2.abrupt("return", undefined);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function fetcher() {
      return _ref2.apply(this, arguments);
    };
  }();

  var _useSWR = useSWR("useQueryIdFromDashboard-".concat(dashboardId), fetcher),
      SWRData = _useSWR.data,
      isValidating = _useSWR.isValidating;

  useEffect(function () {
    var _SWRData$value, _SWRData$value$dashbo, _SWRData$value$dashbo2;

    var firstTile = SWRData !== null && SWRData !== void 0 && SWRData.ok ? SWRData === null || SWRData === void 0 ? void 0 : (_SWRData$value = SWRData.value) === null || _SWRData$value === void 0 ? void 0 : (_SWRData$value$dashbo = _SWRData$value.dashboard_elements) === null || _SWRData$value$dashbo === void 0 ? void 0 : (_SWRData$value$dashbo2 = _SWRData$value$dashbo[0]) === null || _SWRData$value$dashbo2 === void 0 ? void 0 : _SWRData$value$dashbo2.query : undefined;

    var _ref3 = firstTile || {},
        id = _ref3.id,
        query = _objectWithoutProperties(_ref3, _excluded);

    if (dashboardId && id && Number(id) !== queryId) {
      setByDashboardId(dashboardId, Number(id), {
        metadata: query
      });
    }
  }, [SWRData, dashboardId, setByDashboardId, queryId]);
  return _objectSpread({
    isOK: !!queryId || typeof dashboardId === 'undefined',
    isPending: isValidating,
    queryId: queryId
  }, getErrorResponse(SWRData));
};
//# sourceMappingURL=useQueryIdFromDashboard.js.map