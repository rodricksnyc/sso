import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import merge from 'lodash/merge';
import { buildChartConfig, buildTrackingTag, CHART_TYPE_MAP } from '@looker/visualizations-adapters';
import { useColorPalette } from './useColorPalette';
import { useQueryData, useQueryMetadata } from '.';
export var useVisConfig = function useVisConfig(id, configOverrides) {
  var _useQueryMetadata = useQueryMetadata(id),
      vis_config = _useQueryMetadata.metadata.vis_config,
      isMetadataOK = _useQueryMetadata.isOK,
      error = _useQueryMetadata.error,
      isPending = _useQueryMetadata.isPending;

  var _vis_config$configOve = _objectSpread(_objectSpread({}, vis_config), configOverrides),
      _vis_config$configOve2 = _vis_config$configOve.type,
      type = _vis_config$configOve2 === void 0 ? CHART_TYPE_MAP["default"] : _vis_config$configOve2;

  var _useQueryData = useQueryData(id, buildTrackingTag(CHART_TYPE_MAP[type])),
      data = _useQueryData.data,
      fields = _useQueryData.fields;

  var _useColorPalette = useColorPalette(vis_config === null || vis_config === void 0 ? void 0 : vis_config.color_application),
      colorPalette = _useColorPalette.colorPalette,
      isColorPalettePending = _useColorPalette.isPending,
      isColorPaletteOK = _useColorPalette.isOK;

  var configWithOverrides = merge({}, vis_config, {
    default_series_colors: colorPalette
  }, configOverrides);
  var transformedConfig = buildChartConfig({
    config: configWithOverrides,
    data: data,
    fields: fields
  });
  return _objectSpread({
    isOK: isMetadataOK && isColorPaletteOK,
    isPending: isPending || isColorPalettePending,
    visConfig: transformedConfig
  }, error ? {
    error: error
  } : {});
};
//# sourceMappingURL=useVisConfig.js.map