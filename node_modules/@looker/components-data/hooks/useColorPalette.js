function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.promise.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "regenerator-runtime/runtime.js";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import find from 'lodash/find';
import useSWR from 'swr';
import { DEFAULT_SERIES_COLORS } from '@looker/visualizations-adapters';
import { getErrorResponse, isErrorResponse } from '../utils';
import { useSDK } from './useSDK';

var fetchColorCollection = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(id, sdk) {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return sdk.color_collection(id);

          case 2:
            result = _context.sent;
            return _context.abrupt("return", result);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchColorCollection(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var isDiscretePalette = function isDiscretePalette(palette) {
  return 'colors' in palette;
};

var isContinuousPalette = function isContinuousPalette(palette) {
  return 'stops' in palette;
};

var normalizePalette = function normalizePalette() {
  var palette = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (isDiscretePalette(palette)) {
    return palette;
  } else if (isContinuousPalette(palette)) {
    var _palette$stops;

    return {
      colors: (_palette$stops = palette.stops) === null || _palette$stops === void 0 ? void 0 : _palette$stops.map(function (stop, i) {
        return stop.color ? stop.color : DEFAULT_SERIES_COLORS[i % DEFAULT_SERIES_COLORS.length];
      })
    };
  } else {
    return {
      colors: DEFAULT_SERIES_COLORS
    };
  }
};

export var useColorPalette = function useColorPalette(colorApplication) {
  var _ref2 = colorApplication || {},
      collection_id = _ref2.collection_id,
      palette_id = _ref2.palette_id,
      custom = _ref2.custom;

  var sdk = useSDK();

  var fetcher = function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!collection_id) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", fetchColorCollection(collection_id, sdk));

            case 2:
              return _context2.abrupt("return", undefined);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function fetcher() {
      return _ref3.apply(this, arguments);
    };
  }();

  var _useSWR = useSWR(collection_id, fetcher),
      data = _useSWR.data,
      isValidating = _useSWR.isValidating;

  var _ref4 = (data === null || data === void 0 ? void 0 : data.ok) === true ? data : {
    value: {}
  },
      _ref4$value = _ref4.value,
      _ref4$value$categoric = _ref4$value.categoricalPalettes,
      categoricalPalettes = _ref4$value$categoric === void 0 ? [] : _ref4$value$categoric,
      _ref4$value$diverging = _ref4$value.divergingPalettes,
      divergingPalettes = _ref4$value$diverging === void 0 ? [] : _ref4$value$diverging,
      _ref4$value$sequentia = _ref4$value.sequentialPalettes,
      sequentialPalettes = _ref4$value$sequentia === void 0 ? [] : _ref4$value$sequentia;

  var allPalettes = [].concat(_toConsumableArray(categoricalPalettes), _toConsumableArray(divergingPalettes), _toConsumableArray(sequentialPalettes), [custom]);
  var paletteConfig = find(allPalettes, {
    id: palette_id !== null && palette_id !== void 0 ? palette_id : custom === null || custom === void 0 ? void 0 : custom.id
  });
  var colorPalette = normalizePalette(paletteConfig).colors;
  return _objectSpread({
    colorPalette: colorPalette,
    isOK: !(colorApplication && isErrorResponse(data)) || !!colorPalette,
    isPending: isValidating
  }, getErrorResponse(data));
};
//# sourceMappingURL=useColorPalette.js.map