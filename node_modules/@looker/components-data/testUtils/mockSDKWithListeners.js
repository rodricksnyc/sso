import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mockSDK } from '@looker/visualizations-adapters';
export var sdkMethodQueryListener = jest.fn();
export var sdkMethodQueryForSlugListener = jest.fn();
export var sdkMethodDashboardListener = jest.fn();
export var sdkMethodRunQueryListener = jest.fn();
export var sdkMethodLookmlModelExploreListener = jest.fn();
export var sdkMethodCreateQueryListener = jest.fn();
export var sdkMethodColorCollectionListener = jest.fn();
export var mockSDKWithListeners = _objectSpread(_objectSpread({}, mockSDK), {}, {
  color_collection: function color_collection() {
    return mockSDK.color_collection('abcdefghijklmnop').then(function (result) {
      sdkMethodColorCollectionListener(result);
      return result;
    });
  },
  create_query: function create_query() {
    return mockSDK.create_query({}).then(function (result) {
      sdkMethodCreateQueryListener(result);
      return result;
    });
  },
  dashboard: function dashboard() {
    return mockSDK.dashboard('1').then(function (result) {
      sdkMethodDashboardListener(result);
      return result;
    });
  },
  lookml_model_explore: function lookml_model_explore() {
    return mockSDK.lookml_model_explore('thelook', 'orders').then(function (result) {
      sdkMethodLookmlModelExploreListener(result);
      return result;
    });
  },
  query: function query() {
    return mockSDK.query('1').then(function (result) {
      sdkMethodQueryListener(result);
      return result;
    });
  },
  query_for_slug: function query_for_slug() {
    return mockSDK.query_for_slug('qz123').then(function (result) {
      sdkMethodQueryForSlugListener(result);
      return result;
    });
  },
  run_query: function run_query() {
    return mockSDK.run_query({
      query_id: '1',
      result_format: 'json_detail'
    }).then(function (result) {
      sdkMethodRunQueryListener(result);
      return result;
    });
  }
});
//# sourceMappingURL=mockSDKWithListeners.js.map