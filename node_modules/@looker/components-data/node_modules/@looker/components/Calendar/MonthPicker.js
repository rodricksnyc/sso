var _excluded = ["className", "date", "isTodaysMonth", "locale", "monthNumber", "onMonthClick", "selected", "selectedMonth", "style"],
    _excluded2 = ["callbacks"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback } from 'react';
import styled from 'styled-components';
import pick from 'lodash/pick';
import { rippleHandlerKeys, rippleStyle, useBoundedRipple, useRippleHandlers } from '../Ripple';
import { isThisMonth } from './utils/dateConfirmations';
export var MonthPicker = styled(function (_ref) {
  var _locale$localize;

  var className = _ref.className,
      _ref$date = _ref.date,
      date = _ref$date === void 0 ? new Date() : _ref$date,
      isTodaysMonth = _ref.isTodaysMonth,
      locale = _ref.locale,
      monthNumber = _ref.monthNumber,
      onMonthClick = _ref.onMonthClick,
      selected = _ref.selected,
      selectedMonth = _ref.selectedMonth,
      style = _ref.style,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useBoundedRipple = useBoundedRipple({
    className: className,
    color: 'neutral',
    style: style
  }),
      callbacks = _useBoundedRipple.callbacks,
      rippleProps = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(restProps, rippleHandlerKeys)), restProps.disabled);
  var isMonth = selectedMonth && isThisMonth(selectedMonth, monthNumber, date);
  isTodaysMonth = isTodaysMonth && isThisMonth(new Date(), monthNumber, date);
  return React.createElement("button", _extends({
    "aria-current": isTodaysMonth,
    "aria-selected": isMonth,
    type: "button",
    onClick: useCallback(function () {
      return onMonthClick(monthNumber);
    }, [monthNumber, onMonthClick])
  }, restProps, rippleProps, rippleHandlers), (_locale$localize = locale.localize) === null || _locale$localize === void 0 ? void 0 : _locale$localize.month(monthNumber, {
    width: 'abbreviated'
  }));
}).withConfig({
  displayName: "MonthPicker",
  componentId: "sc-mrnrtl-0"
})(["", " background:transparent;border:1px solid ", ";border-radius:", ";color:", ";font-size:", ";font-weight:", ";height:", ";width:", ";&[aria-current='true']{border:1px solid ", ";color:", ";}&[aria-selected='true']{background:", ";color:", ";}"], rippleStyle, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.ui2;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.space.u5;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.text3;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.fontSizes.xsmall;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.fontWeights.medium;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.space.u7;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.space.u12;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.colors.key;
}, function (_ref10) {
  var theme = _ref10.theme;
  return theme.colors.key;
}, function (_ref11) {
  var theme = _ref11.theme;
  return theme.colors.key;
}, function (_ref12) {
  var theme = _ref12.theme;
  return theme.colors.keyText;
});
//# sourceMappingURL=MonthPicker.js.map