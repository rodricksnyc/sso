import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["children", "className", "disabled", "hovered", "ripple", "selected", "style"],
    _excluded2 = ["callbacks"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import React from 'react';
import styled from 'styled-components';
import { rippleHandlerKeys, rippleStyle, useBoundedRipple, useRippleHandlers } from '../Ripple';
import { generateIndent } from '../Tree/utils';
import { listItemBackgroundColor } from '../ListItem/utils';
export var NavTreeDisclosure = styled(function (_ref) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      hovered = _ref.hovered,
      ripple = _ref.ripple,
      selected = _ref.selected,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useBoundedRipple = useBoundedRipple({
    className: className,
    color: selected ? 'key' : 'neutral',
    style: style
  }),
      callbacks = _useBoundedRipple.callbacks,
      ripplePropsRest = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  var rippleHandlers = useRippleHandlers(callbacks, _objectSpread({}, pick(_objectSpread({}, props), rippleHandlerKeys)), disabled);

  var rippleProps = _objectSpread(_objectSpread({}, ripplePropsRest), rippleHandlers);

  return React.createElement("li", _extends({}, props, rippleProps), children);
}).withConfig({
  displayName: "NavTreeDisclosure",
  componentId: "sc-iyovyt-0"
})(["", " ", " ", " color:", ";display:flex;"], generateIndent, listItemBackgroundColor, rippleStyle, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.text5;
});
//# sourceMappingURL=NavTreeDisclosure.js.map