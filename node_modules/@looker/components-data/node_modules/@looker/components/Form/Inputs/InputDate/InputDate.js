import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.date.now.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useCallback, useState, useEffect, forwardRef } from 'react';
import styled from 'styled-components';
import isFunction from 'lodash/isFunction';
import isEqual from 'lodash/isEqual';
import { format } from 'date-fns';
import { CalendarToday } from '@styled-icons/material/CalendarToday';
import { InputText } from '../InputText';
import { useReadOnlyWarn, useToggle, useTranslation } from '../../../utils';
import { formatDateString, parseDateFromString } from '../../../Calendar/utils';
import { Calendar } from '../../../Calendar';
import { usePopover } from '../../../Popover';
import { VisuallyHidden } from '../../../VisuallyHidden';
import { IconButton } from '../../../Button/IconButton';

var isDateInView = function isDateInView(value, viewMonth) {
  return !!(value.getFullYear() === viewMonth.getFullYear() && value.getMonth() === viewMonth.getMonth());
};

export var InputDate = styled(forwardRef(function (props, ref) {
  var ariaDescribedby = props['aria-describedby'],
      ariaLabelledby = props['aria-labelledby'],
      dateStringFormat = props.dateStringFormat,
      defaultValue = props.defaultValue,
      disabled = props.disabled,
      id = props.id,
      locale = props.locale,
      onChange = props.onChange,
      onValidationFail = props.onValidationFail,
      readOnly = props.readOnly,
      validationType = props.validationType,
      value = props.value;

  var _useTranslation = useTranslation('InputDate'),
      t = _useTranslation.t;

  useReadOnlyWarn('InputDate', value, onChange);

  var _useState = useState(value || defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      selectedDate = _useState2[0],
      setSelectedDate = _useState2[1];

  var _useState3 = useState(selectedDate ? formatDateString(selectedDate, dateStringFormat, locale) : ''),
      _useState4 = _slicedToArray(_useState3, 2),
      textInputValue = _useState4[0],
      setTextInputValue = _useState4[1];

  var _useState5 = useState(value || defaultValue || new Date(Date.now())),
      _useState6 = _slicedToArray(_useState5, 2),
      viewMonth = _useState6[0],
      setViewMonth = _useState6[1];

  var handleDateChange = useCallback(function (date) {
    setSelectedDate(date);
    setViewMonth(date || new Date());

    if (isFunction(onChange)) {
      onChange(date);
    }
  }, [onChange]);
  var handleTextInputChange = useCallback(function (e) {
    if (e.target === e.currentTarget) {
      var _value = e.currentTarget.value;
      setTextInputValue(_value);
    }
  }, []);
  var updateDateFromInput = useCallback(function (currentTarget) {
    var value = currentTarget.value;
    var isValid = value.length === 0 || !!parseDateFromString(value, locale, dateStringFormat);

    if (!isValid && isFunction(onValidationFail)) {
      onValidationFail(value);
    }

    if (value.length === 0) {
      handleDateChange();
    } else {
      var parsedValue = parseDateFromString(value, locale, dateStringFormat);

      if (parsedValue) {
        handleDateChange(parsedValue);
      }
    }
  }, [dateStringFormat, handleDateChange, locale, onValidationFail]);
  var handleBlur = useCallback(function (e) {
    updateDateFromInput(e.currentTarget);
  }, [updateDateFromInput]);
  var handleKeyDown = useCallback(function (e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      updateDateFromInput(e.currentTarget);
    }
  }, [updateDateFromInput]);
  var handleCalendarClose = useCallback(function (date) {
    setTextInputValue(formatDateString(date, dateStringFormat, locale));
    handleDateChange(date);
  }, [dateStringFormat, handleDateChange, locale]);
  useEffect(function () {
    if (value && !isEqual(value, selectedDate)) {
      setSelectedDate(value);
      value && setTextInputValue(formatDateString(value, dateStringFormat, locale));
      value && viewMonth && !isDateInView(value, viewMonth) && setViewMonth(value);
    }
  }, [textInputValue, value, onChange]);

  var _useToggle = useToggle(),
      isOpen = _useToggle.value,
      setOpen = _useToggle.change,
      toggle = _useToggle.toggle;

  var _usePopover = usePopover({
    content: React.createElement("div", null, React.createElement(VisuallyHidden, {
      "aria-live": "assertive",
      "data-testid": "hidden-value"
    }, viewMonth ? format(viewMonth, 'MMMM-yyyy') : ''), React.createElement(Calendar, {
      selectedDate: selectedDate,
      onSelectDate: handleCalendarClose,
      viewMonth: viewMonth,
      onMonthChange: setViewMonth
    })),
    focusTrap: false,
    isOpen: isOpen,
    placement: 'bottom-start',
    setOpen: setOpen,
    triggerToggle: false
  }),
      popover = _usePopover.popover,
      popoverRef = _usePopover.ref;

  return React.createElement("div", {
    ref: popoverRef
  }, React.createElement(InputText, {
    "aria-describedby": ariaDescribedby,
    "aria-labelledby": ariaLabelledby,
    after: React.createElement(IconButton, {
      size: "xsmall",
      label: t('Open calendar'),
      icon: React.createElement(CalendarToday, null),
      onClick: toggle
    }),
    value: textInputValue,
    onChange: handleTextInputChange,
    validationType: validationType,
    onBlur: handleBlur,
    onKeyDown: handleKeyDown,
    "data-testid": "text-input",
    id: id,
    ref: ref,
    disabled: disabled,
    readOnly: readOnly
  }), popover);
})).withConfig({
  displayName: "InputDate",
  componentId: "sc-9tulkd-0"
})(["width:100%;"]);
//# sourceMappingURL=InputDate.js.map