"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollableDateList = void 0;

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.map.js");

var _dateFns = require("date-fns");

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const ScrollableDateList = (0, _styledComponents.default)(({
  className,
  currentDate,
  baseMonth,
  setBaseMonth,
  buffer,
  getItemDate,
  onMonthChange,
  itemComponent: Component,
  itemProps,
  thresholdRatio
}) => {
  const _useCallbackRef = (0, _utils.useCallbackRef)(),
        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
        containerElement = _useCallbackRef2[0],
        ref = _useCallbackRef2[1];

  const _useMeasuredElement = (0, _utils.useMeasuredElement)(containerElement),
        _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
        height = _useMeasuredElement2[0].height;

  const scrollPosition = (0, _utils.useScrollPosition)(containerElement);
  const itemPositions = (0, _react.useRef)([]);
  const dates = (0, _react.useMemo)(() => {
    const total = Array(buffer * 2 + 1);
    const dateArray = Array.from(total, (_, i) => getItemDate(baseMonth, i - buffer));
    itemPositions.current = dateArray.map(d => ({
      date: d
    }));
    return dateArray;
  }, [baseMonth, buffer, getItemDate]);
  const containerHasHeight = height !== 0;
  const setItemPosition = (0, _react.useCallback)((index, element) => {
    if (containerHasHeight) {
      itemPositions.current[index] = _objectSpread(_objectSpread({}, itemPositions.current[index]), {}, {
        bottom: element.offsetTop + element.offsetHeight,
        top: element.offsetTop
      });
    }
  }, [containerHasHeight]);
  const hasAutoScrolledToBaseItem = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    hasAutoScrolledToBaseItem.current = false;
  }, [baseMonth, buffer]);
  (0, _react.useEffect)(() => {
    let t = 0;

    if (containerElement && height) {
      if (!hasAutoScrolledToBaseItem.current) {
        const currentMonth = itemPositions.current.find(itemPos => (0, _dateFns.isSameMonth)(itemPos.date, baseMonth));

        if (currentMonth !== null && currentMonth !== void 0 && currentMonth.top && currentMonth !== null && currentMonth !== void 0 && currentMonth.bottom) {
          const closeToBottom = scrollPosition > containerElement.scrollHeight - height * 2;
          const scrollTarget = closeToBottom ? currentMonth.bottom - height : currentMonth.top;
          containerElement.scrollTo(0, scrollTarget);
          hasAutoScrolledToBaseItem.current = true;
        }
      } else {
        const atTop = scrollPosition === 0;
        const atBottom = scrollPosition === containerElement.scrollHeight - height;

        if (atTop || atBottom) {
          const goToMonth = atTop ? dates[0] : dates[dates.length - 1];
          onMonthChange(goToMonth);
          setBaseMonth(goToMonth);
        } else {
          const updateCurrentMonth = (0, _debounce.default)(() => {
            const threshold = scrollPosition + height * thresholdRatio;
            const inView = itemPositions.current.find(itemPos => itemPos.top && itemPos.bottom && threshold > itemPos.top && threshold < itemPos.bottom);

            if (inView && !(0, _dateFns.isSameMonth)(currentDate, inView.date)) {
              onMonthChange(inView.date);
            }
          });
          t = window.setTimeout(updateCurrentMonth, 50);
        }
      }
    }

    return () => {
      window.clearTimeout(t);
    };
  }, [containerElement, currentDate, height, scrollPosition, dates, onMonthChange, setBaseMonth, thresholdRatio, baseMonth]);
  const inViewIndex = dates.findIndex(d => (0, _dateFns.isSameMonth)(d, currentDate));
  return _react.default.createElement("div", {
    className: className,
    ref: ref
  }, dates.map((item, i) => {
    const fullRender = Math.abs(i - inViewIndex) <= 1;
    return _react.default.createElement(Component, _extends({
      key: item.toString(),
      index: i,
      fullRender: fullRender,
      date: item
    }, itemProps, {
      setItemPosition: setItemPosition
    }));
  }));
}).withConfig({
  displayName: "ScrollableDateList",
  componentId: "sc-1jksxb7-0"
})(["height:220px;overflow-y:scroll;position:relative;"]);
exports.ScrollableDateList = ScrollableDateList;
//# sourceMappingURL=ScrollableDateList.js.map