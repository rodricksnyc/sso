"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Month = void 0;

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.map.js");

var _dateFns = require("date-fns");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _Layout = require("../Layout");

var _Day = require("./Day");

var _Cell = require("./Cell");

var _MonthTitle = require("./MonthTitle");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getMonthPadding = (month, firstDayOfWeek) => {
  const startDate = (0, _dateFns.startOfMonth)(month);
  const endDate = (0, _dateFns.endOfMonth)(month);
  const startDay = (0, _dateFns.getDay)(startDate);
  const endDay = (0, _dateFns.getDay)(endDate);
  const startPadding = startDay - firstDayOfWeek;
  const endPadding = 6 - endDay + firstDayOfWeek;
  return {
    endPadding,
    startPadding
  };
};

const getDaysArray = (month, startPadding, endPadding) => {
  const daysInMonth = (0, _dateFns.getDaysInMonth)(month);
  const totalDays = startPadding + daysInMonth + endPadding;
  return Array.from(Array(totalDays), (_, i) => {
    if (i < startPadding) return 'before';
    if (i > totalDays - endPadding - 1) return 'after';
    const dayOfMonth = i - startPadding + 1;
    return (0, _dateFns.setDate)(month, dayOfMonth);
  });
};

const getRangeType = ({
  datesSelected,
  draftTo
}) => {
  if (datesSelected.length === 2) return 'selected';
  if (draftTo) return 'draft';
  return 'none';
};

const getRangePosition = (day, month, {
  datesSelected,
  draftTo
}) => {
  const start = datesSelected[0];
  const end = datesSelected[1] || draftTo;
  if (!start || !end) return undefined;

  if (day === 'before') {
    if (start && end && (0, _dateFns.isBefore)(start, (0, _dateFns.startOfMonth)(month)) && (0, _dateFns.isAfter)(end, (0, _dateFns.startOfMonth)(month))) {
      return 'middle';
    }

    return undefined;
  }

  if (day === 'after') {
    if (start && end && (0, _dateFns.isBefore)(start, (0, _dateFns.endOfMonth)(month)) && (0, _dateFns.isAfter)(end, (0, _dateFns.endOfMonth)(month))) {
      return 'middle';
    }

    return undefined;
  }

  if ((0, _dateFns.isSameDay)(day, start) && (0, _dateFns.isSameDay)(day, end)) return undefined;
  if ((0, _dateFns.isSameDay)(day, start)) return 'start';
  if ((0, _dateFns.isSameDay)(day, end)) return 'end';
  if ((0, _dateFns.isAfter)(day, start) && (0, _dateFns.isBefore)(day, end)) return 'middle';
  return undefined;
};

const Month = (0, _styledComponents.default)(({
  className,
  datesSelected,
  draftTo,
  firstDayOfWeek,
  fullRender,
  index,
  locale,
  onSelect,
  onDraftSelect,
  date,
  setItemPosition
}) => {
  const _getMonthPadding = getMonthPadding(date, firstDayOfWeek),
        startPadding = _getMonthPadding.startPadding,
        endPadding = _getMonthPadding.endPadding;

  const days = getDaysArray(date, startPadding, endPadding);
  const rangeType = getRangeType({
    datesSelected,
    draftTo
  });
  const ref = (0, _react.useCallback)(element => {
    if (element) {
      setItemPosition(index, element);
    }
  }, [setItemPosition, index]);
  const titleInline = startPadding > 2;
  const firstDayRangePosition = getRangePosition((0, _dateFns.startOfMonth)(date), date, {
    datesSelected,
    draftTo
  });
  const titleRangeType = !titleInline && fullRender && firstDayRangePosition === 'middle' ? rangeType : 'none';

  const _useContext = (0, _react.useContext)(_styledComponents.ThemeContext),
        space = _useContext.space;

  const height = `calc(${space.u8} * ${days.length / 7})`;
  return _react.default.createElement("div", {
    className: className,
    ref: ref
  }, _react.default.createElement(_MonthTitle.MonthTitle, {
    month: date,
    rangePosition: firstDayRangePosition,
    rangeType: titleRangeType,
    inline: titleInline,
    locale: locale
  }), _react.default.createElement(_Layout.Grid, {
    columns: 7,
    gap: "none",
    height: height,
    className: fullRender ? 'full-render' : ''
  }, fullRender && days.map((day, i) => {
    const rangePosition = getRangePosition(day, date, {
      datesSelected,
      draftTo
    });
    return _react.default.createElement(_Cell.Cell, {
      key: i,
      weekStart: i % 7 === 0,
      weekEnd: i % 7 === 6,
      rangeType: rangeType,
      rangePosition: rangePosition
    }, typeof day !== 'string' && _react.default.createElement(_Day.Day, {
      date: day,
      locale: locale,
      onSelect: onSelect,
      onDraftSelect: onDraftSelect,
      selected: datesSelected.some(date => (0, _dateFns.isSameDay)(date, day))
    }));
  })));
}).withConfig({
  displayName: "Month",
  componentId: "sc-1d3pod3-0"
})(["width:fit-content;", "{grid-template-columns:repeat(7,auto);&.full-render{animation-duration:", ";animation-fill-mode:forwards;animation-name:", ";}}"], _Layout.Grid, ({
  theme
}) => `${theme.transitions.moderate}ms`, _designTokens.fadeIn);
exports.Month = Month;
//# sourceMappingURL=Month.js.map