"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonthPicker = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _Ripple = require("../Ripple");

var _dateConfirmations = require("./utils/dateConfirmations");

const _excluded = ["className", "date", "isTodaysMonth", "locale", "monthNumber", "onMonthClick", "selected", "selectedMonth", "style"],
      _excluded2 = ["callbacks"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const MonthPicker = (0, _styledComponents.default)(_ref => {
  var _locale$localize;

  let className = _ref.className,
      _ref$date = _ref.date,
      date = _ref$date === void 0 ? new Date() : _ref$date,
      isTodaysMonth = _ref.isTodaysMonth,
      locale = _ref.locale,
      monthNumber = _ref.monthNumber,
      onMonthClick = _ref.onMonthClick,
      selected = _ref.selected,
      selectedMonth = _ref.selectedMonth,
      style = _ref.style,
      restProps = _objectWithoutProperties(_ref, _excluded);

  const _useBoundedRipple = (0, _Ripple.useBoundedRipple)({
    className,
    color: 'neutral',
    style
  }),
        callbacks = _useBoundedRipple.callbacks,
        rippleProps = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({}, (0, _pick.default)(restProps, _Ripple.rippleHandlerKeys)), restProps.disabled);
  const isMonth = selectedMonth && (0, _dateConfirmations.isThisMonth)(selectedMonth, monthNumber, date);
  isTodaysMonth = isTodaysMonth && (0, _dateConfirmations.isThisMonth)(new Date(), monthNumber, date);
  return _react.default.createElement("button", _extends({
    "aria-current": isTodaysMonth,
    "aria-selected": isMonth,
    type: "button",
    onClick: (0, _react.useCallback)(() => onMonthClick(monthNumber), [monthNumber, onMonthClick])
  }, restProps, rippleProps, rippleHandlers), (_locale$localize = locale.localize) === null || _locale$localize === void 0 ? void 0 : _locale$localize.month(monthNumber, {
    width: 'abbreviated'
  }));
}).withConfig({
  displayName: "MonthPicker",
  componentId: "sc-mrnrtl-0"
})(["", " background:transparent;border:1px solid ", ";border-radius:", ";color:", ";font-size:", ";font-weight:", ";height:", ";width:", ";&[aria-current='true']{border:1px solid ", ";color:", ";}&[aria-selected='true']{background:", ";color:", ";}"], _Ripple.rippleStyle, ({
  theme
}) => theme.colors.ui2, ({
  theme
}) => theme.space.u5, ({
  theme
}) => theme.colors.text3, ({
  theme
}) => theme.fontSizes.xsmall, ({
  theme
}) => theme.fontWeights.medium, ({
  theme
}) => theme.space.u7, ({
  theme
}) => theme.space.u12, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.keyText);
exports.MonthPicker = MonthPicker;
//# sourceMappingURL=MonthPicker.js.map