"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = void 0;

require("core-js/modules/es.array.iterator.js");

var _i18n = require("@looker/i18n");

var _dateFns = require("date-fns");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Divider = require("../Divider");

var _utils = require("../utils");

var _DialogContext = require("../Dialog/DialogContext");

var _DaysOfWeek = require("./DaysOfWeek");

var _CalendarNav = require("./CalendarNav");

var _MonthList = require("./MonthList");

var _MonthPickerNav = require("./MonthPickerNav");

const _excluded = ["className", "firstDayOfWeek", "isRange", "locale", "onSelectDate", "onSelectRange", "onMonthChange", "readOnly", "selectedDate", "selectedRange", "showNextButton", "showPreviousButton", "viewMonth"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const getDatesSelected = (date, range) => {
  if (date && !range) return [date];

  if (range) {
    return [...(range.from ? [range.from] : []), ...(range.to ? [range.to] : [])];
  }

  return [];
};

const Calendar = (0, _styledComponents.default)(_ref => {
  var _locale$options;

  let className = _ref.className,
      firstDayOfWeek = _ref.firstDayOfWeek,
      isRange = _ref.isRange,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? (0, _i18n.getDateLocale)() : _ref$locale,
      onSelectDate = _ref.onSelectDate,
      onSelectRange = _ref.onSelectRange,
      onMonthChange = _ref.onMonthChange,
      readOnly = _ref.readOnly,
      selectedDate = _ref.selectedDate,
      selectedRange = _ref.selectedRange,
      showNextButton = _ref.showNextButton,
      showPreviousButton = _ref.showPreviousButton,
      _ref$viewMonth = _ref.viewMonth,
      viewMonth = _ref$viewMonth === void 0 ? new Date() : _ref$viewMonth,
      props = _objectWithoutProperties(_ref, _excluded);

  const datesSelected = getDatesSelected(selectedDate, selectedRange);

  const _useState = (0, _react.useState)(),
        _useState2 = _slicedToArray(_useState, 2),
        draftTo = _useState2[0],
        setDraftTo = _useState2[1];

  const _useState3 = (0, _react.useState)(viewMonth),
        _useState4 = _slicedToArray(_useState3, 2),
        baseMonth = _useState4[0],
        setBaseMonth = _useState4[1];

  const _useToggle = (0, _utils.useToggle)(false),
        showMonthPicker = _useToggle.value,
        setOn = _useToggle.setOn,
        setOff = _useToggle.setOff;

  const onOpenMonthPicker = (0, _react.useCallback)(() => {
    setOn();
    setBaseMonth(viewMonth);
  }, [setOn, viewMonth]);
  const handleDraftSelect = (0, _react.useCallback)(date => {
    if (isRange && selectedRange !== null && selectedRange !== void 0 && selectedRange.from && !selectedRange.to) {
      if ((0, _dateFns.isSameDay)(date, selectedRange.from) || (0, _dateFns.isBefore)(date, selectedRange.from)) {
        setDraftTo(undefined);
      } else {
        setDraftTo(date);
      }
    }
  }, [isRange, selectedRange]);

  const _useContext = (0, _react.useContext)(_DialogContext.DialogContext),
        closeModal = _useContext.closeModal;

  const handleSelect = (0, _react.useCallback)(date => {
    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date);

    if (isRange) {
      setDraftTo(undefined);

      if (selectedRange !== null && selectedRange !== void 0 && selectedRange.from && !selectedRange.to && !(0, _dateFns.isBefore)(date, selectedRange.from)) {
        onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {
          to: date
        }));
        closeModal();
      } else if (selectedRange !== null && selectedRange !== void 0 && selectedRange.to && !selectedRange.from && !(0, _dateFns.isAfter)(date, selectedRange.to)) {
        onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange(_objectSpread(_objectSpread({}, selectedRange), {}, {
          from: date
        }));
        closeModal();
      } else {
        onSelectRange === null || onSelectRange === void 0 ? void 0 : onSelectRange({
          from: date
        });
      }
    } else {
      closeModal();
    }
  }, [closeModal, isRange, selectedRange, onSelectRange, onSelectDate]);
  const monthChangedFromScroll = (0, _react.useRef)(false);
  (0, _react.useEffect)(() => {
    if (!monthChangedFromScroll.current) {
      setBaseMonth(viewMonth);
    }
  }, [viewMonth]);
  const handleMonthChangeByScroll = (0, _react.useCallback)(newMonth => {
    monthChangedFromScroll.current = true;
    onMonthChange(newMonth);
    window.setTimeout(() => {
      monthChangedFromScroll.current = false;
    }, 50);
  }, [onMonthChange]);
  const localeProps = {
    firstDayOfWeek: firstDayOfWeek || ((_locale$options = locale.options) === null || _locale$options === void 0 ? void 0 : _locale$options.weekStartsOn) || 0,
    locale
  };
  return _react.default.createElement("div", _extends({
    className: className
  }, props), showMonthPicker ? _react.default.createElement(_MonthPickerNav.MonthPickerNav, {
    locale: locale,
    date: viewMonth,
    onClose: setOff,
    onMonthChange: onMonthChange
  }) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_CalendarNav.CalendarNav, {
    locale: locale,
    monthYear: viewMonth,
    onMonthChange: onMonthChange,
    onOpenMonthPicker: onOpenMonthPicker
  }), _react.default.createElement(_Divider.Divider, {
    appearance: "light"
  }), _react.default.createElement(_DaysOfWeek.DaysOfWeek, localeProps), _react.default.createElement(_MonthList.MonthList, _extends({}, localeProps, {
    onSelect: handleSelect,
    onDraftSelect: handleDraftSelect,
    draftTo: draftTo,
    currentDate: viewMonth,
    datesSelected: datesSelected,
    onMonthChange: handleMonthChangeByScroll,
    baseMonth: baseMonth,
    setBaseMonth: setBaseMonth
  }))));
}).withConfig({
  displayName: "Calendar",
  componentId: "sc-16c71io-0"
})(["font-family:", ";width:fit-content;"], ({
  theme
}) => theme.fonts.brand);
exports.Calendar = Calendar;
//# sourceMappingURL=Calendar.js.map