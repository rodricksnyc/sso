{"version":3,"file":"numberTransform.js","names":["cloneDeep","NumberTypes","serializeNumberNode","inorderTraversal","removeNode","treeToList","mergeMultiValueNodes","applyId","countNots","root","count","node","is","removeDuplicateNotNodes","workingRoot","andClauses","filter","item","length","id","numberTransform","countOfNotNodes","mergeNodesWithDifferentIsValue","mergedRoot","EQUAL","checkForDuplicates"],"sources":["../../../src/utils/transform/numberTransform.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport cloneDeep from 'lodash/cloneDeep'\nimport type { FilterASTNode } from '../../types'\nimport { NumberTypes } from '../../types/number_types'\nimport { serializeNumberNode } from '../number/number_to_string'\nimport { inorderTraversal, removeNode, treeToList } from '../tree'\nimport { mergeMultiValueNodes } from './mergeMultiValueNodes'\nimport applyId from './utils/apply_id_to_ast'\n\n/**\n * Traverses ast and returns the count of 'not' nodes ('is' value set to false)\n */\nconst countNots = (root: FilterASTNode): number => {\n  let count = 0\n  inorderTraversal(root, (node) => {\n    if (node.is === false) {\n      count += 1\n    }\n  })\n  return count\n}\n\n/**\n * when two duplicate \"is not\" nodes are present\n * removes the second one\n */\nconst removeDuplicateNotNodes = (root: FilterASTNode) => {\n  const workingRoot = cloneDeep(applyId(root))\n  // get the andClauses - \"is not\" nodes from the ast\n  const andClauses = treeToList(workingRoot).filter((item) => item.is === false)\n  // we only care if there are two andClauses with the same expression\n  return andClauses.length === 2 &&\n    serializeNumberNode(andClauses[0]) === serializeNumberNode(andClauses[1])\n    ? // remove the second one\n      removeNode(workingRoot, andClauses[1].id)!\n    : workingRoot\n}\n\n/**\n * Applies the following transformations on the number AST:\n *  - combine the value array on nodes of type '='\n */\nexport const numberTransform = (root: FilterASTNode): FilterASTNode => {\n  // workaround for inconsistency in number filter and allow merging of nodes\n  // with different 'is' value: 1, not 2 -> becomes\n  // a single filter node { type: '=', is: false, value: [1, 2] }\n  const countOfNotNodes = countNots(root)\n  const mergeNodesWithDifferentIsValue = countOfNotNodes === 1\n\n  const mergedRoot = mergeMultiValueNodes(\n    root,\n    NumberTypes.EQUAL,\n    mergeNodesWithDifferentIsValue\n  )\n\n  // if there are two \"is not\" nodes check if they are duplicates\n  // to undo the \"fix\" applied when serializing the number filter\n  const checkForDuplicates = countOfNotNodes === 2\n  return checkForDuplicates ? removeDuplicateNotNodes(mergedRoot) : mergedRoot\n}\n"],"mappings":"AAyBA,OAAOA,SAAP,MAAsB,kBAAtB;AAEA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,UAAvC,QAAyD,SAAzD;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAKA,MAAMC,SAAS,GAAIC,IAAD,IAAiC;EACjD,IAAIC,KAAK,GAAG,CAAZ;EACAP,gBAAgB,CAACM,IAAD,EAAQE,IAAD,IAAU;IAC/B,IAAIA,IAAI,CAACC,EAAL,KAAY,KAAhB,EAAuB;MACrBF,KAAK,IAAI,CAAT;IACD;EACF,CAJe,CAAhB;EAKA,OAAOA,KAAP;AACD,CARD;;AAcA,MAAMG,uBAAuB,GAAIJ,IAAD,IAAyB;EACvD,MAAMK,WAAW,GAAGd,SAAS,CAACO,OAAO,CAACE,IAAD,CAAR,CAA7B;EAEA,MAAMM,UAAU,GAAGV,UAAU,CAACS,WAAD,CAAV,CAAwBE,MAAxB,CAAgCC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAY,KAArD,CAAnB;EAEA,OAAOG,UAAU,CAACG,MAAX,KAAsB,CAAtB,IACLhB,mBAAmB,CAACa,UAAU,CAAC,CAAD,CAAX,CAAnB,KAAuCb,mBAAmB,CAACa,UAAU,CAAC,CAAD,CAAX,CADrD,GAGHX,UAAU,CAACU,WAAD,EAAcC,UAAU,CAAC,CAAD,CAAV,CAAcI,EAA5B,CAHP,GAIHL,WAJJ;AAKD,CAVD;;AAgBA,OAAO,MAAMM,eAAe,GAAIX,IAAD,IAAwC;EAIrE,MAAMY,eAAe,GAAGb,SAAS,CAACC,IAAD,CAAjC;EACA,MAAMa,8BAA8B,GAAGD,eAAe,KAAK,CAA3D;EAEA,MAAME,UAAU,GAAGjB,oBAAoB,CACrCG,IADqC,EAErCR,WAAW,CAACuB,KAFyB,EAGrCF,8BAHqC,CAAvC;EAQA,MAAMG,kBAAkB,GAAGJ,eAAe,KAAK,CAA/C;EACA,OAAOI,kBAAkB,GAAGZ,uBAAuB,CAACU,UAAD,CAA1B,GAAyCA,UAAlE;AACD,CAjBM"}