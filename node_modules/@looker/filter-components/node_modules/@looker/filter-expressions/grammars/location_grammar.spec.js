import { i18nInit, parseFilterExpression, summary } from '../utils';
const location = [['36.97, -122.03', '36.97, -122.03'], ['-36.97, 122.03', '-36.97, 122.03'], ['-36.97, -122.03', '-36.97, -122.03'], ['40 miles from -36.97, -122.03', '40 miles from -36.97, -122.03'], ['40 miles from 36.97, -122.03', '40 miles from 36.97, -122.03'], ['100 miles from 36.97, -122.03', '100 miles from 36.97, -122.03'], ['inside box from 72.33, -173.14 to 14.39, -61.70', '72.3째N, 173.1째W to 14.4째N, 61.7째W'], ['', 'is anywhere'], ['NOT NULL', 'is not null'], ['-NULL', 'is not null'], ['NULL', 'is null']];
describe('Location grammar can parse expressions', () => {
  beforeEach(() => i18nInit());
  it.each(location)('%s', (expression, result) => {
    expect(parseFilterExpression('location', expression)).toMatchSnapshot();
    expect(summary({
      type: 'location',
      expression
    })).toBe(result);
  });
});
//# sourceMappingURL=location_grammar.spec.js.map