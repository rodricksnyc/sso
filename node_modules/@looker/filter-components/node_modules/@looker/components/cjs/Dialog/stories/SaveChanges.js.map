{"version":3,"file":"SaveChanges.js","names":["SaveChanges","useState","name","setName","isOpen","setIsOpen","hasUnsavedChanges","handleConfirm","close","useConfirm","buttonColor","cancelLabel","confirmLabel","message","onCancel","onConfirm","title","width","confirm","openConfirmation","handleSave","handleCancel","handleChange","event","currentTarget","value","footer","parameters","storyshots","disable"],"sources":["../../../../src/Dialog/stories/SaveChanges.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { FormEvent } from 'react'\nimport React, { useState } from 'react'\nimport { useConfirm, Dialog, DialogLayout } from '..'\nimport { Button, Form, FieldText, ButtonTransparent } from '../..'\n\n/**\n * Advanced Use: Protect Unsaved User Changes\n *\n * If your dialog content includes form inputs it's entirely possible that the user\n * could unintentionally close the dialog and lose their unsaved changes. With careful\n * management of dialog and form state, you can add a second stage dialog to alert the\n * user to unsaved changes and protect them from losing their work.\n *\n **/\nexport const SaveChanges = () => {\n  const [name, setName] = useState('')\n  const [isOpen, setIsOpen] = useState(false)\n\n  const hasUnsavedChanges = () => name !== ''\n\n  // \"Yes I want to discard my changes and close the dialog\"\n  const handleConfirm = (close: () => void) => {\n    setName('') // reset form state\n    close() // close confirmation\n  }\n\n  const [confirm, openConfirmation] = useConfirm({\n    buttonColor: 'critical',\n    cancelLabel: 'Go Back',\n    confirmLabel: 'Discard Changes',\n    message:\n      'Are you sure you want to close the dialog? Unsaved changes will be lost.',\n    onCancel: close => {\n      close()\n    },\n    onConfirm: handleConfirm,\n    title: 'Discard Changes?',\n    width: '500px',\n  })\n\n  const handleSave = () => {\n    // dispatch side effect (data would usually get saved here...)\n    setName('') // reset form state\n    setIsOpen(false) // Close dialog here\n  }\n\n  const handleCancel = () => {\n    setIsOpen(false)\n\n    // has unsaved changes: show confirmation\n    if (hasUnsavedChanges()) {\n      openConfirmation()\n    }\n  }\n\n  const handleChange = (event: FormEvent<HTMLInputElement>) =>\n    setName(event.currentTarget.value)\n\n  const footer = (\n    <>\n      <Button onClick={handleSave}>Save</Button>\n      <ButtonTransparent onClick={handleCancel}>Cancel</ButtonTransparent>\n    </>\n  )\n\n  return (\n    <>\n      <Dialog\n        isOpen={isOpen}\n        onClose={handleCancel}\n        content={\n          <DialogLayout footer={footer} header=\"Edit Name\">\n            <Form onSubmit={handleSave}>\n              <FieldText\n                label=\"Name\"\n                onChange={handleChange}\n                value={name}\n                description='Enter name, then click \"Cancel\" to trigger confirmation'\n              />\n            </Form>\n          </DialogLayout>\n        }\n      />\n      <button onClick={() => setIsOpen(true)}>Tell us your name...</button>\n      {confirm}\n    </>\n  )\n}\n\nSaveChanges.parameters = {\n  storyshots: { disable: true },\n}\n"],"mappings":";;;;;;;;;;;;;AA2BA;;AACA;;AACA;;;;;;AAWO,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;EAC/B,gBAAwB,IAAAC,eAAA,EAAS,EAAT,CAAxB;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAA4B,IAAAF,eAAA,EAAS,KAAT,CAA5B;EAAA;EAAA,IAAOG,MAAP;EAAA,IAAeC,SAAf;;EAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;IAAA,OAAMJ,IAAI,KAAK,EAAf;EAAA,CAA1B;;EAGA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAuB;IAC3CL,OAAO,CAAC,EAAD,CAAP;IACAK,KAAK;EACN,CAHD;;EAKA,kBAAoC,IAAAC,YAAA,EAAW;IAC7CC,WAAW,EAAE,UADgC;IAE7CC,WAAW,EAAE,SAFgC;IAG7CC,YAAY,EAAE,iBAH+B;IAI7CC,OAAO,EACL,0EAL2C;IAM7CC,QAAQ,EAAE,kBAAAN,KAAK,EAAI;MACjBA,KAAK;IACN,CAR4C;IAS7CO,SAAS,EAAER,aATkC;IAU7CS,KAAK,EAAE,kBAVsC;IAW7CC,KAAK,EAAE;EAXsC,CAAX,CAApC;EAAA;EAAA,IAAOC,OAAP;EAAA,IAAgBC,gBAAhB;;EAcA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;IAEvBjB,OAAO,CAAC,EAAD,CAAP;IACAE,SAAS,CAAC,KAAD,CAAT;EACD,CAJD;;EAMA,IAAMgB,YAAY,GAAG,SAAfA,YAAe,GAAM;IACzBhB,SAAS,CAAC,KAAD,CAAT;;IAGA,IAAIC,iBAAiB,EAArB,EAAyB;MACvBa,gBAAgB;IACjB;EACF,CAPD;;EASA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;IAAA,OACnBpB,OAAO,CAACoB,KAAK,CAACC,aAAN,CAAoBC,KAArB,CADY;EAAA,CAArB;;EAGA,IAAMC,MAAM,GACV,kEACE,gCAAC,SAAD;IAAQ,OAAO,EAAEN;EAAjB,UADF,EAEE,gCAAC,oBAAD;IAAmB,OAAO,EAAEC;EAA5B,YAFF,CADF;;EAOA,OACE,kEACE,gCAAC,QAAD;IACE,MAAM,EAAEjB,MADV;IAEE,OAAO,EAAEiB,YAFX;IAGE,OAAO,EACL,gCAAC,cAAD;MAAc,MAAM,EAAEK,MAAtB;MAA8B,MAAM,EAAC;IAArC,GACE,gCAAC,OAAD;MAAM,QAAQ,EAAEN;IAAhB,GACE,gCAAC,YAAD;MACE,KAAK,EAAC,MADR;MAEE,QAAQ,EAAEE,YAFZ;MAGE,KAAK,EAAEpB,IAHT;MAIE,WAAW,EAAC;IAJd,EADF,CADF;EAJJ,EADF,EAiBE;IAAQ,OAAO,EAAE;MAAA,OAAMG,SAAS,CAAC,IAAD,CAAf;IAAA;EAAjB,0BAjBF,EAkBGa,OAlBH,CADF;AAsBD,CAzEM;;;AA2EPlB,WAAW,CAAC2B,UAAZ,GAAyB;EACvBC,UAAU,EAAE;IAAEC,OAAO,EAAE;EAAX;AADW,CAAzB"}