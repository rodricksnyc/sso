{"version":3,"file":"windowedTreeReducer.js","names":["updateCount","state","id","isOpen","shownIDs","map","countTree","tree","push","items","treeIsOpen","forEach","treesWithIDs","windowedTreeReducer","action","type","trees","payload","processTree","parentOpen","length","content"],"sources":["../../../src/Tree/utils/windowedTreeReducer.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { Reducer } from 'react'\nimport type {\n  ToggleStateMap,\n  WindowedTreeNodeProps,\n  WindowedTreeNodeIDProps,\n} from '../types'\n\ntype WindowedTreeState = {\n  map: ToggleStateMap\n  shownIDs: number[]\n  treesWithIDs: WindowedTreeNodeIDProps[]\n}\ntype WindowedTreeAction = {\n  type: 'OPEN' | 'CLOSE' | 'RESET'\n  payload: number | WindowedTreeNodeProps[]\n}\n\nconst updateCount = (state: WindowedTreeState, id: number, isOpen: boolean) => {\n  // Get the updated count after a tree has been toggled\n  const shownIDs: number[] = []\n  const map = { ...state.map, [id]: { ...state.map[id], isOpen } }\n\n  const countTree = (tree: WindowedTreeNodeIDProps) => {\n    shownIDs.push(tree.id)\n    if (tree.items) {\n      const treeIsOpen = map[tree.id].isOpen\n      if (treeIsOpen) {\n        tree.items.forEach(countTree)\n      }\n    }\n  }\n  state.treesWithIDs?.forEach(countTree)\n  return { ...state, map, shownIDs }\n}\n\nexport const windowedTreeReducer: Reducer<\n  WindowedTreeState,\n  WindowedTreeAction\n> = (state, action) => {\n  switch (action.type) {\n    case 'RESET': {\n      const trees = action.payload as WindowedTreeNodeProps[]\n      // 1. get the initial count,\n      // 2. generate toggleStateMap for future count updates\n      // 3. add an index-like ID to each tree/item\n      const map: ToggleStateMap = {}\n      const shownIDs: number[] = []\n      // auto-increment-style ID for each item\n      let id = 0\n\n      const processTree = (parentOpen?: boolean) => (\n        tree: WindowedTreeNodeProps\n      ): WindowedTreeNodeIDProps => {\n        id++\n        if (parentOpen) {\n          shownIDs.push(id)\n        }\n        if (tree.items) {\n          map[id] = {\n            isOpen: tree.isOpen || false,\n            length: tree.items.length,\n          }\n          return {\n            ...tree,\n            id,\n            items: tree.items.map(\n              processTree(parentOpen ? tree.isOpen : false)\n            ),\n          }\n        }\n        return { content: tree.content, id }\n      }\n\n      const treesWithIDs = trees.map(processTree(true))\n\n      return { map, shownIDs, treesWithIDs }\n    }\n    case 'OPEN': {\n      return updateCount(state, action.payload as number, true)\n    }\n    case 'CLOSE': {\n      return updateCount(state, action.payload as number, false)\n    }\n  }\n}\n"],"mappings":";;;;;;AA2CA,MAAMA,WAAW,GAAG,CAACC,KAAD,EAA2BC,EAA3B,EAAuCC,MAAvC,KAA2D;EAAA;;EAE7E,MAAMC,QAAkB,GAAG,EAA3B;;EACA,MAAMC,GAAG,mCAAQJ,KAAK,CAACI,GAAd;IAAmB,CAACH,EAAD,mCAAWD,KAAK,CAACI,GAAN,CAAUH,EAAV,CAAX;MAA0BC;IAA1B;EAAnB,EAAT;;EAEA,MAAMG,SAAS,GAAIC,IAAD,IAAmC;IACnDH,QAAQ,CAACI,IAAT,CAAcD,IAAI,CAACL,EAAnB;;IACA,IAAIK,IAAI,CAACE,KAAT,EAAgB;MACd,MAAMC,UAAU,GAAGL,GAAG,CAACE,IAAI,CAACL,EAAN,CAAH,CAAaC,MAAhC;;MACA,IAAIO,UAAJ,EAAgB;QACdH,IAAI,CAACE,KAAL,CAAWE,OAAX,CAAmBL,SAAnB;MACD;IACF;EACF,CARD;;EASA,uBAAAL,KAAK,CAACW,YAAN,4EAAoBD,OAApB,CAA4BL,SAA5B;EACA,uCAAYL,KAAZ;IAAmBI,GAAnB;IAAwBD;EAAxB;AACD,CAhBD;;AAkBA,OAAO,MAAMS,mBAGZ,GAAG,CAACZ,KAAD,EAAQa,MAAR,KAAmB;EACrB,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,OAAL;MAAc;QACZ,MAAMC,KAAK,GAAGF,MAAM,CAACG,OAArB;QAIA,MAAMZ,GAAmB,GAAG,EAA5B;QACA,MAAMD,QAAkB,GAAG,EAA3B;QAEA,IAAIF,EAAE,GAAG,CAAT;;QAEA,MAAMgB,WAAW,GAAIC,UAAD,IAClBZ,IAD4C,IAEhB;UAC5BL,EAAE;;UACF,IAAIiB,UAAJ,EAAgB;YACdf,QAAQ,CAACI,IAAT,CAAcN,EAAd;UACD;;UACD,IAAIK,IAAI,CAACE,KAAT,EAAgB;YACdJ,GAAG,CAACH,EAAD,CAAH,GAAU;cACRC,MAAM,EAAEI,IAAI,CAACJ,MAAL,IAAe,KADf;cAERiB,MAAM,EAAEb,IAAI,CAACE,KAAL,CAAWW;YAFX,CAAV;YAIA,uCACKb,IADL;cAEEL,EAFF;cAGEO,KAAK,EAAEF,IAAI,CAACE,KAAL,CAAWJ,GAAX,CACLa,WAAW,CAACC,UAAU,GAAGZ,IAAI,CAACJ,MAAR,GAAiB,KAA5B,CADN;YAHT;UAOD;;UACD,OAAO;YAAEkB,OAAO,EAAEd,IAAI,CAACc,OAAhB;YAAyBnB;UAAzB,CAAP;QACD,CArBD;;QAuBA,MAAMU,YAAY,GAAGI,KAAK,CAACX,GAAN,CAAUa,WAAW,CAAC,IAAD,CAArB,CAArB;QAEA,OAAO;UAAEb,GAAF;UAAOD,QAAP;UAAiBQ;QAAjB,CAAP;MACD;;IACD,KAAK,MAAL;MAAa;QACX,OAAOZ,WAAW,CAACC,KAAD,EAAQa,MAAM,CAACG,OAAf,EAAkC,IAAlC,CAAlB;MACD;;IACD,KAAK,OAAL;MAAc;QACZ,OAAOjB,WAAW,CAACC,KAAD,EAAQa,MAAM,CAACG,OAAf,EAAkC,KAAlC,CAAlB;MACD;EA3CH;AA6CD,CAjDM"}