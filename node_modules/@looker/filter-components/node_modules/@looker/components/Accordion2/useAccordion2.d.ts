import React from 'react';
import type { Accordion2Props } from './types';
/**
 * `useAccordion2` hook returns the internal pieces of an `Accordion2` component
 * to allow developers to build artisanal accordion compositions.
 */
export declare const useAccordion2: ({ children, className, density, disabled, label, id, indicatorPosition, indicatorIcons, defaultOpen, isOpen: propsIsOpen, onBlur, onClick: propsOnClick, onClose, onOpen, onKeyUp, role, tabIndex, toggleOpen: propsToggleOpen, ...props }: Accordion2Props) => {
    content: false | JSX.Element;
    contentDomProps: {
        children: React.ReactNode;
        role: string;
        'aria-controls': string;
        id: string;
        'aria-labelledby'?: undefined;
    } | {
        children: React.ReactNode;
        role: string;
        'aria-labelledby': string;
        id: string;
        'aria-controls'?: undefined;
    };
    disclosureProps: {
        disabled?: boolean | undefined;
        role?: React.AriaRole | undefined;
        tabIndex: number;
        onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLElement> | undefined;
        focusVisible: boolean;
        'aria-expanded': boolean;
        children: React.ReactNode;
        className: string | undefined;
        density: import("packages/design-tokens/src").DensityRamp;
        indicator: JSX.Element;
        indicatorPosition: import("./types").AccordionIndicatorPosition | undefined;
        'aria-controls': string;
        id: string;
        'aria-labelledby'?: undefined;
    } | {
        disabled?: boolean | undefined;
        role?: React.AriaRole | undefined;
        tabIndex: number;
        onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLElement> | undefined;
        focusVisible: boolean;
        'aria-expanded': boolean;
        children: React.ReactNode;
        className: string | undefined;
        density: import("packages/design-tokens/src").DensityRamp;
        indicator: JSX.Element;
        indicatorPosition: import("./types").AccordionIndicatorPosition | undefined;
        'aria-labelledby': string;
        id: string;
        'aria-controls'?: undefined;
    };
    domProps: {
        className: string | undefined;
        id: string | undefined;
        key?: React.Key | null | undefined;
        title?: string | undefined;
        property?: string | undefined;
        translate?: "no" | "yes" | undefined;
        value?: string | number | readonly string[] | undefined;
        name?: string | undefined;
        sizes?: string | undefined;
        cite?: string | undefined;
        data?: string | undefined;
        form?: string | undefined;
        slot?: string | undefined;
        span?: number | undefined;
        style?: React.CSSProperties | undefined;
        summary?: string | undefined;
        pattern?: string | undefined;
        hidden?: boolean | undefined;
        start?: number | undefined;
        default?: boolean | undefined;
        wrap?: string | undefined;
        open?: boolean | undefined;
        multiple?: boolean | undefined;
        type?: string | undefined;
        lang?: string | undefined;
        max?: string | number | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: string | number | undefined;
        target?: string | undefined;
        crossOrigin?: string | undefined;
        href?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "false" | "true" | undefined;
        'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
        'aria-busy'?: boolean | "false" | "true" | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "date" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "false" | "true" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "false" | "true" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "false" | "true" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: boolean | "false" | "true" | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "false" | "true" | undefined;
        'aria-multiline'?: boolean | "false" | "true" | undefined;
        'aria-multiselectable'?: boolean | "false" | "true" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: boolean | "false" | "true" | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "false" | "true" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "false" | "true" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCopyCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCut?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCutCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onPaste?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onPasteCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCompositionEnd?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionEndCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionStart?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionStartCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionUpdate?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionUpdateCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onFocus?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onFocusCapture?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onBlurCapture?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onChange?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onChangeCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onBeforeInput?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onBeforeInputCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInput?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInputCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onReset?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onResetCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onSubmit?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onSubmitCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInvalid?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInvalidCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onLoad?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onError?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onErrorCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onKeyDown?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyDownCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyPress?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyPressCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyUpCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onAbort?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onAbortCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlay?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayThrough?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayThroughCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onDurationChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onDurationChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEmptied?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEmptiedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEncrypted?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEncryptedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEnded?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEndedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedData?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedDataCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedMetadata?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedMetadataCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadStart?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadStartCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPause?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPauseCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlay?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlayCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlaying?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlayingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onProgress?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onProgressCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onRateChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onRateChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeeked?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeekedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeeking?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeekingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onStalled?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onStalledCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSuspend?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSuspendCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTimeUpdate?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTimeUpdateCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onVolumeChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onVolumeChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onWaiting?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onWaitingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onAuxClick?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onAuxClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onContextMenu?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onContextMenuCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDoubleClick?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDoubleClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDrag?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnd?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEndCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnter?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnterCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragExit?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragExitCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragLeave?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragLeaveCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragOver?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragOverCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragStart?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragStartCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDrop?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDropCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onMouseDown?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseDownCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseEnter?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseLeave?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseMove?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseMoveCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOut?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOutCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOver?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOverCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseUp?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseUpCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onSelect?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSelectCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTouchCancel?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchCancelCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchEnd?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchEndCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchMove?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchMoveCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchStart?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchStartCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onPointerDown?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerDownCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerMove?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerMoveCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerUp?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerUpCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerCancel?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerCancelCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerEnter?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerEnterCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerLeave?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerLeaveCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOver?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOverCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOut?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOutCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onGotPointerCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onGotPointerCaptureCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onLostPointerCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onLostPointerCaptureCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onScroll?: (React.UIEventHandler<HTMLDivElement> & React.UIEventHandler<HTMLElement>) | undefined;
        onScrollCapture?: (React.UIEventHandler<HTMLDivElement> & React.UIEventHandler<HTMLElement>) | undefined;
        onWheel?: (React.WheelEventHandler<HTMLDivElement> & React.WheelEventHandler<HTMLElement>) | undefined;
        onWheelCapture?: (React.WheelEventHandler<HTMLDivElement> & React.WheelEventHandler<HTMLElement>) | undefined;
        onAnimationStart?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationStartCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationEnd?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationEndCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationIteration?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationIterationCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onTransitionEnd?: (React.TransitionEventHandler<HTMLDivElement> & React.TransitionEventHandler<HTMLElement>) | undefined;
        onTransitionEndCapture?: (React.TransitionEventHandler<HTMLDivElement> & React.TransitionEventHandler<HTMLElement>) | undefined;
        list?: string | undefined;
        classID?: string | undefined;
        useMap?: string | undefined;
        wmode?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        hrefLang?: string | undefined;
        integrity?: string | undefined;
        rel?: string | undefined;
        charSet?: string | undefined;
        download?: any;
        alt?: string | undefined;
        coords?: string | undefined;
        shape?: string | undefined;
        autoPlay?: boolean | undefined;
        controls?: boolean | undefined;
        loop?: boolean | undefined;
        mediaGroup?: string | undefined;
        muted?: boolean | undefined;
        playsInline?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        dateTime?: string | undefined;
        acceptCharset?: string | undefined;
        action?: string | undefined;
        autoComplete?: string | undefined;
        encType?: string | undefined;
        noValidate?: boolean | undefined;
        manifest?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        frameBorder?: string | number | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        sandbox?: string | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        srcDoc?: string | undefined;
        srcSet?: string | undefined;
        async?: boolean | undefined;
        accept?: string | undefined;
        capture?: string | boolean | undefined;
        checked?: boolean | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        challenge?: string | undefined;
        keyType?: string | undefined;
        keyParams?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        high?: number | undefined;
        low?: number | undefined;
        optimum?: number | undefined;
        reversed?: boolean | undefined;
        selected?: boolean | undefined;
        defer?: boolean | undefined;
        nonce?: string | undefined;
        scoped?: boolean | undefined;
        cellPadding?: string | number | undefined;
        cellSpacing?: string | number | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        cols?: number | undefined;
        rows?: number | undefined;
        kind?: string | undefined;
        srcLang?: string | undefined;
        poster?: string | undefined;
        content?: string | undefined;
    } | {
        className: string | undefined;
        id: string | undefined;
        key?: React.Key | null | undefined;
        title?: string | undefined;
        property?: string | undefined;
        translate?: "no" | "yes" | undefined;
        value?: string | number | readonly string[] | undefined;
        name?: string | undefined;
        sizes?: string | undefined;
        cite?: string | undefined;
        data?: string | undefined;
        form?: string | undefined;
        slot?: string | undefined;
        span?: number | undefined;
        style?: React.CSSProperties | undefined;
        summary?: string | undefined;
        pattern?: string | undefined;
        hidden?: boolean | undefined;
        start?: number | undefined;
        default?: boolean | undefined;
        wrap?: string | undefined;
        open?: boolean | undefined;
        multiple?: boolean | undefined;
        type?: string | undefined;
        lang?: string | undefined;
        max?: string | number | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: string | number | undefined;
        target?: string | undefined;
        crossOrigin?: string | undefined;
        href?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "false" | "true" | undefined;
        'aria-autocomplete'?: "none" | "both" | "inline" | "list" | undefined;
        'aria-busy'?: boolean | "false" | "true" | undefined;
        'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "date" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "false" | "true" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "false" | "true" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "false" | "true" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "false" | "true" | "tree" | undefined;
        'aria-hidden'?: boolean | "false" | "true" | undefined;
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "false" | "true" | undefined;
        'aria-multiline'?: boolean | "false" | "true" | undefined;
        'aria-multiselectable'?: boolean | "false" | "true" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
        'aria-readonly'?: boolean | "false" | "true" | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "false" | "true" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "false" | "true" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCopyCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCut?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCutCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onPaste?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onPasteCapture?: (React.ClipboardEventHandler<HTMLDivElement> & React.ClipboardEventHandler<HTMLElement>) | undefined;
        onCompositionEnd?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionEndCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionStart?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionStartCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionUpdate?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onCompositionUpdateCapture?: (React.CompositionEventHandler<HTMLDivElement> & React.CompositionEventHandler<HTMLElement>) | undefined;
        onFocus?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onFocusCapture?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onBlurCapture?: (React.FocusEventHandler<HTMLDivElement> & React.FocusEventHandler<HTMLElement>) | undefined;
        onChange?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onChangeCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onBeforeInput?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onBeforeInputCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInput?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInputCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onReset?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onResetCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onSubmit?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onSubmitCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInvalid?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onInvalidCapture?: (React.FormEventHandler<HTMLDivElement> & React.FormEventHandler<HTMLElement>) | undefined;
        onLoad?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onError?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onErrorCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onKeyDown?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyDownCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyPress?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyPressCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onKeyUpCapture?: (React.KeyboardEventHandler<HTMLDivElement> & React.KeyboardEventHandler<HTMLElement>) | undefined;
        onAbort?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onAbortCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlay?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayThrough?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onCanPlayThroughCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onDurationChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onDurationChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEmptied?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEmptiedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEncrypted?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEncryptedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEnded?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onEndedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedData?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedDataCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedMetadata?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadedMetadataCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadStart?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onLoadStartCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPause?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPauseCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlay?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlayCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlaying?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onPlayingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onProgress?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onProgressCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onRateChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onRateChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeeked?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeekedCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeeking?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSeekingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onStalled?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onStalledCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSuspend?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSuspendCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTimeUpdate?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTimeUpdateCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onVolumeChange?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onVolumeChangeCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onWaiting?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onWaitingCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onAuxClick?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onAuxClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onContextMenu?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onContextMenuCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDoubleClick?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDoubleClickCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onDrag?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnd?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEndCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnter?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragEnterCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragExit?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragExitCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragLeave?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragLeaveCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragOver?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragOverCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragStart?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDragStartCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDrop?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onDropCapture?: (React.DragEventHandler<HTMLDivElement> & React.DragEventHandler<HTMLElement>) | undefined;
        onMouseDown?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseDownCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseEnter?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseLeave?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseMove?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseMoveCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOut?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOutCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOver?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseOverCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseUp?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onMouseUpCapture?: (React.MouseEventHandler<HTMLDivElement> & React.MouseEventHandler<HTMLElement>) | undefined;
        onSelect?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onSelectCapture?: (React.ReactEventHandler<HTMLDivElement> & React.ReactEventHandler<HTMLElement>) | undefined;
        onTouchCancel?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchCancelCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchEnd?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchEndCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchMove?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchMoveCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchStart?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onTouchStartCapture?: (React.TouchEventHandler<HTMLDivElement> & React.TouchEventHandler<HTMLElement>) | undefined;
        onPointerDown?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerDownCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerMove?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerMoveCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerUp?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerUpCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerCancel?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerCancelCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerEnter?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerEnterCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerLeave?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerLeaveCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOver?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOverCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOut?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onPointerOutCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onGotPointerCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onGotPointerCaptureCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onLostPointerCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onLostPointerCaptureCapture?: (React.PointerEventHandler<HTMLDivElement> & React.PointerEventHandler<HTMLElement>) | undefined;
        onScroll?: (React.UIEventHandler<HTMLDivElement> & React.UIEventHandler<HTMLElement>) | undefined;
        onScrollCapture?: (React.UIEventHandler<HTMLDivElement> & React.UIEventHandler<HTMLElement>) | undefined;
        onWheel?: (React.WheelEventHandler<HTMLDivElement> & React.WheelEventHandler<HTMLElement>) | undefined;
        onWheelCapture?: (React.WheelEventHandler<HTMLDivElement> & React.WheelEventHandler<HTMLElement>) | undefined;
        onAnimationStart?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationStartCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationEnd?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationEndCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationIteration?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onAnimationIterationCapture?: (React.AnimationEventHandler<HTMLDivElement> & React.AnimationEventHandler<HTMLElement>) | undefined;
        onTransitionEnd?: (React.TransitionEventHandler<HTMLDivElement> & React.TransitionEventHandler<HTMLElement>) | undefined;
        onTransitionEndCapture?: (React.TransitionEventHandler<HTMLDivElement> & React.TransitionEventHandler<HTMLElement>) | undefined;
        list?: string | undefined;
        classID?: string | undefined;
        useMap?: string | undefined;
        wmode?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        hrefLang?: string | undefined;
        integrity?: string | undefined;
        rel?: string | undefined;
        charSet?: string | undefined;
        download?: any;
        alt?: string | undefined;
        coords?: string | undefined;
        shape?: string | undefined;
        autoPlay?: boolean | undefined;
        controls?: boolean | undefined;
        loop?: boolean | undefined;
        mediaGroup?: string | undefined;
        muted?: boolean | undefined;
        playsInline?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        dateTime?: string | undefined;
        acceptCharset?: string | undefined;
        action?: string | undefined;
        autoComplete?: string | undefined;
        encType?: string | undefined;
        noValidate?: boolean | undefined;
        manifest?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        frameBorder?: string | number | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        sandbox?: string | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        srcDoc?: string | undefined;
        srcSet?: string | undefined;
        async?: boolean | undefined;
        accept?: string | undefined;
        capture?: string | boolean | undefined;
        checked?: boolean | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        step?: string | number | undefined;
        challenge?: string | undefined;
        keyType?: string | undefined;
        keyParams?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        high?: number | undefined;
        low?: number | undefined;
        optimum?: number | undefined;
        reversed?: boolean | undefined;
        selected?: boolean | undefined;
        defer?: boolean | undefined;
        nonce?: string | undefined;
        scoped?: boolean | undefined;
        cellPadding?: string | number | undefined;
        cellSpacing?: string | number | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        cols?: number | undefined;
        rows?: number | undefined;
        kind?: string | undefined;
        srcLang?: string | undefined;
        poster?: string | undefined;
        content?: string | undefined;
    };
    isOpen: boolean;
};
