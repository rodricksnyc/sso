{"version":3,"file":"controlTypes.js","names":[],"sources":["../../src/Accordion2/controlTypes.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\ntype Controlled = {\n  /**\n   * Use this property (alongside toggleOpen) if you wish to use the component in a `controlled` manner.\n   * isOpen determines whether the Accordion is currently open or closed\n   **/\n  isOpen: boolean\n  /**\n   * Use this property (alongside isOpen) if you wish to use the component in a `controlled` manner.\n   * toggleOpen is a function that should control the value / state of isOpen\n   */\n  toggleOpen: (isOpen: boolean) => void\n}\n\ntype Uncontrolled = {\n  isOpen?: never\n  toggleOpen?: never\n}\n\ntype Others = {\n  /**\n   * Use this property if you wish to use the component in a `uncontrolled` manner and have it open when initially rendering.\n   * Component will hold internal state and open and close on disclosure click\n   **/\n  defaultOpen?: boolean\n  /**\n   * Callback that is triggered when closing the Accordion (i.e. when clicking on an open Accordion)\n   */\n  onClose?: () => void // called when the component is closed\n  /**\n   * Callback that is triggered when opening the Accordion (i.e. when clicking on a closed Accordion)\n   */\n  onOpen?: () => void // called when the component is opened\n}\n\n/**\n * @deprecated Use  `Accordion2ControlProps` instead\n */\nexport type ControlledLoosely = Partial<Controlled> & Others\n\n/**\n * Prevents the creation of a \"semi-controlled\" component. Prevents consumers\n * from mixing controlled vs uncontrolled properties\n *\n * Specifically this type checks toggleOpen & isOpen are both specified or\n * both undefined.\n */\nexport type ControlledOrUncontrolled = (Controlled | Uncontrolled) & Others\n"],"mappings":""}