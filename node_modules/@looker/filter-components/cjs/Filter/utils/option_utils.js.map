{"version":3,"file":"option_utils.js","names":["createOption","value","label","createOptions","values","valuesArray","Array","isArray","map","createEnumeration","isParameter","e","unescapeParameterValue","String","replace","filterOptions","options","filterTerm","excludedValues","filter","option","filterOption","matchesFilter","filterText","trim","toLowerCase","optionText","getComboboxText","indexOf","includes"],"sources":["../../../../src/Filter/utils/option_utils.ts"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport { getComboboxText } from '@looker/components'\nimport type { Option } from '../types/option'\n\nconst createOption = (value: string): Option => ({\n  value,\n  label: value,\n})\n\nexport const createOptions = (values?: string | string[]) => {\n  if (!values) return []\n  const valuesArray: any[] = !Array.isArray(values) ? [values] : values\n  return valuesArray.map((value) => createOption(value))\n}\n\n/**\n * Creates an option from an enumeration's label and value.\n * For parameters we unescape the value since the filter expression value is\n * returned escaped from the backend.\n * If the enumeration value remains escaped the unescaped value will not match\n * and a new option will be added to the option list.\n *\n * https://docs.looker.com/reference/filter-expressions\n *\n * @param e Enumeration option\n */\nexport const createEnumeration = (isParameter = false) => (\n  e: Option\n): Option => ({\n  label: e.label,\n  value: isParameter ? unescapeParameterValue(e.value) : String(e.value),\n})\n\n/**\n * Unescape parameter values to match the escape done in\n * ht_field_string.rb escape_non_advanced method\n */\nconst unescapeParameterValue = (value: string) =>\n  String(value)\n    .replace(/^\\^([-])/, '$1')\n    .replace(/\\^([_%,\"'])/g, '$1')\n\n/**\n * Filters a list of options by a filter term and/or values to exclude\n *\n * @param options List of available options\n * @param filterTerm Matches case-insensitive anywhere in the option's label (or value if label is undefined)\n */\nexport const filterOptions = (\n  options: Option[],\n  filterTerm?: string,\n  excludedValues?: string[]\n) => {\n  if (!excludedValues && (!filterTerm || filterTerm === '')) return options\n  return options.filter((option) =>\n    filterOption(option, filterTerm || '', excludedValues)\n  )\n}\n\nconst filterOption = (\n  option: Option,\n  filterTerm: string,\n  excludedValues?: string[]\n): boolean => {\n  let matchesFilter = true\n\n  if (filterTerm !== '') {\n    const filterText = filterTerm.trim().toLowerCase()\n    const optionText = getComboboxText(option).trim().toLowerCase()\n    matchesFilter = optionText.indexOf(filterText) > -1\n  }\n\n  return excludedValues\n    ? matchesFilter && !excludedValues.includes(option.value)\n    : matchesFilter\n}\n"],"mappings":";;;;;;;AAyBA;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;EAAA,OAA4B;IAC/CA,KAAK,EAALA,KAD+C;IAE/CC,KAAK,EAAED;EAFwC,CAA5B;AAAA,CAArB;;AAKO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAgC;EAC3D,IAAI,CAACA,MAAL,EAAa,OAAO,EAAP;EACb,IAAMC,WAAkB,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAD,GAAyB,CAACA,MAAD,CAAzB,GAAoCA,MAA/D;EACA,OAAOC,WAAW,CAACG,GAAZ,CAAgB,UAACP,KAAD;IAAA,OAAWD,YAAY,CAACC,KAAD,CAAvB;EAAA,CAAhB,CAAP;AACD,CAJM;;;;AAiBA,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB;EAAA,IAACC,WAAD,uEAAe,KAAf;EAAA,OAAyB,UACxDC,CADwD;IAAA,OAE5C;MACZT,KAAK,EAAES,CAAC,CAACT,KADG;MAEZD,KAAK,EAAES,WAAW,GAAGE,sBAAsB,CAACD,CAAC,CAACV,KAAH,CAAzB,GAAqCY,MAAM,CAACF,CAAC,CAACV,KAAH;IAFjD,CAF4C;EAAA,CAAzB;AAAA,CAA1B;;;;AAWP,IAAMW,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACX,KAAD;EAAA,OAC7BY,MAAM,CAACZ,KAAD,CAAN,CACGa,OADH,CACW,UADX,EACuB,IADvB,EAEGA,OAFH,CAEW,cAFX,EAE2B,IAF3B,CAD6B;AAAA,CAA/B;;AAWO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,OAD2B,EAE3BC,UAF2B,EAG3BC,cAH2B,EAIxB;EACH,IAAI,CAACA,cAAD,KAAoB,CAACD,UAAD,IAAeA,UAAU,KAAK,EAAlD,CAAJ,EAA2D,OAAOD,OAAP;EAC3D,OAAOA,OAAO,CAACG,MAAR,CAAe,UAACC,MAAD;IAAA,OACpBC,YAAY,CAACD,MAAD,EAASH,UAAU,IAAI,EAAvB,EAA2BC,cAA3B,CADQ;EAAA,CAAf,CAAP;AAGD,CATM;;;;AAWP,IAAMG,YAAY,GAAG,SAAfA,YAAe,CACnBD,MADmB,EAEnBH,UAFmB,EAGnBC,cAHmB,EAIP;EACZ,IAAII,aAAa,GAAG,IAApB;;EAEA,IAAIL,UAAU,KAAK,EAAnB,EAAuB;IACrB,IAAMM,UAAU,GAAGN,UAAU,CAACO,IAAX,GAAkBC,WAAlB,EAAnB;IACA,IAAMC,UAAU,GAAG,IAAAC,2BAAA,EAAgBP,MAAhB,EAAwBI,IAAxB,GAA+BC,WAA/B,EAAnB;IACAH,aAAa,GAAGI,UAAU,CAACE,OAAX,CAAmBL,UAAnB,IAAiC,CAAC,CAAlD;EACD;;EAED,OAAOL,cAAc,GACjBI,aAAa,IAAI,CAACJ,cAAc,CAACW,QAAf,CAAwBT,MAAM,CAACnB,KAA/B,CADD,GAEjBqB,aAFJ;AAGD,CAhBD"}