import "core-js/modules/es.array.from.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.some.js";
import { endOfMonth, getDay, getDaysInMonth, isSameDay, startOfMonth, setDate, isAfter, isBefore } from 'date-fns';
import React, { useCallback, useContext } from 'react';
import styled, { ThemeContext } from 'styled-components';
import { fadeIn } from '@looker/design-tokens';
import { Grid } from '../Layout';
import { Day } from './Day';
import { Cell } from './Cell';
import { MonthTitle } from './MonthTitle';

var getMonthPadding = function getMonthPadding(month, firstDayOfWeek) {
  var startDate = startOfMonth(month);
  var endDate = endOfMonth(month);
  var startDay = getDay(startDate);
  var endDay = getDay(endDate);
  var startPadding = startDay - firstDayOfWeek;
  var endPadding = 6 - endDay + firstDayOfWeek;
  return {
    endPadding: endPadding,
    startPadding: startPadding
  };
};

var getDaysArray = function getDaysArray(month, startPadding, endPadding) {
  var daysInMonth = getDaysInMonth(month);
  var totalDays = startPadding + daysInMonth + endPadding;
  return Array.from(Array(totalDays), function (_, i) {
    if (i < startPadding) return 'before';
    if (i > totalDays - endPadding - 1) return 'after';
    var dayOfMonth = i - startPadding + 1;
    return setDate(month, dayOfMonth);
  });
};

var getRangeType = function getRangeType(_ref) {
  var datesSelected = _ref.datesSelected,
      draftTo = _ref.draftTo;
  if (datesSelected.length === 2) return 'selected';
  if (draftTo) return 'draft';
  return 'none';
};

var getRangePosition = function getRangePosition(day, month, _ref2) {
  var datesSelected = _ref2.datesSelected,
      draftTo = _ref2.draftTo;
  var start = datesSelected[0];
  var end = datesSelected[1] || draftTo;
  if (!start || !end) return undefined;

  if (day === 'before') {
    if (start && end && isBefore(start, startOfMonth(month)) && isAfter(end, startOfMonth(month))) {
      return 'middle';
    }

    return undefined;
  }

  if (day === 'after') {
    if (start && end && isBefore(start, endOfMonth(month)) && isAfter(end, endOfMonth(month))) {
      return 'middle';
    }

    return undefined;
  }

  if (isSameDay(day, start) && isSameDay(day, end)) return undefined;
  if (isSameDay(day, start)) return 'start';
  if (isSameDay(day, end)) return 'end';
  if (isAfter(day, start) && isBefore(day, end)) return 'middle';
  return undefined;
};

export var Month = styled(function (_ref3) {
  var className = _ref3.className,
      datesSelected = _ref3.datesSelected,
      draftTo = _ref3.draftTo,
      firstDayOfWeek = _ref3.firstDayOfWeek,
      fullRender = _ref3.fullRender,
      index = _ref3.index,
      locale = _ref3.locale,
      onSelect = _ref3.onSelect,
      onDraftSelect = _ref3.onDraftSelect,
      date = _ref3.date,
      setItemPosition = _ref3.setItemPosition;

  var _getMonthPadding = getMonthPadding(date, firstDayOfWeek),
      startPadding = _getMonthPadding.startPadding,
      endPadding = _getMonthPadding.endPadding;

  var days = getDaysArray(date, startPadding, endPadding);
  var rangeType = getRangeType({
    datesSelected: datesSelected,
    draftTo: draftTo
  });
  var ref = useCallback(function (element) {
    if (element) {
      setItemPosition(index, element);
    }
  }, [setItemPosition, index]);
  var titleInline = startPadding > 2;
  var firstDayRangePosition = getRangePosition(startOfMonth(date), date, {
    datesSelected: datesSelected,
    draftTo: draftTo
  });
  var titleRangeType = !titleInline && fullRender && firstDayRangePosition === 'middle' ? rangeType : 'none';

  var _useContext = useContext(ThemeContext),
      space = _useContext.space;

  var height = "calc(".concat(space.u8, " * ").concat(days.length / 7, ")");
  return React.createElement("div", {
    className: className,
    ref: ref
  }, React.createElement(MonthTitle, {
    month: date,
    rangePosition: firstDayRangePosition,
    rangeType: titleRangeType,
    inline: titleInline,
    locale: locale
  }), React.createElement(Grid, {
    columns: 7,
    gap: "none",
    height: height,
    className: fullRender ? 'full-render' : ''
  }, fullRender && days.map(function (day, i) {
    var rangePosition = getRangePosition(day, date, {
      datesSelected: datesSelected,
      draftTo: draftTo
    });
    return React.createElement(Cell, {
      key: i,
      weekStart: i % 7 === 0,
      weekEnd: i % 7 === 6,
      rangeType: rangeType,
      rangePosition: rangePosition
    }, typeof day !== 'string' && React.createElement(Day, {
      date: day,
      locale: locale,
      onSelect: onSelect,
      onDraftSelect: onDraftSelect,
      selected: datesSelected.some(function (date) {
        return isSameDay(date, day);
      })
    }));
  })));
}).withConfig({
  displayName: "Month",
  componentId: "sc-1d3pod3-0"
})(["width:fit-content;", "{grid-template-columns:repeat(7,auto);&.full-render{animation-duration:", ";animation-fill-mode:forwards;animation-name:", ";}}"], Grid, function (_ref4) {
  var theme = _ref4.theme;
  return "".concat(theme.transitions.moderate, "ms");
}, fadeIn);
//# sourceMappingURL=Month.js.map