var _excluded = ["fullRender", "index", "setItemPosition", "date", "locale"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { getYear } from 'date-fns';
import React, { useCallback, useContext } from 'react';
import { ThemeContext } from 'styled-components';
import { Grid, SpaceVertical } from '../Layout';
import { Span } from '../Text';
import { MonthPicker } from './MonthPicker';
import { confirmToday } from './utils/dateConfirmations';
export var Year = function Year(_ref) {
  var fullRender = _ref.fullRender,
      index = _ref.index,
      setItemPosition = _ref.setItemPosition,
      date = _ref.date,
      locale = _ref.locale,
      props = _objectWithoutProperties(_ref, _excluded);

  var ref = useCallback(function (element) {
    if (element) {
      setItemPosition(index, element);
    }
  }, [setItemPosition, index]);

  var _useContext = useContext(ThemeContext),
      space = _useContext.space;

  var height = "calc(".concat(space.u7, " * 3 + ").concat(space.u3, " * 2)");
  return React.createElement(SpaceVertical, {
    py: "u3",
    px: "u4",
    gap: "u5",
    ref: ref
  }, React.createElement(Span, {
    fontSize: "small",
    color: "text5",
    fontWeight: "bold"
  }, getYear(date)), React.createElement(Grid, {
    columns: 4,
    gap: "u3",
    height: height
  }, fullRender && _toConsumableArray(Array(12)).map(function (_, i) {
    return React.createElement(MonthPicker, _extends({
      isTodaysMonth: confirmToday(i),
      key: i,
      monthNumber: i,
      date: date,
      locale: locale
    }, props));
  })));
};
//# sourceMappingURL=Year.js.map