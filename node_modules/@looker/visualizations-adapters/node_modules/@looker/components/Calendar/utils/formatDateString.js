function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import { getDateLocale } from '@looker/i18n';
import format from 'date-fns-tz/format';
import utcToZonedTime from 'date-fns-tz/utcToZonedTime';
import repeat from 'lodash/repeat';
import trim from 'lodash/trim';
var dateFormatRepetitions = {
  full: 4,
  "long": 3,
  medium: 2,
  "short": 1
};

var isDateFormat = function isDateFormat(stringFormat) {
  return dateFormatRepetitions[stringFormat];
};

var getStringFormat = function getStringFormat(stringFormat) {
  var timeZone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  var _ref = arguments.length > 2 ? arguments[2] : undefined,
      _ref$date = _ref.date,
      date = _ref$date === void 0 ? true : _ref$date,
      _ref$time = _ref.time,
      time = _ref$time === void 0 ? true : _ref$time;

  var dateFormat = repeat('P', dateFormatRepetitions[stringFormat]);
  var timeFormat = repeat('p', dateFormatRepetitions[stringFormat]);
  var timeZoneFormat = repeat('z', dateFormatRepetitions[stringFormat]);
  return trim("".concat(date ? dateFormat : '').concat(time ? timeFormat : '', " ").concat(timeZone ? timeZoneFormat : ''));
};

export var formatDateString = function formatDateString(date) {
  var stringFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'P';
  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDateLocale();
  var timeZone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  if (!date) {
    return '';
  }

  var renderedDate = timeZone ? utcToZonedTime(date, timeZone) : date;
  var actualFormat = isDateFormat(stringFormat) ? getStringFormat(stringFormat, timeZone, options) : stringFormat;
  return format(renderedDate, actualFormat, _objectSpread({
    locale: locale
  }, timeZone && {
    timeZone: timeZone
  }));
};
//# sourceMappingURL=formatDateString.js.map