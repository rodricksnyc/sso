import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { addYears, getYear, setMonth, setYear } from 'date-fns';
import React, { useCallback, useEffect, useState } from 'react';
import { ChevronLeft } from '@styled-icons/material-rounded/ChevronLeft/ChevronLeft';
import { ChevronRight } from '@styled-icons/material-rounded/ChevronRight/ChevronRight';
import { Close } from '@styled-icons/material/Close';
import { Divider } from '../Divider';
import { IconButton } from '../Button';
import { InlineInputText } from '../Form';
import { Space } from '../Layout';
import { useTranslation } from '../utils';
import { formatDateString } from './utils';
import { YearList } from './YearList';
export var MonthPickerNav = function MonthPickerNav(_ref) {
  var date = _ref.date,
      locale = _ref.locale,
      onClose = _ref.onClose,
      onMonthChange = _ref.onMonthChange;

  var _useTranslation = useTranslation('MonthPickerNav'),
      t = _useTranslation.t;

  var _useState = useState(date),
      _useState2 = _slicedToArray(_useState, 2),
      trackYear = _useState2[0],
      setTrackYear = _useState2[1];

  var _useState3 = useState(formatDateString(trackYear, 'yyyy', locale)),
      _useState4 = _slicedToArray(_useState3, 2),
      inputText = _useState4[0],
      setInputText = _useState4[1];

  var _useState5 = useState(date),
      _useState6 = _slicedToArray(_useState5, 2),
      baseMonth = _useState6[0],
      setBaseMonth = _useState6[1];

  var handleInputChange = useCallback(function (event) {
    return setInputText(event.target.value);
  }, [setInputText]);
  useEffect(function () {
    setInputText(getYear(trackYear).toString());
  }, [trackYear]);
  var handleInputBlur = useCallback(function (event) {
    if (event.target.value.length === 4) {
      var newYear = setYear(trackYear, Number(event.target.value));
      setTrackYear(newYear);
      setBaseMonth(newYear);
    }
  }, [trackYear]);
  var handleNextYear = useCallback(function () {
    var newYear = addYears(trackYear, 1);
    setTrackYear(newYear);
    setBaseMonth(newYear);
  }, [setTrackYear, trackYear]);
  var handlePreviousYear = useCallback(function () {
    var newYear = addYears(trackYear, -1);
    setTrackYear(newYear);
    setBaseMonth(newYear);
  }, [setTrackYear, trackYear]);
  var handleMonthClick = useCallback(function (month) {
    onMonthChange(setMonth(trackYear, month));
    onClose();
  }, [trackYear, onMonthChange, onClose]);
  return React.createElement(React.Fragment, null, React.createElement(Space, {
    between: true,
    py: "u3",
    pl: "u05",
    pr: "u5"
  }, React.createElement(Space, {
    justify: "start",
    gap: "u2"
  }, React.createElement(IconButton, {
    icon: React.createElement(ChevronLeft, null),
    label: t('previous year'),
    onClick: handlePreviousYear,
    size: "xsmall"
  }), React.createElement(InlineInputText, {
    onBlur: handleInputBlur,
    onChange: handleInputChange,
    value: inputText
  }), React.createElement(IconButton, {
    icon: React.createElement(ChevronRight, null),
    label: t('next year'),
    onClick: handleNextYear,
    size: "xsmall"
  })), React.createElement(Space, {
    justify: "end"
  }, React.createElement(IconButton, {
    icon: React.createElement(Close, null),
    label: t('close'),
    onClick: onClose,
    size: "xsmall"
  }))), React.createElement(Divider, {
    appearance: "light"
  }), React.createElement(YearList, {
    baseMonth: baseMonth,
    currentDate: trackYear,
    locale: locale,
    onMonthChange: setTrackYear,
    onMonthClick: handleMonthClick,
    selectedMonth: date,
    setBaseMonth: setBaseMonth
  }));
};
//# sourceMappingURL=MonthPickerNav.js.map