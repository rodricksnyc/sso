function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.from.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.find.js";
import "core-js/modules/web.timers.js";
import "core-js/modules/es.array.find-index.js";
import "core-js/modules/es.date.to-string.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { isSameMonth } from 'date-fns';
import debounce from 'lodash/debounce';
import React, { useCallback, useEffect, useMemo, useRef } from 'react';
import styled from 'styled-components';
import { useCallbackRef, useMeasuredElement, useScrollPosition } from '../utils';
export var ScrollableDateList = styled(function (_ref) {
  var className = _ref.className,
      currentDate = _ref.currentDate,
      baseMonth = _ref.baseMonth,
      setBaseMonth = _ref.setBaseMonth,
      buffer = _ref.buffer,
      getItemDate = _ref.getItemDate,
      onMonthChange = _ref.onMonthChange,
      Component = _ref.itemComponent,
      itemProps = _ref.itemProps,
      thresholdRatio = _ref.thresholdRatio;

  var _useCallbackRef = useCallbackRef(),
      _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),
      containerElement = _useCallbackRef2[0],
      ref = _useCallbackRef2[1];

  var _useMeasuredElement = useMeasuredElement(containerElement),
      _useMeasuredElement2 = _slicedToArray(_useMeasuredElement, 1),
      height = _useMeasuredElement2[0].height;

  var scrollPosition = useScrollPosition(containerElement);
  var itemPositions = useRef([]);
  var dates = useMemo(function () {
    var total = Array(buffer * 2 + 1);
    var dateArray = Array.from(total, function (_, i) {
      return getItemDate(baseMonth, i - buffer);
    });
    itemPositions.current = dateArray.map(function (d) {
      return {
        date: d
      };
    });
    return dateArray;
  }, [baseMonth, buffer, getItemDate]);
  var containerHasHeight = height !== 0;
  var setItemPosition = useCallback(function (index, element) {
    if (containerHasHeight) {
      itemPositions.current[index] = _objectSpread(_objectSpread({}, itemPositions.current[index]), {}, {
        bottom: element.offsetTop + element.offsetHeight,
        top: element.offsetTop
      });
    }
  }, [containerHasHeight]);
  var hasAutoScrolledToBaseItem = useRef(false);
  useEffect(function () {
    hasAutoScrolledToBaseItem.current = false;
  }, [baseMonth, buffer]);
  useEffect(function () {
    var t = 0;

    if (containerElement && height) {
      if (!hasAutoScrolledToBaseItem.current) {
        var currentMonth = itemPositions.current.find(function (itemPos) {
          return isSameMonth(itemPos.date, baseMonth);
        });

        if (currentMonth !== null && currentMonth !== void 0 && currentMonth.top && currentMonth !== null && currentMonth !== void 0 && currentMonth.bottom) {
          var closeToBottom = scrollPosition > containerElement.scrollHeight - height * 2;
          var scrollTarget = closeToBottom ? currentMonth.bottom - height : currentMonth.top;
          containerElement.scrollTo(0, scrollTarget);
          hasAutoScrolledToBaseItem.current = true;
        }
      } else {
        var atTop = scrollPosition === 0;
        var atBottom = scrollPosition === containerElement.scrollHeight - height;

        if (atTop || atBottom) {
          var goToMonth = atTop ? dates[0] : dates[dates.length - 1];
          onMonthChange(goToMonth);
          setBaseMonth(goToMonth);
        } else {
          var updateCurrentMonth = debounce(function () {
            var threshold = scrollPosition + height * thresholdRatio;
            var inView = itemPositions.current.find(function (itemPos) {
              return itemPos.top && itemPos.bottom && threshold > itemPos.top && threshold < itemPos.bottom;
            });

            if (inView && !isSameMonth(currentDate, inView.date)) {
              onMonthChange(inView.date);
            }
          });
          t = window.setTimeout(updateCurrentMonth, 50);
        }
      }
    }

    return function () {
      window.clearTimeout(t);
    };
  }, [containerElement, currentDate, height, scrollPosition, dates, onMonthChange, setBaseMonth, thresholdRatio, baseMonth]);
  var inViewIndex = dates.findIndex(function (d) {
    return isSameMonth(d, currentDate);
  });
  return React.createElement("div", {
    className: className,
    ref: ref
  }, dates.map(function (item, i) {
    var fullRender = Math.abs(i - inViewIndex) <= 1;
    return React.createElement(Component, _extends({
      key: item.toString(),
      index: i,
      fullRender: fullRender,
      date: item
    }, itemProps, {
      setItemPosition: setItemPosition
    }));
  }));
}).withConfig({
  displayName: "ScrollableDateList",
  componentId: "sc-1jksxb7-0"
})(["height:220px;overflow-y:scroll;position:relative;"]);
//# sourceMappingURL=ScrollableDateList.js.map