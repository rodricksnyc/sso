var _excluded = ["accept", "buttonText", "className", "handleFile", "onChange", "onClick", "placeholder", "type"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useState } from 'react';
import styled from 'styled-components';
import { Space } from '../../../Layout/Space';
import { InputText } from '../InputText';
import { ButtonOutline } from '../../../Button/ButtonOutline';
import { omitAriaAndValidationProps, pickAriaAndValidationProps } from '../ariaProps';
var HiddenFileInput = styled.input.attrs(function () {
  return {
    'data-testid': 'input-file',
    type: 'file'
  };
}).withConfig({
  displayName: "InputFile__HiddenFileInput",
  componentId: "sc-1469vmt-0"
})(["display:none;"]);
export var InputFile = styled(function (_ref) {
  var _ref$accept = _ref.accept,
      accept = _ref$accept === void 0 ? '' : _ref$accept,
      _ref$buttonText = _ref.buttonText,
      buttonText = _ref$buttonText === void 0 ? 'Upload File' : _ref$buttonText,
      className = _ref.className,
      handleFile = _ref.handleFile,
      onChange = _ref.onChange,
      onClick = _ref.onClick,
      placeholder = _ref.placeholder,
      type = _ref.type,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      fileName = _useState2[0],
      setFileName = _useState2[1];

  var hiddenFileInput = useRef(null);
  var ariaProps = pickAriaAndValidationProps(restProps);
  var buttonOutlineProps = omitAriaAndValidationProps(restProps);

  var handleClick = function handleClick(event) {
    var _hiddenFileInput$curr;

    onClick && onClick(event);
    hiddenFileInput === null || hiddenFileInput === void 0 ? void 0 : (_hiddenFileInput$curr = hiddenFileInput.current) === null || _hiddenFileInput$curr === void 0 ? void 0 : _hiddenFileInput$curr.click();
  };

  var handleChange = function handleChange(event) {
    onChange && onChange(event);

    if (!event.target.files) {
      console.warn('There was a problem uploading the file.');
      return;
    }

    var fileUploaded = event.target.files[0];
    handleFile(fileUploaded);
    setFileName(fileUploaded.name);
  };

  return React.createElement(Space, {
    className: className
  }, React.createElement(InputText, _extends({
    placeholder: placeholder,
    value: fileName,
    readOnly: true
  }, ariaProps)), React.createElement(ButtonOutline, _extends({
    onClick: handleClick
  }, buttonOutlineProps), buttonText), React.createElement(HiddenFileInput, {
    onChange: handleChange,
    ref: hiddenFileInput,
    accept: accept
  }));
}).withConfig({
  displayName: "InputFile",
  componentId: "sc-1469vmt-1"
})([""]);
//# sourceMappingURL=InputFile.js.map