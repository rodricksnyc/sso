import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.object.assign.js";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import omit from 'lodash/omit';
import { FloatingLabelField, omitFieldProps, pickFieldProps } from '../Field';
import { getHasValue } from '../Field/useFloatingLabel';
import { useFormContext } from '../../Form';
import { Tooltip } from '../../../Tooltip';
import { useID, useTranslation } from '../../../utils';
import { InputTimeSelect } from '../../Inputs/InputTimeSelect';
export var FieldTimeSelect = styled(forwardRef(function (props, ref) {
  var validationMessage = useFormContext(props);
  var id = useID(props.id);
  var fieldProps = omit(omitFieldProps(props), ['onChange']);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      formatError = _useState2[0],
      setFormatError = _useState2[1];

  var onChange = function onChange(value) {
    props.onChange && props.onChange(value);

    if (value) {
      setFormatError('');
    } else {
      setFormatError('Invalid Time');
    }
  };

  var onBlur = function onBlur() {
    setFormatError('');
  };

  var errorMessage = formatError ? {
    message: formatError,
    type: 'error'
  } : validationMessage;

  var _useTranslation = useTranslation('TimeSelect'),
      translate = _useTranslation.t;

  return React.createElement(FloatingLabelField, _extends({
    "data-testid": "FieldSelectMultiId"
  }, pickFieldProps(props), {
    id: id,
    validationMessage: errorMessage,
    hasValue: getHasValue(props)
  }), React.createElement(Tooltip, {
    placement: "top-end",
    content: translate('Select Time')
  }, React.createElement("div", null, React.createElement(InputTimeSelect, _extends({}, fieldProps, {
    "aria-labelledby": "labelledby-".concat(id),
    id: id,
    validationType: errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.type,
    ref: ref,
    onChange: onChange,
    onBlur: onBlur
  })))));
})).withConfig({
  displayName: "FieldTimeSelect",
  componentId: "sc-18cfbnj-0"
})([""]);
//# sourceMappingURL=FieldTimeSelect.js.map