"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonItem = void 0;

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _pick = _interopRequireDefault(require("lodash/pick"));

var _Ripple = require("../Ripple");

var _height = require("../Form/Inputs/height");

var _ButtonSetContext = require("./ButtonSetContext");

const _excluded = ["children", "className", "onClick", "style", "value"],
      _excluded2 = ["callbacks"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const ButtonLayout = (0, _react.forwardRef)((_ref, forwardedRef) => {
  let children = _ref.children,
      className = _ref.className,
      onClick = _ref.onClick,
      style = _ref.style,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, _excluded);

  const _useContext = (0, _react.useContext)(_ButtonSetContext.ButtonSetContext),
        disabled = _useContext.disabled,
        contextValue = _useContext.value,
        onItemClick = _useContext.onItemClick;

  function handleClick(e) {
    onClick && onClick(e);

    if (!e.defaultPrevented) {
      onItemClick && onItemClick(e);
    }
  }

  let itemValue = '';

  if (value !== undefined) {
    itemValue = value;
  } else if (typeof children === 'string') {
    itemValue = children;
  }

  let selected = false;

  if (contextValue) {
    if (typeof contextValue === 'string') {
      selected = contextValue === itemValue;
    } else {
      selected = contextValue.includes(itemValue);
    }
  }

  const _useBoundedRipple = (0, _Ripple.useBoundedRipple)({
    className,
    color: selected ? 'key' : 'neutral',
    ref: forwardedRef,
    style
  }),
        callbacks = _useBoundedRipple.callbacks,
        rippleProps = _objectWithoutProperties(_useBoundedRipple, _excluded2);

  const rippleHandlers = (0, _Ripple.useRippleHandlers)(callbacks, _objectSpread({}, (0, _pick.default)(_objectSpread({}, props), _Ripple.rippleHandlerKeys)), disabled);
  return _react.default.createElement("button", _extends({
    "aria-pressed": selected,
    onClick: handleClick,
    value: itemValue,
    disabled: disabled,
    type: "button"
  }, (0, _designTokens.omitStyledProps)(props), rippleProps, rippleHandlers), children);
});
ButtonLayout.displayName = 'ButtonLayout';
const ButtonItem = (0, _styledComponents.default)(ButtonLayout).withConfig({
  displayName: "ButtonItem",
  componentId: "sc-22szay-0"
})(["", " align-items:center;background:transparent;border:none;color:", ";cursor:pointer;display:inline-flex;font-family:inherit;font-size:", ";height:", ";justify-content:center;margin:0;padding:0 ", ";transition:background ", "ms ease;user-select:none;", " &:active,&:hover{background:", ";color:", ";}&:focus{outline:none;}&[disabled]{color:", ";cursor:default;&:hover{background:inherit;}}&[aria-pressed='true']{background:", ";color:", ";&[disabled]{background:", ";color:", ";}}"], _Ripple.rippleStyle, ({
  theme
}) => theme.colors.text3, ({
  theme
}) => theme.fontSizes.small, _height.inputHeight, ({
  theme
}) => theme.space.u3, ({
  theme
}) => theme.transitions.quick, _designTokens.space, ({
  theme
}) => theme.colors.neutralSubtle, ({
  theme
}) => theme.colors.text5, ({
  theme
}) => theme.colors.text1, ({
  theme
}) => theme.colors.keySubtle, ({
  theme
}) => theme.colors.key, ({
  theme
}) => theme.colors.keySubtle, ({
  theme
}) => theme.colors.keyFocus);
exports.ButtonItem = ButtonItem;
//# sourceMappingURL=ButtonItem.js.map