"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.weak-map.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputDateRange = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _dateFns = require("date-fns");

var _CalendarToday = require("@styled-icons/material/CalendarToday");

var _utils = require("../../../utils");

var _Calendar = require("../../../Calendar/Calendar");

var _utils2 = require("../../../Calendar/utils");

var _VisuallyHidden = require("../../../VisuallyHidden");

var _Popover = require("../../../Popover");

var _InlineInputText = require("../InlineInputText");

var _InputTextContent = require("../InputText/InputTextContent");

var _ErrorIcon = require("../ErrorIcon");

var _IconButton = require("../../../Button/IconButton");

var _Space = require("../../../Layout/Space");

var _utils3 = require("../../../utils/");

var _InputText = require("../InputText");

var _height = require("../height");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getTextForDate = (range, dateStringFormat, locale) => endpoint => {
  const date = endpoint ? range === null || range === void 0 ? void 0 : range[endpoint] : undefined;
  return (0, _utils2.formatDateString)(date, dateStringFormat, locale);
};

const getViewMonthFromValue = value => value.from || value.to || new Date();

const InputDateRange = (0, _styledComponents.default)((0, _react.forwardRef)((props, ref) => {
  const ariaLabelledby = props['aria-labelledby'],
        dateStringFormat = props.dateStringFormat,
        disabled = props.disabled,
        locale = props.locale,
        id = props.id,
        onChange = props.onChange,
        onValidationFail = props.onValidationFail,
        readOnly = props.readOnly,
        value = props.value,
        validationType = props.validationType;

  const _useTranslation = (0, _utils.useTranslation)('InputDateRange'),
        t = _useTranslation.t;

  const _useState = (0, _react.useState)(getViewMonthFromValue(value)),
        _useState2 = _slicedToArray(_useState, 2),
        viewMonth = _useState2[0],
        setViewMonth = _useState2[1];

  const startDateLabelledby = `startDate-labelledby-${id}`;
  const endDateLabelledby = `endDate-labelledby-${id}`;
  const dateTexts = (0, _react.useMemo)(() => {
    const getText = getTextForDate(value, dateStringFormat, locale);
    return {
      from: getText('from'),
      to: getText('to')
    };
  }, [value, dateStringFormat, locale]);

  const _useState3 = (0, _react.useState)(dateTexts.from),
        _useState4 = _slicedToArray(_useState3, 2),
        fromTextInputValue = _useState4[0],
        setFromTextInputValue = _useState4[1];

  (0, _react.useEffect)(() => {
    setFromTextInputValue(dateTexts.from);
  }, [dateTexts.from]);
  const fromID = (0, _utils3.useID)(id && `from-${id}`);

  const _useState5 = (0, _react.useState)(dateTexts.to),
        _useState6 = _slicedToArray(_useState5, 2),
        toTextInputValue = _useState6[0],
        setToTextInputValue = _useState6[1];

  (0, _react.useEffect)(() => {
    setToTextInputValue(dateTexts.to);
  }, [dateTexts.to]);
  const toID = (0, _utils3.useID)(id && `to-${id}`);
  const getEndpoint = (0, _react.useCallback)(({
    id
  }) => {
    return id === fromID ? 'from' : 'to';
  }, [fromID]);
  const updateRangeFromInput = (0, _react.useCallback)(currentTarget => {
    const inputValue = currentTarget.value;
    const endpoint = getEndpoint(currentTarget);
    let validationMessage = inputValue;
    const valueEndpoint = value[endpoint];

    if (inputValue === '') {
      validationMessage = '';

      if (valueEndpoint) {
        const newRange = _objectSpread({}, value);

        delete newRange[endpoint];
        onChange(newRange);
      }
    } else {
      const parsedValue = (0, _utils2.parseDateFromString)(inputValue, locale, dateStringFormat);

      if (parsedValue) {
        const newRange = _objectSpread(_objectSpread({}, value), {}, {
          [endpoint]: parsedValue
        });

        validationMessage = newRange.from && newRange.to && !(0, _dateFns.isBefore)(newRange.from, newRange.to) ? 'Invalid range' : '';

        if (!valueEndpoint || !(0, _dateFns.isSameDay)(valueEndpoint, parsedValue)) {
          setViewMonth(parsedValue);
          onChange(newRange);
        }
      }
    }

    if (validationMessage && (0, _isFunction.default)(onValidationFail)) {
      onValidationFail(validationMessage);
    }
  }, [dateStringFormat, getEndpoint, locale, onChange, onValidationFail, value]);
  const handleBlur = (0, _react.useCallback)(e => {
    updateRangeFromInput(e.currentTarget);
  }, [updateRangeFromInput]);
  const handleKeyDown = (0, _react.useCallback)(e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      updateRangeFromInput(e.currentTarget);
    }
  }, [updateRangeFromInput]);

  const handleInputChange = e => {
    const currentTarget = e.currentTarget;
    const value = currentTarget.value;
    const endpoint = getEndpoint(currentTarget);

    if (endpoint === 'from') {
      setFromTextInputValue(value);
    } else {
      setToTextInputValue(value);
    }
  };

  const _useToggle = (0, _utils3.useToggle)(),
        isOpen = _useToggle.value,
        setOpen = _useToggle.change,
        toggle = _useToggle.toggle;

  const handleIconClick = (0, _react.useCallback)(() => {
    setViewMonth(getViewMonthFromValue(value));
    toggle();
  }, [toggle, value]);

  const _usePopover = (0, _Popover.usePopover)({
    content: _react.default.createElement("div", null, _react.default.createElement(_VisuallyHidden.VisuallyHidden, {
      "aria-live": "assertive"
    }, viewMonth ? (0, _utils2.formatDateString)(viewMonth, 'MMMM-yyyy', locale) : ''), _react.default.createElement(_Calendar.Calendar, {
      disabled: disabled,
      locale: locale,
      isRange: true,
      onSelectRange: onChange,
      selectedRange: value,
      viewMonth: viewMonth,
      onMonthChange: setViewMonth
    })),
    focusTrap: false,
    isOpen,
    placement: 'bottom-start',
    ref,
    setOpen,
    triggerToggle: false
  }),
        popover = _usePopover.popover,
        popoverRef = _usePopover.ref;

  const commonInputProps = {
    disabled,
    fontSize: 'small',
    onBlur: handleBlur,
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    readOnly
  };
  return _react.default.createElement(InputTextGroupWrapper, {
    ref: popoverRef,
    disabled: disabled,
    validationType: validationType
  }, _react.default.createElement(_InlineInputText.InlineInputTextBase, _extends({
    placeholder: t('Start date'),
    "data-testid": "date-from-text-input",
    id: fromID,
    value: fromTextInputValue,
    "aria-labelledby": `${ariaLabelledby} ${startDateLabelledby}`
  }, commonInputProps)), _react.default.createElement(HyphenWrapper, {
    hasInputValues: !(0, _isEmpty.default)(value),
    "aria-hidden": "true"
  }, "\u2013"), _react.default.createElement(_VisuallyHidden.VisuallyHidden, {
    id: endDateLabelledby
  }, 'End date'), _react.default.createElement(_InlineInputText.InlineInputTextBase, _extends({
    placeholder: t('End date'),
    "data-testid": "date-to-text-input",
    id: toID,
    value: toTextInputValue,
    "aria-labelledby": `${ariaLabelledby} ${endDateLabelledby}`
  }, commonInputProps)), _react.default.createElement(_Space.Space, {
    gap: "xxsmall",
    justify: "end",
    pr: "u2"
  }, _react.default.createElement(_IconButton.IconButton, {
    size: "xsmall",
    label: 'Open calendar',
    icon: _react.default.createElement(_CalendarToday.CalendarToday, null),
    onClick: handleIconClick,
    disabled: readOnly || disabled
  }), validationType === 'error' && _react.default.createElement(_InputTextContent.InputTextContent, {
    pl: "u1"
  }, _react.default.createElement(_ErrorIcon.ErrorIcon, null))), popover);
})).withConfig({
  displayName: "InputDateRange",
  componentId: "sc-1mk7l5x-0"
})([""]);
exports.InputDateRange = InputDateRange;

const HyphenWrapper = _styledComponents.default.span.withConfig({
  displayName: "InputDateRange__HyphenWrapper",
  componentId: "sc-1mk7l5x-1"
})(["align-items:center;color:", ";display:flex;.label-down &{display:none;}"], ({
  theme,
  hasInputValues
}) => hasInputValues ? theme.colors.text3 : theme.colors.text1);

const InputTextGroupWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputTextGroupWrapper",
  componentId: "sc-1mk7l5x-2"
})(["", " align-items:stretch;display:flex;font-family:", ";height:", ";justify-content:space-evenly;padding:", ";width:100%;&:hover{", "}&:focus-within{", "}", " ", " input{font-family:inherit;}", "{flex-shrink:0;margin:", " 0;&:focus-within{background:", ";}input,span{padding:0 ", ";}}"], _InputText.inputCSS, ({
  theme
}) => theme.fonts.body, _height.inputHeight, ({
  theme: {
    space
  }
}) => `${space.u05} ${space.u1}`, _InputText.inputTextHover, _InputText.inputTextFocus, _InputText.inputTextValidation, ({
  disabled
}) => disabled && _InputText.inputTextDisabled, _InlineInputText.InlineInputTextBase, ({
  theme
}) => theme.space.u05, ({
  theme
}) => theme.colors.keyAccent, ({
  theme
}) => theme.space.u2);
//# sourceMappingURL=InputDateRange.js.map