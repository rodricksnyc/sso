import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.assign.js";
var _excluded = ["imageUrl", "label", "size"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { AccountCircle } from '@styled-icons/material-outlined/AccountCircle';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useTranslation } from '../utils';
import { IconButton } from '../Button';
export var AvatarButton = styled(forwardRef(function (_ref, forwardedRef) {
  var imageUrl = _ref.imageUrl,
      label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'large' : _ref$size,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useTranslation = useTranslation('AvatarButton'),
      t = _useTranslation.t;

  return React.createElement(IconButton, _extends({
    label: label,
    "aria-label": typeof label === 'string' ? label : '',
    icon: React.createElement(AccountCircle, null),
    size: size,
    ref: forwardedRef
  }, rest), imageUrl && React.createElement("img", {
    alt: t('Profile Picture'),
    className: "default-image",
    src: imageUrl
  }));
})).withConfig({
  displayName: "AvatarButton",
  componentId: "sc-yers8c-0"
})(["position:relative;img{border-radius:50%;height:", ";position:absolute;width:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.sizes.medium;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.sizes.medium;
});
//# sourceMappingURL=AvatarButton.js.map