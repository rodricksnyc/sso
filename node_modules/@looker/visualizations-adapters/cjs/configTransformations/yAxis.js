"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.yAxis = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.set.js");

require("core-js/modules/es.array.map.js");

var _omitBy = _interopRequireDefault(require("lodash/omitBy"));

var _isNull = _interopRequireDefault(require("lodash/isNull"));

const _excluded = ["y_axes", "y_axis_reversed", "y_axis_gridlines", "y_axis"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const deriveDefaults = (axisRaw, axisOfficial, fallbackLabel) => {
  const showLabels = axisRaw.showLabels,
        showValues = axisRaw.showValues,
        minValue = axisRaw.minValue,
        maxValue = axisRaw.maxValue,
        labelRaw = axisRaw.label,
        y_axis_gridlines = axisRaw.y_axis_gridlines;
  const yAxisLabel = labelRaw || fallbackLabel;
  const _ref = axisOfficial,
        _ref$gridlines = _ref.gridlines,
        gridlines = _ref$gridlines === void 0 ? y_axis_gridlines : _ref$gridlines,
        _ref$label = _ref.label,
        label = _ref$label === void 0 ? showLabels === false ? false : yAxisLabel : _ref$label,
        _ref$range = _ref.range,
        range = _ref$range === void 0 ? [minValue === undefined ? 'auto' : minValue, maxValue === undefined ? 'auto' : maxValue] : _ref$range,
        _ref$values = _ref.values,
        values = _ref$values === void 0 ? showValues : _ref$values;
  return {
    gridlines: typeof gridlines === 'undefined' ? true : gridlines,
    label,
    range,
    values: typeof values === 'undefined' ? true : values
  };
};

const yAxis = ({
  config,
  data,
  fields
}) => {
  const _config$y_axes = config.y_axes,
        y_axis_raw = _config$y_axes === void 0 ? [{}] : _config$y_axes,
        _config$y_axis_revers = config.y_axis_reversed,
        y_axis_reversed = _config$y_axis_revers === void 0 ? false : _config$y_axis_revers,
        _config$y_axis_gridli = config.y_axis_gridlines,
        y_axis_gridlines = _config$y_axis_gridli === void 0 ? true : _config$y_axis_gridli,
        _config$y_axis = config.y_axis,
        y_axis = _config$y_axis === void 0 ? [{}] : _config$y_axis,
        restConfig = _objectWithoutProperties(config, _excluded);

  const longestListLength = Math.max(y_axis_raw.length, y_axis.length);
  const numberOfMeasureLabels = Array.from(new Set(fields.measures.map(measure => measure.label))).length;
  const yAxisWithDefaults = [];

  for (let i = 0; i < longestListLength; i++) {
    const rawAxisAtPosition = (0, _omitBy.default)(y_axis_raw[i] || {}, _isNull.default);
    const officialAxisAtPosition = y_axis[i] || {};

    const _ref2 = fields.measures[i] || {},
          label = _ref2.label,
          view_label = _ref2.view_label;

    const fallbackLabel = numberOfMeasureLabels === 1 ? label || view_label : undefined;
    yAxisWithDefaults[i] = deriveDefaults(_objectSpread(_objectSpread({}, rawAxisAtPosition), {}, {
      y_axis_gridlines,
      y_axis_reversed
    }), officialAxisAtPosition, fallbackLabel);
  }

  return {
    config: _objectSpread(_objectSpread({}, restConfig), {}, {
      y_axis: yAxisWithDefaults
    }),
    data,
    fields
  };
};

exports.yAxis = yAxis;
//# sourceMappingURL=yAxis.js.map