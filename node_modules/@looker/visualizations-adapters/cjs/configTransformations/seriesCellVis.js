"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seriesCellVis = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.array.map.js");

var _get = _interopRequireDefault(require("lodash/get"));

const _excluded = ["series"],
      _excluded2 = ["cell_visualization"],
      _excluded3 = ["cell_visualization"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const setSeriesCellVisStatus = (config, measureName = '', i) => {
  const cellVisDefault = i === 0;
  const seriesBaseName = measureName.split('|')[0];
  const apiValue = (0, _get.default)(config, ['series_cell_visualizations', seriesBaseName, 'is_active'], cellVisDefault);
  return apiValue;
};

const seriesCellVis = ({
  config,
  data,
  fields
}) => {
  const _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        restConfig = _objectWithoutProperties(config, _excluded);

  const buildArraySeries = (s = []) => {
    const arraySeries = fields === null || fields === void 0 ? void 0 : fields.measures.map(({
      name
    }, i) => {
      const defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i);

      const _ref = (s === null || s === void 0 ? void 0 : s[i]) || {},
            _ref$cell_visualizati = _ref.cell_visualization,
            cell_visualization = _ref$cell_visualizati === void 0 ? defaultSeriesCellValue : _ref$cell_visualizati,
            restSeries = _objectWithoutProperties(_ref, _excluded2);

      return _objectSpread({
        cell_visualization
      }, restSeries);
    }, []);
    return arraySeries;
  };

  const buildNamedSeries = (s = {}) => {
    const namedSeries = fields.measures.reduce((seriesConfig, {
      name
    }, i) => {
      const defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i);

      const _ref2 = (s === null || s === void 0 ? void 0 : s[name]) || {},
            _ref2$cell_visualizat = _ref2.cell_visualization,
            cell_visualization = _ref2$cell_visualizat === void 0 ? defaultSeriesCellValue : _ref2$cell_visualizat,
            restSeries = _objectWithoutProperties(_ref2, _excluded3);

      return _objectSpread(_objectSpread({}, seriesConfig), {}, {
        [name]: _objectSpread({
          cell_visualization
        }, restSeries)
      });
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series)
    }, restConfig),
    data,
    fields
  };
};

exports.seriesCellVis = seriesCellVis;
//# sourceMappingURL=seriesCellVis.js.map