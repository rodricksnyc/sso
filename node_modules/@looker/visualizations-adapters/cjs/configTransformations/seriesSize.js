"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seriesSize = void 0;

require("core-js/modules/es.object.entries.js");

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.array.iterator.js");

var _merge = _interopRequireDefault(require("lodash/merge"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _set = _interopRequireDefault(require("lodash/set"));

var _utils = require("../utils");

const _excluded = ["size_by_field", "series"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function removeInvalidSizeBy(series = {}, fields) {
  const measureNames = (0, _utils.getMeasureNames)(fields);
  const entries = Object.entries(series || {});

  for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
    const _entries$_i = _slicedToArray(_entries[_i], 2),
          key = _entries$_i[0],
          seriesEntry = _entries$_i[1];

    const size_by = seriesEntry.size_by;
    (0, _set.default)(series, [key, 'size_by'], size_by && measureNames.includes(size_by) ? size_by : false);
  }

  return series;
}

const seriesSize = ({
  config,
  data,
  fields
}) => {
  const size_by_field = config.size_by_field,
        _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        restConfig = _objectWithoutProperties(config, _excluded);

  const measures = (0, _utils.getMeasureNames)(fields);
  const defaultSizeByValue = size_by_field && size_by_field.length ? size_by_field : false;

  const buildNamedSeries = s => {
    const namedSeries = measures.reduce((seriesConfig, field) => {
      const currentFieldSettings = (0, _pick.default)(s, field);
      const defaultSizeBy = {
        [field]: {
          size_by: defaultSizeByValue
        }
      };
      const draftSeries = (0, _merge.default)(seriesConfig, defaultSizeBy, currentFieldSettings);
      return draftSeries;
    }, {});
    return removeInvalidSizeBy(namedSeries, fields);
  };

  const buildArraySeries = s => {
    const arraySeries = [...s];

    for (let i = 0; i < measures.length; i++) {
      const currentSeries = arraySeries[i] || {};

      const draftSeries = _objectSpread({
        size_by: defaultSizeByValue
      }, currentSeries);

      arraySeries[i] = draftSeries;
    }

    return removeInvalidSizeBy(arraySeries, fields);
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series)
    }, restConfig),
    data,
    fields
  };
};

exports.seriesSize = seriesSize;
//# sourceMappingURL=seriesSize.js.map