"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seriesLabels = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _utils = require("../utils");

const _excluded = ["series_labels", "series", "show_single_value_title", "single_value_title"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const seriesLabels = ({
  config,
  data,
  fields
}) => {
  const series_labels = config.series_labels,
        _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        _config$show_single_v = config.show_single_value_title,
        show_single_value_title = _config$show_single_v === void 0 ? true : _config$show_single_v,
        _config$single_value_ = config.single_value_title,
        single_value_title = _config$single_value_ === void 0 ? '' : _config$single_value_,
        restConfig = _objectWithoutProperties(config, _excluded);

  const measures = (0, _utils.getMeasureNames)(fields);
  const singleValueTitle = show_single_value_title ? single_value_title : '';

  const buildNamedSeries = s => {
    const namedSeries = measures.reduce((seriesConfig, field) => {
      const currentFieldSettings = (0, _pick.default)(s, field);
      const defaultSeriesLabel = {
        [field]: {
          label: (series_labels === null || series_labels === void 0 ? void 0 : series_labels[field]) || singleValueTitle
        }
      };
      return (0, _merge.default)(seriesConfig, defaultSeriesLabel, currentFieldSettings);
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? series : buildNamedSeries(series)
    }, restConfig),
    data,
    fields
  };
};

exports.seriesLabels = seriesLabels;
//# sourceMappingURL=seriesLabels.js.map