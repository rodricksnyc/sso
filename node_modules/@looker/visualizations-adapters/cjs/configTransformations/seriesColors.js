"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seriesColors = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.set.js");

var _utils = require("../utils");

const _excluded = ["series_colors", "series", "custom_color", "default_series_colors"],
      _excluded2 = ["color"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const seriesColors = ({
  config,
  data,
  fields
}) => {
  var _fields$measures;

  const _config$series_colors = config.series_colors,
        series_colors = _config$series_colors === void 0 ? {} : _config$series_colors,
        _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        custom_color = config.custom_color,
        _config$default_serie = config.default_series_colors,
        default_series_colors = _config$default_serie === void 0 ? [] : _config$default_serie,
        restConfig = _objectWithoutProperties(config, _excluded);

  const seriesColors = (0, _utils.normalizePivotSeriesKeys)(series_colors);
  const seriesColorValues = (fields === null || fields === void 0 ? void 0 : (_fields$measures = fields.measures) === null || _fields$measures === void 0 ? void 0 : _fields$measures.map(measure => {
    return seriesColors === null || seriesColors === void 0 ? void 0 : seriesColors[measure.name];
  })) || [];
  const colorSet = Array.from(new Set([...seriesColorValues, custom_color, ...default_series_colors])).filter(Boolean);

  const buildArraySeries = (s = []) => {
    var _fields$measures2;

    const arraySeries = [...s];
    const defaultValues = (fields === null || fields === void 0 ? void 0 : (_fields$measures2 = fields.measures) === null || _fields$measures2 === void 0 ? void 0 : _fields$measures2.map((_, i) => ({
      color: colorSet[i]
    }))) || [];

    for (let i = 0; i < defaultValues.length; i++) {
      arraySeries[i] = Object.assign({}, defaultValues[i], arraySeries[i]);
    }

    return arraySeries;
  };

  const buildNamedSeries = s => {
    var _fields$measures3;

    const namedSeries = fields === null || fields === void 0 ? void 0 : (_fields$measures3 = fields.measures) === null || _fields$measures3 === void 0 ? void 0 : _fields$measures3.reduce((seriesConfig, measure, i) => {
      const measureName = measure.name;

      const _ref = s[measureName] || {},
            currentColor = _ref.color,
            restSeries = _objectWithoutProperties(_ref, _excluded2);

      return _objectSpread(_objectSpread({}, seriesConfig), {}, {
        [measureName]: _objectSpread(_objectSpread({}, restSeries), {}, {
          color: currentColor || colorSet[i]
        })
      });
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series),
      default_series_colors
    }, restConfig),
    data,
    fields
  };
};

exports.seriesColors = seriesColors;
//# sourceMappingURL=seriesColors.js.map