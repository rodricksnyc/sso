"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeChartTypes = exports.CHART_TYPE_MAP = void 0;

var _has = _interopRequireDefault(require("lodash/has"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const CHART_TYPE_MAP = {
  '': 'default',
  area: 'area',
  bar: 'bar',
  column: 'column',
  default: 'default',
  line: 'line',
  looker_area: 'area',
  looker_bar: 'bar',
  looker_column: 'column',
  looker_grid: 'table',
  looker_line: 'line',
  looker_pie: 'pie',
  looker_scatter: 'scatter',
  pie: 'pie',
  scatter: 'scatter',
  single_value: 'single_value',
  sparkline: 'sparkline',
  table: 'table'
};
exports.CHART_TYPE_MAP = CHART_TYPE_MAP;

const normalizeChartTypes = ({
  config,
  data,
  fields
}) => {
  const _config$type = config.type,
        type = _config$type === void 0 ? CHART_TYPE_MAP.default : _config$type;
  const normalizedType = (0, _has.default)(CHART_TYPE_MAP, type) ? CHART_TYPE_MAP[type] : type;
  return {
    config: _objectSpread(_objectSpread({}, config), {}, {
      type: normalizedType
    }),
    data,
    fields
  };
};

exports.normalizeChartTypes = normalizeChartTypes;
//# sourceMappingURL=normalizeChartTypes.js.map