"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xAxis = void 0;

require("core-js/modules/es.array.iterator.js");

var _omitBy = _interopRequireDefault(require("lodash/omitBy"));

var _isNull = _interopRequireDefault(require("lodash/isNull"));

const _excluded = ["x_axis_reversed", "x_axis_gridlines", "show_x_axis_ticks", "show_x_axis_label", "x_axis_label", "x_axis"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const deriveDefaults = (axisRaw, axisOfficial, measure) => {
  const measureLabel = measure.label,
        measureViewLabel = measure.view_label;
  const _ref = axisRaw,
        x_axis_reversed = _ref.x_axis_reversed,
        x_axis_gridlines = _ref.x_axis_gridlines,
        show_x_axis_ticks = _ref.show_x_axis_ticks,
        show_x_axis_label = _ref.show_x_axis_label,
        _ref$x_axis_label = _ref.x_axis_label,
        x_axis_label = _ref$x_axis_label === void 0 ? measureLabel || measureViewLabel : _ref$x_axis_label;
  const _ref2 = axisOfficial,
        _ref2$gridlines = _ref2.gridlines,
        gridlines = _ref2$gridlines === void 0 ? x_axis_gridlines : _ref2$gridlines,
        _ref2$label = _ref2.label,
        label = _ref2$label === void 0 ? show_x_axis_label === false ? false : x_axis_label : _ref2$label,
        _ref2$reversed = _ref2.reversed,
        reversed = _ref2$reversed === void 0 ? x_axis_reversed : _ref2$reversed,
        _ref2$values = _ref2.values,
        values = _ref2$values === void 0 ? show_x_axis_ticks : _ref2$values;
  return {
    gridlines: typeof gridlines === 'undefined' ? true : gridlines,
    label: label === null ? false : label,
    reversed: !!reversed,
    values: typeof values === 'undefined' ? true : values
  };
};

const xAxis = ({
  config,
  data,
  fields
}) => {
  const _config$x_axis_revers = config.x_axis_reversed,
        x_axis_reversed = _config$x_axis_revers === void 0 ? false : _config$x_axis_revers,
        _config$x_axis_gridli = config.x_axis_gridlines,
        x_axis_gridlines = _config$x_axis_gridli === void 0 ? true : _config$x_axis_gridli,
        _config$show_x_axis_t = config.show_x_axis_ticks,
        show_x_axis_ticks = _config$show_x_axis_t === void 0 ? true : _config$show_x_axis_t,
        _config$show_x_axis_l = config.show_x_axis_label,
        show_x_axis_label = _config$show_x_axis_l === void 0 ? true : _config$show_x_axis_l,
        x_axis_label = config.x_axis_label,
        _config$x_axis = config.x_axis,
        x_axis = _config$x_axis === void 0 ? [{}] : _config$x_axis,
        restConfig = _objectWithoutProperties(config, _excluded);

  const xAxisRaw = [{
    x_axis_reversed,
    x_axis_gridlines,
    show_x_axis_ticks,
    show_x_axis_label,
    x_axis_label
  }];
  const longestListLength = Math.max(xAxisRaw.length, x_axis.length);
  const xAxisWithDefaults = [];

  for (let i = 0; i < longestListLength; i++) {
    var _fields$dimensions;

    const rawAxisAtPosition = (0, _omitBy.default)(xAxisRaw[i] || {}, _isNull.default);
    const officialAxisAtPosition = x_axis[i] || {};
    const measureAtPosition = (fields === null || fields === void 0 ? void 0 : (_fields$dimensions = fields.dimensions) === null || _fields$dimensions === void 0 ? void 0 : _fields$dimensions[i]) || {};
    xAxisWithDefaults[i] = deriveDefaults(rawAxisAtPosition, officialAxisAtPosition, measureAtPosition);
  }

  return {
    config: _objectSpread(_objectSpread({}, restConfig), {}, {
      x_axis: xAxisWithDefaults
    }),
    data,
    fields
  };
};

exports.xAxis = xAxis;
//# sourceMappingURL=xAxis.js.map