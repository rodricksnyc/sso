"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seriesValueFormat = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.map.js");

var _merge = _interopRequireDefault(require("lodash/merge"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _get = _interopRequireDefault(require("lodash/get"));

var _constants = require("../utils/constants");

const _excluded = ["series", "value_format", "label_value_format", "series_value_format"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const seriesValueFormat = ({
  config,
  fields,
  data
}) => {
  const _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        value_format = config.value_format,
        label_value_format = config.label_value_format,
        _config$series_value_ = config.series_value_format,
        series_value_format = _config$series_value_ === void 0 ? {} : _config$series_value_,
        restConfig = _objectWithoutProperties(config, _excluded);

  const valueFormat = value_format || label_value_format;

  const buildArraySeries = (s = []) => {
    var _fields$measures;

    const arraySeries = [...s];
    const defaultValues = fields === null || fields === void 0 ? void 0 : (_fields$measures = fields.measures) === null || _fields$measures === void 0 ? void 0 : _fields$measures.map(measure => ({
      value_format: (0, _get.default)(series_value_format, [measure.name, 'format_string']) || (0, _get.default)(measure, 'value_format') || valueFormat || _constants.DEFAULT_STRING_FORMAT
    }));

    for (let i = 0; i < (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.length); i++) {
      arraySeries[i] = Object.assign({}, defaultValues[i], arraySeries[i]);
    }

    return arraySeries;
  };

  const buildNamedSeries = s => {
    var _fields$measures2;

    const namedSeries = fields === null || fields === void 0 ? void 0 : (_fields$measures2 = fields.measures) === null || _fields$measures2 === void 0 ? void 0 : _fields$measures2.reduce((seriesConfig, measure) => {
      const name = measure.name;
      const currentFieldSettings = (0, _pick.default)(s, name);
      const seriesValueFormatString = (0, _get.default)(series_value_format, [name, 'format_string']);
      const measureValueFormat = (0, _get.default)(measure, 'value_format');
      const defaultValueFormat = {
        [name]: {
          value_format: seriesValueFormatString || measureValueFormat || valueFormat || _constants.DEFAULT_STRING_FORMAT
        }
      };
      return (0, _merge.default)(seriesConfig, defaultValueFormat, currentFieldSettings);
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series)
    }, restConfig),
    fields,
    data
  };
};

exports.seriesValueFormat = seriesValueFormat;
//# sourceMappingURL=seriesValueFormat.js.map