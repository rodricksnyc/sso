"use strict";

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dimensionSeriesColors = void 0;

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.array.map.js");

var _utils = require("../utils");

const _excluded = ["series_colors", "series", "custom_color", "default_series_colors"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const MAX_DATA_POINTS = 50;

const dimensionSeriesColors = ({
  config,
  data,
  fields
}) => {
  var _fields$dimensions;

  const series_colors = config.series_colors,
        _config$series = config.series,
        series = _config$series === void 0 ? {} : _config$series,
        custom_color = config.custom_color,
        default_series_colors = config.default_series_colors,
        restConfig = _objectWithoutProperties(config, _excluded);

  const fullColorPalette = (0, _utils.deriveColorPalette)(default_series_colors);
  const limitedData = data.slice(0, MAX_DATA_POINTS);
  const dimensionValues = (fields === null || fields === void 0 ? void 0 : (_fields$dimensions = fields.dimensions) === null || _fields$dimensions === void 0 ? void 0 : _fields$dimensions.flatMap(dimension => {
    return limitedData.map(data => data[dimension.name]);
  }).slice(0, MAX_DATA_POINTS)) || [];

  const buildArraySeries = (s = []) => {
    const draftseries = dimensionValues.map((_, i) => {
      const defaultVal = {
        color: fullColorPalette[i]
      };
      return Object.assign({}, defaultVal, s[i]);
    });
    return draftseries;
  };

  const buildNamedSeries = s => {
    const namedSeries = dimensionValues.reduce((draftSeries, dimension, i) => {
      const currentValues = s[dimension] || {};
      const defaultVal = {
        color: (series_colors === null || series_colors === void 0 ? void 0 : series_colors[dimension]) || fullColorPalette[i]
      };
      return _objectSpread(_objectSpread({}, draftSeries), {}, {
        [dimension]: Object.assign({}, defaultVal, currentValues)
      });
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series),
      default_series_colors
    }, restConfig),
    data,
    fields
  };
};

exports.dimensionSeriesColors = dimensionSeriesColors;
//# sourceMappingURL=dimensionSeriesColors.js.map