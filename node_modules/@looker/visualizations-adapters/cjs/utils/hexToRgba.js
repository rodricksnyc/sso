"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToRgba = void 0;

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.map.js");

var _chunk = _interopRequireDefault(require("lodash/chunk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const hexToRgba = (hex, opacity) => {
  if (opacity < 0 || opacity > 1) {
    throw new Error(`Invalid opacity value: ${opacity}. Please provide a decimal number between 0 and 1.`);
  }

  if (hex[0] === '#' && (hex.length === 4 || hex.length === 7)) {
    return hexToRgba(hex.slice(1), opacity);
  }

  if (hex.length === 3 || hex.length === 6) {
    const chunkLength = hex.length === 3 ? 1 : 2;

    const _chunk$map = (0, _chunk.default)(hex, chunkLength).map(chunk => {
      const color = chunkLength === 1 ? chunk[0] + chunk[0] : chunk.join('');
      return `0x${color}`;
    }),
          _chunk$map2 = _slicedToArray(_chunk$map, 3),
          r = _chunk$map2[0],
          g = _chunk$map2[1],
          b = _chunk$map2[2];

    return `rgba(${+r}, ${+g}, ${+b}, ${String(opacity)})`;
  } else {
    throw new Error(`Invalid hexadecimal color code: ${hex}`);
  }
};

exports.hexToRgba = hexToRgba;
//# sourceMappingURL=hexToRgba.js.map