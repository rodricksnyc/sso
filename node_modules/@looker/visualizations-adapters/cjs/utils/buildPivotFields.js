"use strict";

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildPivotFields = void 0;

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.array.map.js");

var _ = require(".");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const buildPivotFields = ({
  fields,
  pivots
}) => {
  const fieldsCopy = _objectSpread({}, fields);

  fieldsCopy.measures = pivots.flatMap(({
    key,
    label: pivotLabel
  }) => {
    return fields.measures.map(measureField => {
      const pivotMeasureName = (0, _.buildPivotMeasureName)({
        measureName: measureField.name,
        pivotValue: key
      });
      return _objectSpread(_objectSpread({}, measureField), {}, {
        label_short: pivotLabel,
        name: pivotMeasureName,
        pivoted_label: `${measureField.label}: ${pivotLabel}`
      });
    });
  });
  return fieldsCopy;
};

exports.buildPivotFields = buildPivotFields;
//# sourceMappingURL=buildPivotFields.js.map