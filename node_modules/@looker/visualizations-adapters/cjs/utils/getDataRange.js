"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDataRange = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.iterator.js");

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _add = _interopRequireDefault(require("lodash/add"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const getDataRange = ({
  config,
  data,
  fields
}) => {
  const positioning = config.positioning;
  const eligibleMeasures = fields.measures.filter((measure, index) => {
    if (!measure.is_numeric) return false;

    if (config.series) {
      var _config$series, _config$series$index, _config$series2, _config$series2$measu;

      return (0, _isArray.default)(config.series) ? config === null || config === void 0 ? void 0 : (_config$series = config.series) === null || _config$series === void 0 ? void 0 : (_config$series$index = _config$series[index]) === null || _config$series$index === void 0 ? void 0 : _config$series$index.visible : config === null || config === void 0 ? void 0 : (_config$series2 = config.series) === null || _config$series2 === void 0 ? void 0 : (_config$series2$measu = _config$series2[measure.name]) === null || _config$series2$measu === void 0 ? void 0 : _config$series2$measu.visible;
    }

    return true;
  }).map(measure => measure.name);
  const range = data.reduce((draftRange, datum) => {
    const _ref = draftRange,
          _ref2 = _slicedToArray(_ref, 2),
          currentMin = _ref2[0],
          currentMax = _ref2[1];

    const datumValues = eligibleMeasures.map(name => datum[name]);
    const accumulatedValue = datumValues.reduce(_add.default, 0);
    const newMax = Math.max(...(positioning === 'stacked' ? [accumulatedValue] : datumValues), currentMax);
    const newMin = Math.min(...(positioning === 'stacked' ? [accumulatedValue] : datumValues), currentMin);
    return [newMin, newMax];
  }, [Infinity, -Infinity]);
  return range;
};

exports.getDataRange = getDataRange;
//# sourceMappingURL=getDataRange.js.map