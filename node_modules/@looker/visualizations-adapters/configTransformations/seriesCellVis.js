var _excluded = ["series"],
    _excluded2 = ["cell_visualization"],
    _excluded3 = ["cell_visualization"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.split.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
import get from 'lodash/get';

var setSeriesCellVisStatus = function setSeriesCellVisStatus(config) {
  var measureName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var i = arguments.length > 2 ? arguments[2] : undefined;
  var cellVisDefault = i === 0;
  var seriesBaseName = measureName.split('|')[0];
  var apiValue = get(config, ['series_cell_visualizations', seriesBaseName, 'is_active'], cellVisDefault);
  return apiValue;
};

export var seriesCellVis = function seriesCellVis(_ref) {
  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;

  var _config$series = config.series,
      series = _config$series === void 0 ? {} : _config$series,
      restConfig = _objectWithoutProperties(config, _excluded);

  var buildArraySeries = function buildArraySeries() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var arraySeries = fields === null || fields === void 0 ? void 0 : fields.measures.map(function (_ref2, i) {
      var name = _ref2.name;
      var defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i);

      var _ref3 = (s === null || s === void 0 ? void 0 : s[i]) || {},
          _ref3$cell_visualizat = _ref3.cell_visualization,
          cell_visualization = _ref3$cell_visualizat === void 0 ? defaultSeriesCellValue : _ref3$cell_visualizat,
          restSeries = _objectWithoutProperties(_ref3, _excluded2);

      return _objectSpread({
        cell_visualization: cell_visualization
      }, restSeries);
    }, []);
    return arraySeries;
  };

  var buildNamedSeries = function buildNamedSeries() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var namedSeries = fields.measures.reduce(function (seriesConfig, _ref4, i) {
      var name = _ref4.name;
      var defaultSeriesCellValue = setSeriesCellVisStatus(config, name, i);

      var _ref5 = (s === null || s === void 0 ? void 0 : s[name]) || {},
          _ref5$cell_visualizat = _ref5.cell_visualization,
          cell_visualization = _ref5$cell_visualizat === void 0 ? defaultSeriesCellValue : _ref5$cell_visualizat,
          restSeries = _objectWithoutProperties(_ref5, _excluded3);

      return _objectSpread(_objectSpread({}, seriesConfig), {}, _defineProperty({}, name, _objectSpread({
        cell_visualization: cell_visualization
      }, restSeries)));
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series)
    }, restConfig),
    data: data,
    fields: fields
  };
};
//# sourceMappingURL=seriesCellVis.js.map