var _excluded = ["series_labels", "series", "show_single_value_title", "single_value_title"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import pick from 'lodash/pick';
import merge from 'lodash/merge';
import { getMeasureNames } from '../utils';
export var seriesLabels = function seriesLabels(_ref) {
  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;

  var series_labels = config.series_labels,
      _config$series = config.series,
      series = _config$series === void 0 ? {} : _config$series,
      _config$show_single_v = config.show_single_value_title,
      show_single_value_title = _config$show_single_v === void 0 ? true : _config$show_single_v,
      _config$single_value_ = config.single_value_title,
      single_value_title = _config$single_value_ === void 0 ? '' : _config$single_value_,
      restConfig = _objectWithoutProperties(config, _excluded);

  var measures = getMeasureNames(fields);
  var singleValueTitle = show_single_value_title ? single_value_title : '';

  var buildNamedSeries = function buildNamedSeries(s) {
    var namedSeries = measures.reduce(function (seriesConfig, field) {
      var currentFieldSettings = pick(s, field);

      var defaultSeriesLabel = _defineProperty({}, field, {
        label: (series_labels === null || series_labels === void 0 ? void 0 : series_labels[field]) || singleValueTitle
      });

      return merge(seriesConfig, defaultSeriesLabel, currentFieldSettings);
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? series : buildNamedSeries(series)
    }, restConfig),
    data: data,
    fields: fields
  };
};
//# sourceMappingURL=seriesLabels.js.map