import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["series_colors", "series", "custom_color", "default_series_colors"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.flat-map.js";
import "core-js/modules/es.array.unscopables.flat-map.js";
import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.is-array.js";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { deriveColorPalette } from '../utils';
var MAX_DATA_POINTS = 50;
export var dimensionSeriesColors = function dimensionSeriesColors(_ref) {
  var _fields$dimensions;

  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;

  var series_colors = config.series_colors,
      _config$series = config.series,
      series = _config$series === void 0 ? {} : _config$series,
      custom_color = config.custom_color,
      default_series_colors = config.default_series_colors,
      restConfig = _objectWithoutProperties(config, _excluded);

  var fullColorPalette = deriveColorPalette(default_series_colors);
  var limitedData = data.slice(0, MAX_DATA_POINTS);
  var dimensionValues = (fields === null || fields === void 0 ? void 0 : (_fields$dimensions = fields.dimensions) === null || _fields$dimensions === void 0 ? void 0 : _fields$dimensions.flatMap(function (dimension) {
    return limitedData.map(function (data) {
      return data[dimension.name];
    });
  }).slice(0, MAX_DATA_POINTS)) || [];

  var buildArraySeries = function buildArraySeries() {
    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var draftseries = dimensionValues.map(function (_, i) {
      var defaultVal = {
        color: fullColorPalette[i]
      };
      return Object.assign({}, defaultVal, s[i]);
    });
    return draftseries;
  };

  var buildNamedSeries = function buildNamedSeries(s) {
    var namedSeries = dimensionValues.reduce(function (draftSeries, dimension, i) {
      var currentValues = s[dimension] || {};
      var defaultVal = {
        color: (series_colors === null || series_colors === void 0 ? void 0 : series_colors[dimension]) || fullColorPalette[i]
      };
      return _objectSpread(_objectSpread({}, draftSeries), {}, _defineProperty({}, dimension, Object.assign({}, defaultVal, currentValues)));
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series),
      default_series_colors: default_series_colors
    }, restConfig),
    data: data,
    fields: fields
  };
};
//# sourceMappingURL=dimensionSeriesColors.js.map