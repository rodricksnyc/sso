import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.array.index-of.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.object.define-property.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.object.get-own-property-descriptor.js";
import "core-js/modules/es.array.for-each.js";
import "core-js/modules/web.dom-collections.for-each.js";
import "core-js/modules/es.object.get-own-property-descriptors.js";
import "core-js/modules/es.object.define-properties.js";
var _excluded = ["series", "value_format", "label_value_format", "series_value_format"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.is-array.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import merge from 'lodash/merge';
import pick from 'lodash/pick';
import get from 'lodash/get';
import { DEFAULT_STRING_FORMAT } from '../utils/constants';
export var seriesValueFormat = function seriesValueFormat(_ref) {
  var config = _ref.config,
      fields = _ref.fields,
      data = _ref.data;

  var _config$series = config.series,
      series = _config$series === void 0 ? {} : _config$series,
      value_format = config.value_format,
      label_value_format = config.label_value_format,
      _config$series_value_ = config.series_value_format,
      series_value_format = _config$series_value_ === void 0 ? {} : _config$series_value_,
      restConfig = _objectWithoutProperties(config, _excluded);

  var valueFormat = value_format || label_value_format;

  var buildArraySeries = function buildArraySeries() {
    var _fields$measures;

    var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var arraySeries = _toConsumableArray(s);

    var defaultValues = fields === null || fields === void 0 ? void 0 : (_fields$measures = fields.measures) === null || _fields$measures === void 0 ? void 0 : _fields$measures.map(function (measure) {
      return {
        value_format: get(series_value_format, [measure.name, 'format_string']) || get(measure, 'value_format') || valueFormat || DEFAULT_STRING_FORMAT
      };
    });

    for (var i = 0; i < (defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.length); i++) {
      arraySeries[i] = Object.assign({}, defaultValues[i], arraySeries[i]);
    }

    return arraySeries;
  };

  var buildNamedSeries = function buildNamedSeries(s) {
    var _fields$measures2;

    var namedSeries = fields === null || fields === void 0 ? void 0 : (_fields$measures2 = fields.measures) === null || _fields$measures2 === void 0 ? void 0 : _fields$measures2.reduce(function (seriesConfig, measure) {
      var name = measure.name;
      var currentFieldSettings = pick(s, name);
      var seriesValueFormatString = get(series_value_format, [name, 'format_string']);
      var measureValueFormat = get(measure, 'value_format');

      var defaultValueFormat = _defineProperty({}, name, {
        value_format: seriesValueFormatString || measureValueFormat || valueFormat || DEFAULT_STRING_FORMAT
      });

      return merge(seriesConfig, defaultValueFormat, currentFieldSettings);
    }, {});
    return namedSeries;
  };

  return {
    config: _objectSpread({
      series: Array.isArray(series) ? buildArraySeries(series) : buildNamedSeries(series)
    }, restConfig),
    fields: fields,
    data: data
  };
};
//# sourceMappingURL=seriesValueFormat.js.map