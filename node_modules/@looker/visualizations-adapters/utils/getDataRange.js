function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.array.filter.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.array.from.js";
import isArray from 'lodash/isArray';
import add from 'lodash/add';
export var getDataRange = function getDataRange(_ref) {
  var config = _ref.config,
      data = _ref.data,
      fields = _ref.fields;
  var positioning = config.positioning;
  var eligibleMeasures = fields.measures.filter(function (measure, index) {
    if (!measure.is_numeric) return false;

    if (config.series) {
      var _config$series, _config$series$index, _config$series2, _config$series2$measu;

      return isArray(config.series) ? config === null || config === void 0 ? void 0 : (_config$series = config.series) === null || _config$series === void 0 ? void 0 : (_config$series$index = _config$series[index]) === null || _config$series$index === void 0 ? void 0 : _config$series$index.visible : config === null || config === void 0 ? void 0 : (_config$series2 = config.series) === null || _config$series2 === void 0 ? void 0 : (_config$series2$measu = _config$series2[measure.name]) === null || _config$series2$measu === void 0 ? void 0 : _config$series2$measu.visible;
    }

    return true;
  }).map(function (measure) {
    return measure.name;
  });
  var range = data.reduce(function (draftRange, datum) {
    var _ref2 = draftRange,
        _ref3 = _slicedToArray(_ref2, 2),
        currentMin = _ref3[0],
        currentMax = _ref3[1];

    var datumValues = eligibleMeasures.map(function (name) {
      return datum[name];
    });
    var accumulatedValue = datumValues.reduce(add, 0);
    var newMax = Math.max.apply(Math, _toConsumableArray(positioning === 'stacked' ? [accumulatedValue] : datumValues).concat([currentMax]));
    var newMin = Math.min.apply(Math, _toConsumableArray(positioning === 'stacked' ? [accumulatedValue] : datumValues).concat([currentMin]));
    return [newMin, newMax];
  }, [Infinity, -Infinity]);
  return range;
};
//# sourceMappingURL=getDataRange.js.map