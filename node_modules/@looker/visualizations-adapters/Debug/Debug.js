import React from 'react';
import { Accordion2 } from '@looker/components';
import { StaticTable } from '../StaticTable';
import isEmpty from 'lodash/isEmpty';
import { useTranslation } from 'react-i18next';
import { KeyValueList } from '../KeyValueList';
export var Debug = function Debug(_ref) {
  var ok = _ref.ok,
      data = _ref.data,
      error = _ref.error,
      _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      fields = _ref.fields;

  var _useTranslation = useTranslation('Debug'),
      t = _useTranslation.t;

  return React.createElement(React.Fragment, null, React.createElement(KeyValueList, {
    value: {
      response: ok ? t('ok') : t('error')
    }
  }), !isEmpty(error) && React.createElement(Accordion2, {
    indicatorPosition: "left",
    defaultOpen: true,
    label: t('Error')
  }, React.createElement(KeyValueList, {
    value: error || {}
  })), !isEmpty(config) && React.createElement(Accordion2, {
    indicatorPosition: "left",
    label: t('Config')
  }, React.createElement(KeyValueList, {
    value: config
  })), !isEmpty(fields) && React.createElement(React.Fragment, null, React.createElement(Accordion2, {
    indicatorPosition: "left",
    label: t('Dimensions')
  }, React.createElement(KeyValueList, {
    value: (fields === null || fields === void 0 ? void 0 : fields.dimensions) || {}
  })), React.createElement(Accordion2, {
    indicatorPosition: "left",
    label: t('Measures')
  }, React.createElement(KeyValueList, {
    value: (fields === null || fields === void 0 ? void 0 : fields.measures) || {}
  }))), data && React.createElement(Accordion2, {
    indicatorPosition: "left",
    defaultOpen: true,
    label: t('Result')
  }, React.createElement(StaticTable, {
    data: data,
    fields: fields
  })));
};
//# sourceMappingURL=Debug.js.map