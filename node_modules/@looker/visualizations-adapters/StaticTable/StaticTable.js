function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.object.from-entries.js";
import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.entries.js";
import "core-js/modules/es.array.is-array.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import React from 'react';
import styled from 'styled-components';
import { Table, TableHead, TableRow, TableBody, TableHeaderCell, TableDataCell } from '@looker/components';
export var StaticTable = function StaticTable(_ref) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$fields = _ref.fields,
      fields = _ref$fields === void 0 ? {
    dimensions: [],
    measures: []
  } : _ref$fields,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 'auto' : _ref$width;

  if (!data.length) {
    return null;
  }

  var measureLabels = _toConsumableArray(fields.measures).map(function (f) {
    return [f.name, f.view_label];
  });

  var dimensionLabels = _toConsumableArray(fields.dimensions).map(function (f) {
    return [f.name, f.label_short];
  });

  var fieldLabels = Object.fromEntries([].concat(_toConsumableArray(dimensionLabels), _toConsumableArray(measureLabels)));
  var formattedData = data.map(function (d) {
    return Object.fromEntries(Object.entries(d).map(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      return [key, value];
    }));
  });
  var resultKeys = Array.isArray(data) ? Object.keys(data[0]) : Object.keys(data);
  return React.createElement(Table, {
    width: width === 'auto' ? '100%' : "".concat(width, "px"),
    "data-testid": "table-chart"
  }, React.createElement(TableHead, null, React.createElement(TableRow, null, React.createElement(TableHeaderCell, null), resultKeys.map(function (key) {
    return React.createElement(StyledTableHeaderCell, {
      key: key,
      width: "auto"
    }, fieldLabels[key]);
  }))), React.createElement(TableBody, null, Array.isArray(data) && formattedData.map(function (obj, i) {
    return React.createElement(TableRow, {
      key: i
    }, React.createElement(TableDataCell, {
      textAlign: "right",
      color: "text1",
      width: "1px",
      pr: "small"
    }, i + 1), resultKeys.map(function (key) {
      var val = obj[key];
      var valHelper = val;

      if (typeof val === 'function') {
        valHelper = val();
      } else if (Object(val) === val) {
        valHelper = JSON.stringify(val);
      }

      return React.createElement(TableDataCell, {
        key: key
      }, valHelper);
    }));
  })));
};
var StyledTableHeaderCell = styled(TableHeaderCell).withConfig({
  displayName: "StaticTable__StyledTableHeaderCell",
  componentId: "sc-15kcil2-0"
})(["&:first-child{max-width:0;min-width:0;}"]);
//# sourceMappingURL=StaticTable.js.map